{"title":"闭包","date":"2018-05-18T10:08:20.000Z","link":"2018/05/18/闭包","tags":["JavaScript"],"categories":["前端"],"updated":"2019-08-25T13:14:27.650Z","content":"<blockquote>\n<p>闭包的形成与变量的作用域以及变量的生存周期密切相关</p>\n</blockquote>\n<h2 id=\"1-变量的作用域\">1.变量的作用域<a href=\"2018/05/18/闭包#1-变量的作用域\"></a></h2><p>变量的作用域指变量的有效范围，一般说的变量的作用域就是在函数中声明的变量作用域。</p>\n<p>当在函数中声明一个变量的时候，如果该变量前面没有带上关键字var，这个变量就会成为全局变量，这是一种容易造成命名冲突的做法。</p>\n<p>用var关键词在函数中声明的变量是全局变量，只有该函数内部才能访问到这个变量，在函数外部是访问不到的。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function func()&#123;</span><br><span class=\"line\">\tvar a=1;</span><br><span class=\"line\">\tconsole.log(a); //1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func();</span><br><span class=\"line\">console.log(a);//报错：a is not defined</span><br></pre></td></tr></table></div></figure>\n<p>在javascript中，函数可以用来创造函数作用域，此时的函数像一层半透明的玻璃，在函数里面可以看到外面的变量，而在函数外面则无法看到函数里面的作用域。这是因为当在函数中搜索一个变量的时候，如果该函数内并没有声明这个变量，那么此次搜索的过程会随着代码执行环境创建的作用域链往外层逐层搜索，一直搜索到全局对象为止。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a=1;</span><br><span class=\"line\">function func1()&#123;</span><br><span class=\"line\">  var b=2;</span><br><span class=\"line\">  function func2()&#123;</span><br><span class=\"line\">   var c=3;</span><br><span class=\"line\">   console.log(a);//1</span><br><span class=\"line\">   console.log(b);//2</span><br><span class=\"line\">   console.log(c);//3</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">  func2();</span><br><span class=\"line\">  console.log(c);//报错c is not defined</span><br><span class=\"line\">  console.log(b);//2</span><br><span class=\"line\">  console.log(a);//1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func1();</span><br><span class=\"line\">console.log(a);//1</span><br><span class=\"line\">console.log(b);//报错b is not defined</span><br><span class=\"line\">console.log(c);//报错c is not defined</span><br></pre></td></tr></table></div></figure>\n<p>注意：函数中变量的搜索是从内到外搜索的。</p>\n<h2 id=\"2-变量的生存周期\">2.变量的生存周期<a href=\"2018/05/18/闭包#2-变量的生存周期\"></a></h2><p>对于全局变量来说，全局变量的生存期是永久的，除非我们主动销毁这个全局变量</p>\n<p>对于在函数内用var关键字声明的局部变量来说，当退出函数时，这些变量即失去了它们的价值，它们都会随着函数调用的结束而被销毁。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function func()&#123;</span><br><span class=\"line\">\tvar a=1;  //退出函数后局部变量a将被销毁</span><br><span class=\"line\">\tconsole.log(a); //1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func();</span><br><span class=\"line\"></span><br><span class=\"line\">我们可以看一下闭包形成的变量的作用域：</span><br><span class=\"line\"></span><br><span class=\"line\">function func()&#123;</span><br><span class=\"line\">\tvar a=1;</span><br><span class=\"line\">  return function()&#123;</span><br><span class=\"line\">\ta++</span><br><span class=\"line\">\tconsole.log(a);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var f=func();</span><br><span class=\"line\">f();//2</span><br><span class=\"line\">f();//3</span><br><span class=\"line\">f();//4</span><br><span class=\"line\">f();//5</span><br><span class=\"line\">f();//6</span><br></pre></td></tr></table></div></figure>\n<p>在闭包结构中，从上述代码我们可以看出，局部变量a并没有消失，而是似乎在某个地方一直存活着。这是因为当执行<br><code>var f=fun();</code>，f返回了一个匿名函数的引用，它可以访问到func()被调用时产生的环境，而局部变量a一直处于在这个环境里。既然局部变量所在的环境还能被外界访问，这个局部变量就有了不被销毁的理由。</p>\n<p>关于闭包有一个典型的应用</p>\n<p>假设页面上有5个div节点，我们通过循环来给每个div绑定onclick事件，按照索引顺序，点击第1个div时弹出0，点击第2个时弹出1，以此类推。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;div&gt;1&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div&gt;2&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div&gt;3&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div&gt;4&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div&gt;5&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\tvar div=document.getElementsByTagName(&quot;div&quot;);</span><br><span class=\"line\">\tfor(var i=0;i&lt;div.length;i++)&#123;</span><br><span class=\"line\">\t\tdiv[i].onclick=function()&#123;</span><br><span class=\"line\">\t\t\tconsole.log(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></div></figure>\n<p>在浏览器运行一下，你可能会发现无论点击哪个div，最后弹出的结果都是5。这是因为div节点的onclick事件是被异步触发的，当事件被触发的时候，for循环早已结束，此时变量i的值已经是5，所以在div节点的onclick事件函数中顺着作用域链从内到外查找变量i时，查找到的值总是5。</p>\n<p>解决方法：</p>\n<p>利用闭包，把每次循环的i值都封闭起来，当在事件函数中顺着作用域链中从内到外查找变量i时，会先找到被封闭在闭包环境中的i,如果有5个div，i的值就分别是0,1,2,3,4。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;div&gt;1&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div&gt;2&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div&gt;3&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div&gt;4&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div&gt;5&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var div=document.getElementsByTagName(&quot;div&quot;);</span><br><span class=\"line\">\tfor(var i=0;i&lt;div.length;i++)&#123;</span><br><span class=\"line\">\t (function(i)&#123;</span><br><span class=\"line\">\t\tdiv[i].onclick=function()&#123;</span><br><span class=\"line\">\t\t\tconsole.log(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    &#125;)(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">或</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var div=document.getElementsByTagName(&quot;div&quot;);</span><br><span class=\"line\"> for(var i=0;i&lt;div.length;i++)&#123;</span><br><span class=\"line\">\tdiv[i].onclick=(function(i)&#123;</span><br><span class=\"line\">        return function()&#123;</span><br><span class=\"line\">\t\t  console.log(i);</span><br><span class=\"line\">\t\t &#125;</span><br><span class=\"line\">    &#125;)(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></div></figure>\n<p>总结：闭包的作用</p>\n<p>1、将局部变量的生存期保存下来，即使在退出函数时，变量的作用域也不会被销毁，会一直存在，除非主动释放。</p>\n<p>2、封装变量的值(div点击事件)</p>\n<p>3、将某个变量作用域只在某个函数下存在。(缓存机制)</p>\n<p>4、延续局部变量的寿命</p>\n","prev":{"title":"闭包的作用","link":"2018/05/20/闭包的作用"},"next":{"title":"call和apply的用途","link":"2018/05/16/call和apply的用途"},"plink":"http://yoursite.com/2018/05/18/闭包/","toc":[{"title":"1.变量的作用域","id":"1-变量的作用域","index":"1"},{"title":"2.变量的生存周期","id":"2-变量的生存周期","index":"2"}]}