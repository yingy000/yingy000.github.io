{"title":"设计模式之观察者模式","date":"2018-03-27T03:12:11.000Z","link":"2018/03/27/设计模式之观察者模式","tags":["设计模式"],"categories":["前端"],"updated":"2019-08-25T12:53:43.170Z","content":"<blockquote>\n<p>观察者模式</p>\n</blockquote>\n<p>1.1定义：观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使它们能够自动更新自己。</p>\n<p>1.2结构图</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232443/o_25.png\" alt=\" \"><br>图 25</p>\n<ul>\n<li><p>抽象主题(Subject)角色：抽象主题角色把所有对观察者对象的引用保存在一个聚集（比如ArrayList对象）里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象，抽象主题角色又叫做抽象被观察者(Observable)角色。</p>\n</li>\n<li><p>具体主题(ConcreteSubject)角色：将有关状态存入具体观察者对象；在具体主题的内部状态改变时，给所有登记过的观察者发出通知。具体主题角色又叫做具体被观察者(Concrete Observable)角色。</p>\n</li>\n<li>抽象观察者(Observer)角色：为所有的具体观察者定义一个接口，在得到主题的通知时更新自己，这个接口叫做更新接口。</li>\n<li>具体观察者(ConcreteObserver)角色：存储与主题的状态自恰的状态。具体观察者角色实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态 像协调。如果需要，具体观察者角色可以保持一个指向具体主题对象的引用。</li>\n</ul>\n<p>①　在观察者模式中，又分为推模型和拉模型两种方式。推模型是指主题对象向观察者推送主题的详细信息，不管观察者是否需要，推送的信息通常是主题对象的全部或部分数据。<br>拉模型是指主题对象在通知观察者的时候，只传递少量信息。如果观察者需要更具体的信息，由观察者主动到主题对象中获取，相当于是观察者从主题对象中拉数据。一般这种模型的实现中，会把主题对象自身通过update()方法传递给观察者，这样在观察者需要获取数据的时候，就可以通过这个引用来获取了。</p>\n<p>②　推模型是假定主题对象知道观察者需要的数据；而拉模型是主题对象不知道观察者具体需要什么数据，没有办法的情况下，干脆把自身传递给观察者，让观察者自己去按需要取值。</p>\n<p>③　推模型可能会使得观察者对象难以复用，因为观察者的update()方法是按需要定义的参数，可能无法兼顾没有考虑到的使用情况。这就意味着出现新情况的时候，就可能提供新的update()方法，或者是干脆重新实现观察者；而拉模型就不会造成这样的情况，因为拉模型下，update()方法的参数是主题对象本身，这基本上是主题对象能传递的最大数据集合了，基本上可以适应各种情况的需要。</p>\n<p>④　应用事件委托来彻底解除通知者和观察者之间的耦合。委托是一种引用方法的类型。一旦为委托分配了方法，委托将与该方法有相同的行为。委托方法可以像其它任何方法一样，具有参数和返回值。委托可以看作是对函数（方法）的的抽象，是函数的“类”，委托的实例代表一个（或多个）具体的函数，它可以是多播的。事件基于委托，为委托提供了一种发布/订阅机制。事件的订阅与取消与我们刚才讲的观察者模式中的订阅与取消类似，只是表现形式有所不同。</p>\n<p>⑤　在观察者模式中，订阅使用方法Attach（）来进行；在事件的订阅中使用“+=”。类似地，取消订阅在观察者模式中用Dettach（），而事件的取消用“-=”。</p>\n<p>⑥　在运行时，客户端会首先创建了具体主题类的实例，以及一个观察者对象。然后，它调用主题对象的registerObserver()方法，将这个观察者对象向主题对象登记，也就是将它加入到主题对象的聚集中去。这时，客户端调用主题的update()方法，改变了主题对象的内部状态。主题对象在状态发生变化时，调用超类的notifyObservers()方法，通知所有登记过的观察者对象。</p>\n<p>1.3适用场景</p>\n<ul>\n<li>当一个对象的数据更新时需要通知其他对象，但这个对象又不希望和被通知的那些对象形成紧耦合。</li>\n<li>当一个对象的数据更新时，这个对象需要让其他对象也各自更新自己的数据，但这个对象不知道具体有多少对象需要更新数据。</li>\n</ul>\n<p>1.4优缺点</p>\n<ul>\n<li>观察者模式解除了主题和具体观察者的耦合，让耦合的双方都依赖于抽象，而不会依赖于具体，从而使得各自的变化都不会影响另一边的变化。</li>\n<li>（缺点）依赖关系并未完全解除，抽象通知者依旧依赖抽象的观察者。</li>\n<li>（缺点）在应用观察者模式时需要考虑一下开发效率和运行效率的问题，程序中包括一个被观察者、多个观察者，开发、调试等内容会比较复杂，而且在Java中消息的通知一般是顺序执行，那么一个观察者卡顿，会影响整体的执行效率，在这种情况下，一般会采用异步实现。</li>\n</ul>\n<p>1.5实例：</p>\n<ul>\n<li>观察者模式多用于实现订阅功能的场景，例如微博的订阅，当我们订阅了某个人的微博账号，当这个人发布了新的消息，就会通知我们。</li>\n<li>观察者模式这种发布-订阅的形式我们可以拿微信公众号来举例，假设微信用户就是观察者，微信公众号是被观察者，有多个的微信用户关注了程序猿这个公众号，当这个公众号更新时就会通知这些订阅的微信用户。</li>\n</ul>\n<p>1.5.1.2014A<br>某实验室欲建立一个实验室环境监测系统，能够显示实验室的温度、温度以及洁净度等环境数据，当获得到最新的环境测量数据时，显示的环境数据能够及时更新，现在采用观察者（Observer）模式来开发该系统，观察者模式的类图如图21所示。<br><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232443/o_21.png\" alt=\" \"><br>图21</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt; </span><br><span class=\"line\">#include(vector)</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span></span>&#123;</span><br><span class=\"line\">\tpublic:</span><br><span class=\"line\">\t  virtual <span class=\"keyword\">void</span> update(float temp,float humidity,float cleanness)=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subject</span></span>&#123;</span><br><span class=\"line\">\tpublic:</span><br><span class=\"line\">\t\tvirtual <span class=\"keyword\">void</span> registerObserver(Observer *o)=<span class=\"number\">0</span>;<span class=\"comment\">//注册对主题感兴趣的观察者 </span></span><br><span class=\"line\">\t\tvirtual <span class=\"keyword\">void</span> removeObserver(Observer *o)=<span class=\"number\">0</span>;<span class=\"comment\">//删除观察者</span></span><br><span class=\"line\">\t\tvirtual <span class=\"keyword\">void</span> notifyObserver(Observer *o)=<span class=\"number\">0</span><span class=\"comment\">//当主题变化时通知观察者 </span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">class EnvironmentData:public Subject&#123;</span><br><span class=\"line\">\tprivate:</span><br><span class=\"line\">\t\tvector&lt;Observer*&gt;observers;</span><br><span class=\"line\">\t\tfloat temperature,humidity,cleanness;</span><br><span class=\"line\">\tpublic:</span><br><span class=\"line\">\t\t<span class=\"keyword\">void</span> registerObserver(Observer *o)&#123;</span><br><span class=\"line\">\t\tobservers.push_back(<span class=\"number\">0</span>);\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">void</span> removeObserver(Observer *o)&#123;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">void</span> notifyObserver&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(vector&lt;Observer*&gt;::const_iterator it=observers.begin(); it!=observers.end();it++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t(*it)‐&gt;update(temperature,humidity,cleanness)\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">        <span class=\"keyword\">void</span> measurementsChanged()&#123;</span><br><span class=\"line\">        \tnotifyObservers();</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">void</span> setMeasurements(float temp,float humidity,float cleanness)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;temperature=temperature;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;humidity=humidity;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;cleanness=cleanness;</span><br><span class=\"line\">\t\t\tmeasurementsChanged()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">class CurrentConditionDisplay:public Observer&#123;</span><br><span class=\"line\">\tprivate:</span><br><span class=\"line\">\t\tfloat temperature, humidity,cleanness</span><br><span class=\"line\">\tSubject* envData;</span><br><span class=\"line\">\tpublic:</span><br><span class=\"line\">\t\tCurrentConditionDisplay&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;envData=envData;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;envData-&gt;registerObserver(<span class=\"keyword\">this</span>);\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> update(float temp,float humidity,float cleanness)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;temperature=temperature;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;humidity=humidity;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;cleanness=cleanness;</span><br><span class=\"line\">\t\tdisplay();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> display()&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tint main()&#123;</span><br><span class=\"line\">\t\tEnvironmentData *envData=<span class=\"keyword\">new</span> EnvironmentData();</span><br><span class=\"line\">\t    CurrentConditionDisplay currentDisplay=<span class=\"keyword\">new</span> \tCurrentConditionDisplay();</span><br><span class=\"line\">\t    envData-&gt;setMeasurements(<span class=\"number\">80</span>,<span class=\"number\">15</span>,<span class=\"number\">30</span>,<span class=\"number\">4</span>f);</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n","prev":{"title":"设计模式之访问者模式","link":"2018/03/29/设计模式之访问者模式"},"next":{"title":"设计模式之装饰器模式","link":"2018/03/25/设计模式之装饰器模式"},"plink":"http://yoursite.com/2018/03/27/设计模式之观察者模式/"}