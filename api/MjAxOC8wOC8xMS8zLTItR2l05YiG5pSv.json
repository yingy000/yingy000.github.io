{"title":"3-2-Git分支","date":"2018-08-11T11:00:39.000Z","link":"2018/08/11/3-2-Git分支","tags":["Git"],"categories":["前端"],"updated":"2019-01-04T01:30:16.464Z","content":"<h2 id=\"2-分支的新建与合并\">2.分支的新建与合并<a href=\"2018/08/11/3-2-Git分支#2-分支的新建与合并\"></a></h2><p>分支新建与分支合并的场景(工作流)：</p>\n<ul>\n<li><p>1、开发某个网站</p>\n</li>\n<li><p>2、为实现某个新的需求，创建一个分支</p>\n</li>\n<li><p>3、在这个分支上开展工作。</p>\n</li>\n</ul>\n<p>此时，你突然接到一个电话说有个很严重的问题需要紧急修补，你将按照如下方式来处理：</p>\n<ul>\n<li><p>1、切换到你的线上分支</p>\n</li>\n<li><p>2、为这个紧急任务新建一个分支，并在其中修复它。</p>\n</li>\n<li><p>3、在测试通过之后，切换回线上分支，然后合并这个修补分支，最后将改动推送到线上分支。</p>\n</li>\n<li><p>4、切换回你最初工作的分支上，继续工作。</p>\n</li>\n</ul>\n<h3 id=\"2-1-新建分支\">2.1.新建分支<a href=\"2018/08/11/3-2-Git分支#2-1-新建分支\"></a></h3><p>假设存在一个正在开发过程中的项目，并且已经有了一些提交。</p>\n<p><img src=\"https://www.cnblogs.com/images/cnblogs_com/cliy-10/1268239/o_17.png\" alt=\" \"><br>一个简单提交历史</p>\n<p>如果你需要解决编号为#16的需求问题，你需要创建一个新的分支，然后切换到该分支上。</p>\n<p>简写方式：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b iss16</span><br><span class=\"line\">Switched to a new branch &apos;iss16&apos;</span><br></pre></td></tr></table></div></figure>\n<p>非简写方式：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch iss16</span><br><span class=\"line\">$ git checkout iss16</span><br><span class=\"line\">Switched to branch &apos;iss16&apos;</span><br></pre></td></tr></table></div></figure>\n<p><img src=\"https://www.cnblogs.com/images/cnblogs_com/cliy-10/1268239/o_18.png\" alt=\" \"><br>创建一个新分支指针</p>\n<p>现在可以开始在iss16分支上解决编号#16的需求，在此过程中，你做了一些提交，所以iss16分支在不断的向前推进，此时HEAD指针指向了iss16分支上。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add *</span><br><span class=\"line\">$ git commit -a -m &apos;new branch&apos;</span><br></pre></td></tr></table></div></figure>\n<p><img src=\"https://www.cnblogs.com/images/cnblogs_com/cliy-10/1268239/o_19.png\" alt=\" \"><br>iss16分支随着工作的进展向前推进</p>\n<p>当你接到电话时，有个紧急问题等待你来解决，在Git下，不需要把这个紧急问题和iss16的修改混在一起，也不需要还原#16问题的修改，然后再添加关于这个紧急问题的修改，最后将这个修改提交到线上分支。你所需要做的仅仅是切回到master分支。</p>\n<p>在切回到master分支之前，必须保证所有的工作目录和暂存区中的修改的文件是被提交的状态。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">On branch iss16</span><br><span class=\"line\">nothing to commit, working directory clean</span><br><span class=\"line\">$ git checkout master</span><br><span class=\"line\">Switched to branch &apos;master&apos;</span><br></pre></td></tr></table></div></figure>\n<p>此时，你的工作目录和在开始处理#16需求之前一模一样，现在可以开始修复紧急问题了。</p>\n<p>你可以建立一个针对该紧急问题的分支(hotfix branch)，在该分支上解决该紧急问题。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b hotfix</span><br><span class=\"line\">Switched to a new branch &apos;hotfix&apos;</span><br><span class=\"line\">$ vim README.md</span><br><span class=\"line\">$ git add *</span><br><span class=\"line\">$ git commit -a -m &apos;fixed hotfix branch&apos;</span><br><span class=\"line\">[hotfix 1fb7853] fixed the broken email address</span><br><span class=\"line\"> 1 file changed, 2 insertions(+)</span><br></pre></td></tr></table></div></figure>\n<p><img src=\"https://www.cnblogs.com/images/cnblogs_com/cliy-10/1268239/o_20.png\" alt=\" \"><br>基于master分支的紧急问题分支hotfix branch</p>\n<p>注意：当切换分支的时候，Git会重置你的工作目录，使其看起来像回到了你在那个分支上最后一次提交的样子。Git会自动添加、删除、修改文件以确保此时你的工作目录和这个分支最后一次提交时的样子一模一样。</p>\n<p>当修改完成这个紧急问题后，使用<code>git merge</code>命令，将hotfix分支合并回master分支。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout master</span><br><span class=\"line\">Switched to branch &apos;master&apos;</span><br><span class=\"line\">$ git merge hotfix</span><br><span class=\"line\">Updating f42c576..3a0874c</span><br><span class=\"line\">Fast-forward</span><br><span class=\"line\"> README.md | 2 ++</span><br><span class=\"line\"> 1 file changed, 2 insertions(+)</span><br></pre></td></tr></table></div></figure>\n<p><img src=\"https://www.cnblogs.com/images/cnblogs_com/cliy-10/1268239/o_21.png\" alt=\" \"><br>master被快进到hotfix</p>\n<p><code>Fast-forward</code>的解释：</p>\n<p>Fast-forward表示<code>&quot;快进&quot;</code>，由于当前master分支所指向的提交是你当前提交的的直接上游，所以Git只是简单的将指针向前移动。也就是说，当你试图合并两个分支时，如果顺着一个分支走下去能够到达另一个分支，那么Git在合并两者的时候，只会简单的将指针向前推进（指针右移），因为这种情况下的合并操作没有发生冲突。</p>\n<p>当解决完该紧急问题之后，你准备继续处理#16的需求，但是你应该先删除hotfix分支，因为已经不再需要它了，master分支已经指向了同一个位置。</p>\n<p>简写方式：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -d hotfix</span><br><span class=\"line\">Deleted branch hotfix</span><br></pre></td></tr></table></div></figure>\n<p>非简写方式：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout hotfix</span><br><span class=\"line\">$ git delete hotfix</span><br><span class=\"line\">Deleted branch hotfix</span><br></pre></td></tr></table></div></figure>\n<p>这时，可以继续处理#16的需求了。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout iss16</span><br><span class=\"line\">Switched to branch &quot;iss16&quot;</span><br><span class=\"line\">$ vim README.md</span><br><span class=\"line\">$ git add *</span><br><span class=\"line\">$ git commit -a -m &apos;fixed iss16 branch&apos;</span><br><span class=\"line\">[iss16 ad82d7a] fixed the broken email address</span><br><span class=\"line\"> 1 file changed, 2 insertions(+)</span><br></pre></td></tr></table></div></figure>\n<p><img src=\"https://www.cnblogs.com/images/cnblogs_com/cliy-10/1268239/o_22..png\" alt=\" \"><br>继续在iss16分支上工作</p>\n<p>在hotfix分支上所做的工作并没有包含到iss16分支中。</p>\n<h3 id=\"2-2-分支的合并\">2.2.分支的合并<a href=\"2018/08/11/3-2-Git分支#2-2-分支的合并\"></a></h3><p>现在已经完成了<code>#16</code>的需求，需要将iss16分支合并到master分支。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout master</span><br><span class=\"line\">Switched to branch &apos;master&apos;</span><br><span class=\"line\">$ git merge iss16</span><br><span class=\"line\">Merge made by the &apos;recursive&apos; strategy.</span><br><span class=\"line\">README.md | 1 +</span><br><span class=\"line\">1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></div></figure>\n<p>此时分支的合并并不是<code>Fast-forward</code>的形式，master分支所在提交不是iss16所在提交的直接祖先，<br>在这种情况下，你的开发历史从一个更早的地方开始分叉开来。Git需要做一些额外的工作。</p>\n<p>Git会使用两个分支的末端所指的快照(C4和C5)以及这两个分支的工作祖先(C2)，做一个简单的三方合并。</p>\n<p><img src=\"https://www.cnblogs.com/images/cnblogs_com/cliy-10/1268239/o_35.png\" alt=\" \"><br>一次典型合并中所用到的三个快照</p>\n<p>Git将三方合并的结果做了一个新的快照并且自动创建一个新的提交指向它，这个被称作一次合并提交</p>\n<p><img src=\"https://www.cnblogs.com/images/cnblogs_com/cliy-10/1268239/o_24.png\" alt=\" \"><br>一个合并提交</p>\n<p>Git会自行决定选取哪一个提交作为最优的共同祖先，并以此作为合并的基础。</p>\n<p>当完成合并之后，需要删除iss16分支。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -d iss16</span><br><span class=\"line\">Deleted branch iss16</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"2-3-遇到冲突时的分支合并\">2.3.遇到冲突时的分支合并<a href=\"2018/08/11/3-2-Git分支#2-3-遇到冲突时的分支合并\"></a></h3><p>如果在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，Git在合并时就会产生冲突：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout master</span><br><span class=\"line\">Switched to branch &apos;master&apos;</span><br><span class=\"line\">$ git merge iss16</span><br><span class=\"line\">Auto-merging README.md</span><br><span class=\"line\">CONFLICT (content): Merge conflict in README.md</span><br><span class=\"line\">Automatic merge failed;fix conflicts and then commit the result.</span><br></pre></td></tr></table></div></figure>\n<p>Git做了合并，但是没有自动地创建一个新的合并提交。Git会暂停下来，等待你去解决合并产生的冲突。</p>\n<p>解决冲突的步骤：</p>\n<ul>\n<li>第一步：使用<code>git status</code>命令查看包含合并冲突而处于未合并状态的文件。</li>\n</ul>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">You have unmerged paths.</span><br><span class=\"line\">  (fix conflicts and run &quot;git commit&quot;)</span><br><span class=\"line\">Unmerged paths:</span><br><span class=\"line\">  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)</span><br><span class=\"line\">  both modified: README.md</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></div></figure>\n<p>任何因包含合并冲突而有待解决的文件，都会以未合并状态标识出来。</p>\n<ul>\n<li>第二步：Git会在有冲突的文件中加入标准的冲突解决标记，你可以打开这些包含冲突的文件手动解决冲突。出现冲突的文件会包含一些特殊区段。</li>\n</ul>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:README.md</span><br><span class=\"line\">&lt;div id=&quot;footer&quot;&gt;contact : email.support@github.com&lt;/div&gt;</span><br><span class=\"line\">=======</span><br><span class=\"line\">&lt;div id=&quot;footer&quot;&gt;</span><br><span class=\"line\"> please contact us at support@github.com</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; iss16:README.md</span><br></pre></td></tr></table></div></figure>\n<p>这表示HEAD所指示的版本(master分支所在的位置)在<code>=======</code>的上半部分，而<code>iss16</code>分支所指示的版本在<code>=======</code>的下半部分。</p>\n<ul>\n<li>第三步：为了解决冲突，你必须选择使用由<code>=======</code>分割的两部分中的一个，或者也可以自行合并这些内容。</li>\n</ul>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//选择上半部分或者下半部分</span><br><span class=\"line\">&lt;div id=&quot;footer&quot;&gt;</span><br><span class=\"line\"> please contact us at support@github.com</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></div></figure>\n<p>该解决方案仅保留了其中一个分支的修改，并且<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>,<code>=======</code>,和<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>这些行被完全删除。</p>\n<p>当解决了所有文件里的冲突之后，对所有文件使用git add命令将其标记为冲突已解决。</p>\n<p>自行合并冲突：<code>$ git mergetool</code>命令</p>\n<p>该命令会为你启动一个合适的可视化合并工具，并带领你一步一步解决这些冲突.</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git mergetool</span><br><span class=\"line\"></span><br><span class=\"line\">This message is displayed because &apos;merge.tool&apos; is not configured.</span><br><span class=\"line\">See &apos;git meergetool --tool-help&apos; or &apos;git help config&apos; for more details.</span><br><span class=\"line\">&apos;git mergetool&apos; will now attempt to use one of the following tools:</span><br><span class=\"line\">opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse</span><br><span class=\"line\">diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emerge</span><br><span class=\"line\">Merging:</span><br><span class=\"line\">README.md</span><br><span class=\"line\"></span><br><span class=\"line\">Normal merge conflict for &apos;README.md&apos;:</span><br><span class=\"line\">  &#123;local&#125;: modified file</span><br><span class=\"line\">  &#123;remote&#125;: modified file</span><br><span class=\"line\">Hit return to start merge resolution tool (opendiff):</span><br></pre></td></tr></table></div></figure>\n<p>当退出合并工具之后，Git会询问刚才的合并是否成功。如果回答是，Git会暂存那些文件以表明冲突已解决：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">All conflicts fixed but you are still merging.</span><br><span class=\"line\">  (use &quot;git commit&quot; to conclude merge)</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\"></span><br><span class=\"line\">  modified: README.md</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>第四步：当所有的有冲突的文件都已经暂存，就可以提交到Git仓库中。</li>\n</ul>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m &quot;solve merge branch&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">Merge branch &apos;iss16&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">Conflicts:</span><br><span class=\"line\">  README.md</span><br><span class=\"line\">#</span><br><span class=\"line\"># It looks like you may be committing a merge.</span><br><span class=\"line\"># If this is not correct, please remove the file</span><br><span class=\"line\"># .git</span><br><span class=\"line\"># and try again.</span><br><span class=\"line\"># Please enter the commit message for your changes. Lines starting</span><br><span class=\"line\"># with &apos;#&apos; will be ignored, and an empty message aborts the commit.</span><br><span class=\"line\"># On branch master</span><br><span class=\"line\"># All conflicts fixed but you are still merging.</span><br><span class=\"line\">#</span><br><span class=\"line\"># Changes to be committed:</span><br><span class=\"line\">#    modified: README.md</span><br></pre></td></tr></table></div></figure>\n","prev":{"title":"3-3-Git分支","link":"2018/08/13/3-3-Git分支"},"next":{"title":"3-1-Git分支","link":"2018/08/09/3-1-Git分支"},"plink":"http://yoursite.com/2018/08/11/3-2-Git分支/","toc":[{"title":"2.分支的新建与合并","id":"2-分支的新建与合并","index":"1","children":[{"title":"2.1.新建分支","id":"2-1-新建分支","index":"1.1"},{"title":"2.2.分支的合并","id":"2-2-分支的合并","index":"1.2"},{"title":"2.3.遇到冲突时的分支合并","id":"2-3-遇到冲突时的分支合并","index":"1.3"}]}]}