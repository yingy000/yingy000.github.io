{"title":"2-2-Git基础","date":"2018-08-03T14:58:09.000Z","link":"2018/08/03/2-2-Git基础","tags":["Git"],"categories":["前端"],"updated":"2018-10-12T14:48:48.517Z","content":"<h3 id=\"2-5-忽略文件\">2.5.忽略文件<a href=\"2018/08/03/2-2-Git基础#2-5-忽略文件\"></a></h3><p>一般我们总会有些文件无需放入Git管理，也不希望它们总出现在未跟踪文件列表，这时我们可以创建一个<br><code>.gitignore</code>的文件，列出要忽略的文件模式。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch .gitignore</span><br><span class=\"line\">*.[oa]</span><br><span class=\"line\">*~</span><br></pre></td></tr></table></div></figure>\n<p>第一行告诉Git忽略所有以<code>.o</code>或<code>.a</code>结尾的文件</p>\n<p>第二行告诉Git忽略所有以波浪符<code>（~）</code>结尾的文件</p>\n<p>文件<code>.gitignore</code>的格式规范如下：</p>\n<ul>\n<li><p>所有空行或者以<code>＃</code>开头的行都会被Git忽略。</p>\n</li>\n<li><p>可以使用标准的glob模式匹配(正则表达式)。</p>\n</li>\n<li><p>匹配模式可以以<code>（/）</code>开头防止递归。</p>\n</li>\n<li><p>匹配模式可以以<code>（/）</code>结尾指定目录。</p>\n</li>\n<li><p>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号<code>（!）</code>。</p>\n</li>\n</ul>\n<p>参考链接：<a href=\"https://github.com/github/gitignore\" target=\"_blank\" rel=\"noopener\">https://github.com/github/gitignore</a></p>\n<h3 id=\"2-6-查看已暂存和未暂存的修改\">2.6.查看已暂存和未暂存的修改<a href=\"2018/08/03/2-2-Git基础#2-6-查看已暂存和未暂存的修改\"></a></h3><p>假如我们再次修改README.md文件后暂存，然后编辑five.html文件后先不暂存，我们可以看下当前的状态：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">        modified:   README.md</span><br><span class=\"line\"></span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class=\"line\">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">        modified:   five.html</span><br></pre></td></tr></table></div></figure>\n<p>如果你想知道具体修改了什么地方，<code>git status</code>命令的输出的结果太过模糊，我们可以使用<code>git diff</code>命令。通过该命令我们可以知道：</p>\n<ul>\n<li><p>当前做的哪些更新还没有暂存？</p>\n</li>\n<li><p>有哪些更新已经暂存起来准备好了下次提交？</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff</span><br><span class=\"line\">diff --git a/five.html b/five.html</span><br><span class=\"line\">index 59a5ccd..a4e2f77 100644</span><br><span class=\"line\">--- a/five.html</span><br><span class=\"line\">+++ b/five.html</span><br><span class=\"line\">@@ -55,7 +55,6 @@</span><br><span class=\"line\">&lt;h3&gt;效益&lt;/h3&gt;</span><br><span class=\"line\">&lt;p&gt;为什么要参加？为了识别、灵感和资源，我们都可以向人们展示&lt;/p&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=&quot;requirements&quot; id=&quot;zen-requirements&quot; role=&quot;article&quot;&gt;</span><br><span class=\"line\">&lt;h3&gt;要求&lt;/h3&gt;</span><br><span class=\"line\">&lt;p&gt;在可能的情况下,实用的而不是2%的浏览公众最新的流血技巧。我们唯一的真正要求是您的验证&lt;/p&gt;</span><br></pre></td></tr></table></div></figure>\n<p><code>git diff</code>命令比较的是工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容。</p>\n<p>我们可以使用<code>git diff --cached</code>查看已暂存的将要添加到下次提交里的内容。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff --cached</span><br><span class=\"line\">diff --git a/five.html b/five.html</span><br><span class=\"line\">index e231252..59a5ccd 100644</span><br><span class=\"line\">--- a/five.html</span><br><span class=\"line\">+++ b/five.html</span><br><span class=\"line\">@@ -4,17 +4,14 @@</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">&lt;title&gt;CSS禅意花园:CSS设计之美&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body id=&quot;css-zen-garden&quot;&gt;</span><br><span class=\"line\">&lt;div class=&quot;page-wrapper&quot;&gt;</span><br><span class=\"line\">&lt;section class=&quot;intro&quot; id=&quot;zen-intro&quot;&gt;</span><br><span class=\"line\"> &lt;header role=&quot;banner&quot;&gt;</span><br><span class=\"line\"> &lt;h1&gt;CSS Zen Garden&lt;/h1&gt;</span><br><span class=\"line\">@@ -35,7 +32,6 @@</span><br><span class=\"line\">&lt;p&gt;CSS禅园邀请你放松和沉思大师们的重要课程&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/section&gt;</span><br><span class=\"line\">@@ -43,12 +39,10 @@</span><br><span class=\"line\">&lt;div class=&quot;participation&quot; id=&quot;zen-participation&quot; role=&quot;article&quot;&gt;</span><br><span class=\"line\">&lt;h3&gt;参与&lt;/h3&gt;</span><br><span class=\"line\">&lt;p&gt;您可以按照您希望的任何方式修改样式表&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;下载示例和</span><br><span class=\"line\">@@ -129,7 +123,6 @@</span><br><span class=\"line\"> &lt;/ul&gt;</span><br><span class=\"line\">  &lt;/nav&gt;</span><br><span class=\"line\"> &lt;/div&gt;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"2-7-提交更新\">2.7.提交更新<a href=\"2018/08/03/2-2-Git基础#2-7-提交更新\"></a></h3><p>在提交之前，一定要确认还有没有什么修改过的或新建的文件还没有<code>git add</code>过，否则提交的时候不会记录这些还没暂存起来的变化。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit</span><br></pre></td></tr></table></div></figure>\n<p><code>git commit</code>命令会启动文本编辑器以便输入本次提交的说明。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Please enter the commit message for your changes. Lines starting</span><br><span class=\"line\"># with &apos;#&apos; will be ignored, and an empty message aborts the commit.</span><br><span class=\"line\"># On branch master</span><br><span class=\"line\"># Changes to be committed:</span><br><span class=\"line\"># new file: README.md</span><br><span class=\"line\"># modified: five.html</span><br><span class=\"line\">#</span><br><span class=\"line\">~</span><br><span class=\"line\">~</span><br><span class=\"line\">~</span><br></pre></td></tr></table></div></figure>\n<p>我们可以看出，默认的提交消息包含最后一次运行<code>git status</code>的输出，全都放在注释行中。</p>\n<p>我们大多数的用法是在commit命令后面添加-m选项，将提交信息与命令放在同一行。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m &apos;first-commit&apos;</span><br><span class=\"line\">[master 4f38a76] first-commit</span><br><span class=\"line\"> 3 files changed, 3 insertions(+), 10 deletions(-)</span><br><span class=\"line\"> create mode 100644 README.md</span><br><span class=\"line\"> create mode 100644 five.html</span><br></pre></td></tr></table></div></figure>\n<p>至此，我们已经完成了第一个提交，提交之后会显示当前在哪个分支提交的，本次提交的完整SHA-1校验和是4f38a76，以及在本次提交中，有多少文件修订过，多少行添加和修改过。</p>\n<h3 id=\"2-8-跳过使用暂存区域\">2.8.跳过使用暂存区域<a href=\"2018/08/03/2-2-Git基础#2-8-跳过使用暂存区域\"></a></h3><p>我们可以将<code>git add</code>和<code>git commit</code>命令的功能合并成为一个命令，那就是<code>git commit -a</code>。</p>\n<p> 该命令就是跳过使用暂存区域，也就是说Git会自动把所有已跟踪过的文件暂存起来一并提交。这个基本不太使用，大家了解一下就好。</p>\n<h3 id=\"2-9-移除文件\">2.9.移除文件<a href=\"2018/08/03/2-2-Git基础#2-9-移除文件\"></a></h3><p><code>git rm</code>命令:从已跟踪文件清单中移除某个文件，更明确地说是从暂存区域移除，也就是说从暂存区域并连带从工作目录中删除指定文件，这样以后就不会出现在未跟踪文件清单中了。</p>\n<p>如果只是从工作目录删除文件，运行<code>git status</code>时所删除的文件就会在<code>&quot;Changes not staged for commit&quot;</code>部分(未暂存清单)中看到：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm README.md</span><br><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)</span><br><span class=\"line\">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">        deleted:    README.md</span><br></pre></td></tr></table></div></figure>\n<p>我们可以使用<code>git rm</code>命令删除文件看下与普通的删除文件的区别：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm README.md</span><br><span class=\"line\">rm README.md</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\">        deleted:   README.md</span><br></pre></td></tr></table></div></figure>\n<p>从暂存区域并连带从工作目录中删除了README.md文件，也就意味着该文件就不在纳入版本管理了。</p>\n<p>如果我们想把文件从Git仓库中删除(从暂存区域移除)，但仍然希望保留在当前工作目录中。也就是说，想让文件保留在磁盘，但是并不想让Git继续跟踪(.gitignore文件的作用)。可以在上添加<code>git rm</code>命令上添加<code>--cached</code>选项：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm --cached README.md</span><br></pre></td></tr></table></div></figure>","prev":{"title":"2-3-Git基础","link":"2018/08/04/2-3-Git基础"},"next":{"title":"2-1-Git基础","link":"2018/08/02/2-1-Git基础"},"plink":"http://yoursite.com/2018/08/03/2-2-Git基础/"}