{"title":"4-继承实例","date":"2018-05-05T07:05:30.000Z","link":"2018/05/05/4-继承实例","tags":["JavaScript"],"categories":["前端"],"updated":"2018-10-12T14:47:49.535Z","content":"<h2 id=\"继承机制实例\">继承机制实例<a href=\"2018/05/05/4-继承实例#继承机制实例\"></a></h2><p>关于继承，我们就拿多边形来说明问题吧，三角形、矩形、都是多边形的子类，多边形是它们的超类。</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1255650/o_16.png\" alt=\" \" class=\"article-img\"></p>\n<h3 id=\"1-确定基类\">1.确定基类<a href=\"2018/05/05/4-继承实例#1-确定基类\"></a></h3><p>考虑Polygon(多边形)类，应该有哪些属性和方法？</p>\n<p>首先一定要知道多边形的边数，然后需要计算多变形的面积，该类的UML图如下。</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1255650/o_17.png\" alt=\" \" class=\"article-img\"></p>\n<p>Polygon类：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Polygon(iside)&#123;</span><br><span class=\"line\">\tthis.sidesw=iside;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Polygon.prototype.getArea=function()&#123;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"2-创建子类\">2.创建子类<a href=\"2018/05/05/4-继承实例#2-创建子类\"></a></h3><h5 id=\"2-1-Triangle-三角形-类\">2.1.Triangle(三角形)类<a href=\"2018/05/05/4-继承实例#2-1-Triangle-三角形-类\"></a></h5><p>三角形有三条边，因此这个类必须覆盖Polygon类的sides属性，把它设置为3，还需要覆盖getArea()方法，使用三角形的面积公式<code>1/2*底*高</code>，如何得到底和高的值？需要专门输入这两个值，所以必须创建base属性和height属性，该类的UML图如下。</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1255650/t_18.png\" alt=\" \" class=\"article-img\"></p>\n<p>该图只展示了Triangle(三角形)类的新属性及覆盖过的方法，Triangle类没有覆盖的属性和方法，它将被看做从Polygon类保留下来的属性和方法。</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1255650/o_19.png\" alt=\" \" class=\"article-img\"></p>\n<p>在UML中，绝对不会重复显示继承的属性和方法，除非该方法被覆盖或被重载。</p>\n<p>Triangle类：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Triangle(iside,ibase,iheight)&#123;</span><br><span class=\"line\">   Polygon.call(this,iside);</span><br><span class=\"line\">   this.base=ibase;</span><br><span class=\"line\">   this.height=iheight;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Triangle.prototype=new Polygon();</span><br><span class=\"line\">Triangle.prototype.getArea=function()&#123;</span><br><span class=\"line\">\treturn 0.5*this.base*this.height;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>在用原型链继承方法之后，Triangle类将覆盖getArea()方法，提供为三角形面积定制的计算。</p>\n<h5 id=\"2-2-Rectangle-矩形-类\">2.2.Rectangle(矩形)类<a href=\"2018/05/05/4-继承实例#2-2-Rectangle-矩形-类\"></a></h5><p>矩阵有四条边，面积是用<code>长度*宽度</code>计算，长度和宽度成为该类必须的属性，该类的UML图如下。</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1255650/o_20.png\" alt=\" \" class=\"article-img\"></p>\n<p>我们是应该把子类和超类组合起来的。</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1255650/o_21.png\" alt=\" \"><br>Rectangle类：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Rectangle(iside,iwidth,iheight)&#123;</span><br><span class=\"line\">\tPolygon.call(this,iside);</span><br><span class=\"line\">\tthis.width=iwidth;</span><br><span class=\"line\">\tthis.height=iheight;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Rectangle.prototype=new Polygon();</span><br><span class=\"line\"></span><br><span class=\"line\">Rectangle.prototype.getArea=function()&#123;</span><br><span class=\"line\">\treturn this.width*this.height;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"3-测试代码\">3.测试代码<a href=\"2018/05/05/4-继承实例#3-测试代码\"></a></h3><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var triangle=new Triangle(3,4,5);</span><br><span class=\"line\">var rectangle=new Rectangle(4,4,5);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(triangle.sides); //3</span><br><span class=\"line\">console.log(triangle.base);  //4</span><br><span class=\"line\">console.log(triangle.height); //5</span><br><span class=\"line\">console.log(triangle.getArea()); //10</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(rectangle.sides); //4</span><br><span class=\"line\">console.log(rectangle.width); //4</span><br><span class=\"line\">console.log(rectangle.height); //5</span><br><span class=\"line\">console.log(rectangle.getArea());//20</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"4-一波完整的代码\">4.一波完整的代码<a href=\"2018/05/05/4-继承实例#4-一波完整的代码\"></a></h3><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Polygon(iside)&#123;</span><br><span class=\"line\">\tthis.sides=iside;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Polygon.prototype.getArea=function()&#123;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Triangle(iside,ibase,iheight)&#123;</span><br><span class=\"line\">   Polygon.call(this,iside);</span><br><span class=\"line\">   this.base=ibase;</span><br><span class=\"line\">   this.height=iheight;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Triangle.prototype=new Polygon();</span><br><span class=\"line\">Triangle.prototype.getArea=function()&#123;</span><br><span class=\"line\">\treturn 0.5*this.base*this.height;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Rectangle(iside,iwidth,iheight)&#123;</span><br><span class=\"line\">\tPolygon.call(this,iside);</span><br><span class=\"line\">\tthis.width=iwidth;</span><br><span class=\"line\">\tthis.height=iheight;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Rectangle.prototype=new Polygon();</span><br><span class=\"line\"></span><br><span class=\"line\">Rectangle.prototype.getArea=function()&#123;</span><br><span class=\"line\">\treturn this.width*this.height;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var triangle=new Triangle(3,4,5);</span><br><span class=\"line\">var rectangle=new Rectangle(4,4,5);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(triangle.sides); //3</span><br><span class=\"line\">console.log(triangle.base);  //4</span><br><span class=\"line\">console.log(triangle.height); //5</span><br><span class=\"line\">console.log(triangle.getArea()); //10</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(rectangle.sides); //4</span><br><span class=\"line\">console.log(rectangle.width); //4</span><br><span class=\"line\">console.log(rectangle.height); //5</span><br><span class=\"line\">console.log(rectangle.getArea());//20</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"5-引发的思考\">5.引发的思考<a href=\"2018/05/05/4-继承实例#5-引发的思考\"></a></h3><p>可不可以采用动态原型方法实现继承？</p>\n<p>答案：不能，因为prototype对象的唯一性。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Polygon(iside)&#123;</span><br><span class=\"line\">\tthis.sides=iside;</span><br><span class=\"line\"> if(typeof Polygon._initialized==&quot;undefined&quot;)&#123;</span><br><span class=\"line\">   Polygon.prototype.gerArea=function()&#123; //属性指向函数</span><br><span class=\"line\">      return 0;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">   Polygon._initialized=true;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//三角形类</span><br><span class=\"line\">function Triangle(iside,ibase,iheight)&#123;</span><br><span class=\"line\">   Polygon.call(this,iside);</span><br><span class=\"line\">   this.base=ibase;</span><br><span class=\"line\">   this.height=iheight;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> if(typeof Triangle._initialized==&quot;undefined&quot;)&#123;</span><br><span class=\"line\"> \tTriangle.prototype=new Polygon();</span><br><span class=\"line\">    Triangle.prototype.getArea=function()&#123;</span><br><span class=\"line\">\t    return 0.5*this.base*this.height;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     Triangle._initialized=true;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>上述代码用动态原型的方式定义了Polygon类和Triangle类，错误在于<code>&quot;Triangle.prototype=new Polygon();&quot;</code>从逻辑上讲，这个位置是正确的，但从功能上讲，却是无效的。从技术上来说，在代码运行前，对象已经被实例化，并与原始的prototype对象联系在一起了。虽然用极晚绑定可使对原型对象的修改正确地反映出来，但替换prototype对象却不会对该对象产生任何影响，只有未来的对象实例才会反映出这种改变，这就使第一个实例变得不正确。</p>\n<p>要正确的使用动态原型实现继承机制，必须在构造函数外赋予新的prototype对象。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Triangle(iside,ibase,iheight)&#123;</span><br><span class=\"line\">   Polygon.call(this,iside);</span><br><span class=\"line\">   this.base=ibase;</span><br><span class=\"line\">   this.height=iheight;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> if(typeof Triangle._initialized==&quot;undefined&quot;)&#123;</span><br><span class=\"line\">    Triangle.prototype.getArea=function()&#123;</span><br><span class=\"line\">\t    return 0.5*this.base*this.height;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     Triangle._initialized=true;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Triangle.prototype=new Polygon();</span><br></pre></td></tr></table></div></figure>\n<p>这段代码是有效，因为是在任何对象实例化前给prototype对象赋值的，但是，这意味着不能把这段代码完整的封装在构造函数中了。</p>\n<h3 id=\"6-补充知识：极晚绑定\">6.补充知识：极晚绑定<a href=\"2018/05/05/4-继承实例#6-补充知识：极晚绑定\"></a></h3><p>从技术上说根本不存在极晚绑定，只是描述在ECMAScript中存在的一种现象：能够在对象实例化后再定义它的方法。</p>\n<p>举例：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj=new Object();</span><br><span class=\"line\"></span><br><span class=\"line\">Object.prototype.hello=function()&#123;</span><br><span class=\"line\">\tconsole.log(&quot;hello&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.hello();</span><br></pre></td></tr></table></div></figure>\n<p>在大多数程序设计语言中，必须在实例化对象之前定义对象的方法，在上述代码中，方法hello()是在创建object类的一各实例后才添加进来的，这就叫做极晚绑定。</p>\n","prev":{"title":"4-基于库的继承","link":"2018/05/06/4-基于库的继承"},"next":{"title":"4-继承的实现","link":"2018/05/04/4-继承的实现"},"plink":"http://yoursite.com/2018/05/05/4-继承实例/","toc":[{"title":"继承机制实例","id":"继承机制实例","index":"1","children":[{"title":"1.确定基类","id":"1-确定基类","index":"1.1"},{"title":"2.创建子类","id":"2-创建子类","index":"1.2"},{"title":"3.测试代码","id":"3-测试代码","index":"1.3"},{"title":"4.一波完整的代码","id":"4-一波完整的代码","index":"1.4"},{"title":"5.引发的思考","id":"5-引发的思考","index":"1.5"},{"title":"6.补充知识：极晚绑定","id":"6-补充知识：极晚绑定","index":"1.6"}]}]}