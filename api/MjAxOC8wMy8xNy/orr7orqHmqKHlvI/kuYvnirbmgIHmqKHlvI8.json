{"title":"设计模式之状态模式","date":"2018-03-17T11:12:11.000Z","link":"2018/03/17/设计模式之状态模式","tags":["设计模式"],"categories":["前端"],"updated":"2019-08-25T12:50:43.354Z","content":"<blockquote>\n<p>状态模式</p>\n</blockquote>\n<p>1.1定义：状态模式允许一个对象在其内部状态改变的时候改变其行为。这个对象看上去就像是改变了它的类一样</p>\n<p>1.2结构图<br><img src=\"https://www.cnblogs.com/images/cnblogs_com/cliy-10/1232443/o_37.png\" alt=\" \"><br>图 37</p>\n<ul>\n<li>环境(Context)角色，也成上下文：定义客户端所感兴趣的接口，并且保留一个具体状态类的实例。这个具体状态类的实例给出此环境对象的现有状态。</li>\n<li>抽象状态(State)角色：定义一个接口，用以封装环境（Context）对象的一个特定的状态所对应的行为。</li>\n<li>具体状态(ConcreteState)角色：每一个具体状态类都实现了环境（Context）的一个状态所对应的行为。</li>\n</ul>\n<p>①　状态模式把所研究的对象的行为包装在不同的状态对象里，每一个状态对象都属于一个抽象状态类的一个子类。状态模式的意图是让一个对象在其内部状态改变的时候，其行为也随之改变。</p>\n<p>②　状态模式主要解决的是控制一个对象转换的条件表达式过于复杂的情况，把状态的判断逻辑转移到表示不同状态的一系列类当中，可以把复杂的判断逻辑简化。</p>\n<p>③　状态和行为，所谓对象的状态，通常指的就是对象实例的属性的值；而行为指的就是对象的功能，再具体点说，行为大多可以对应到方法上。</p>\n<p>④　状态模式的功能就是分离状态的行为，通过维护状态的变化，来调用不同状态对应的不同功能。也就是说，状态和行为是相关联的，它们的关系可以描述为：状态决定行为。由于状态是在运行期被改变的，因此行为也会在运行期根据状态的改变而改变。</p>\n<p>⑤　行为的平行性，注意平行线而不是平等性。所谓平行性指的是各个状态的行为所处的层次是一样的，相互独立的、没有关联的，是根据不同的状态来决定到底走平行线的哪一条。行为是不同的，当然对应的实现也是不同的，相互之间是不可替换的。<br><img src=\"https://www.cnblogs.com/images/cnblogs_com/cliy-10/1232443/o_38.png\" alt=\" \"><br>图 38</p>\n<p>⑥　在状态模式中，环境(Context)是持有状态的对象，但是环境(Context)自身并不处理跟状态相关的行为，而是把处理状态的功能委托给了状态对应的状态处理类来处理。</p>\n<p>⑦　在具体的状态处理类中经常需要获取环境(Context)自身的数据，甚至在必要的时候会回调环境(Context)的方法，因此，通常将环境(Context)自身当作一个参数传递给具体的状态处理类。</p>\n<p>⑧　客户端一般只和环境(Context)交互。客户端可以用状态对象来配置一个环境(Context)，一旦配置完毕，就不再需要和状态对象打交道了。客户端通常不负责运行期间状态的维护，也不负责决定后续到底使用哪一个具体的状态处理对象。</p>\n<p>1.3适用场景</p>\n<ul>\n<li>if else(或switch case)语句，且这些分支依赖于该对象的状态。</li>\n</ul>\n<p>1.4优缺点</p>\n<ul>\n<li>将与特定状态相关的行为局部化，并且将不同状态的行为分割开来</li>\n<li>可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。</li>\n<li>允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。</li>\n<li>枚举可能的状态，在枚举状态之前需要确定状态种类。</li>\n<li>封装了转换规则</li>\n<li>将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。</li>\n<li>（缺点） 状态模式的使用必然会增加系统类和对象的个数。</li>\n<li>（缺点）状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。</li>\n<li>（缺点）状态模式对“开闭原则”的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态；而且修改某个状态类的行为也需修改对应类的源代码。</li>\n</ul>\n<p>1.5实例</p>\n<p>描述：</p>\n<ul>\n<li><p>就绪状态-阻塞状态-运行状态-挂起状态-激活状态</p>\n</li>\n<li><p>按钮来控制一个电梯的状态，一个电梯开们，关门，停，运行。每一种状态改变，都有可能要根据其他状态来更新处理。例如，开门状体，你不能在运行的时候开门，而是在电梯定下后才能开门。门敞状态—按了电梯上下按钮，电梯门开，这中间有5 秒的时间（当然你也可以用身体挡住电梯门，那就不是5 秒了），那就是门敞状态；在这个状态下电梯只能做的动作是关门动作；门闭状态—电梯门关闭了，在这个状态下，可以进行的动作是：开门（我不想坐电梯了）、停止（忘记按路层号了）、运行；运行状态—电梯正在跑，上下窜，在这个状态下，电梯只能做的是停止；停止状态—电梯停止不动，在这个状态下，电梯有两个可选动作：继续运行和开门动作；</p>\n</li>\n<li>我们给一部手机打电话，就可能出现这几种情况：用户开机，用户关机，用户欠费停机，用户消户等。 所以当我们拨打这个号码的时候：系统就要判断，该用户是否在开机且不忙状态，又或者是关机，欠费等状态。但不管是那种状态我们都应给出对应的处理操作。</li>\n</ul>\n<p>1.5.1.2011B<br>  某大型商场内安装了多个简易的纸巾售卖机，自动出售2元钱一包的纸巾，且每次仅售出一包纸巾。纸巾售卖机的状态图如图39所示。<br><img src=\"https://www.cnblogs.com/images/cnblogs_com/cliy-10/1232443/o_39.png\" alt=\" \"><br>图39</p>\n<p>采用状态(State)模式来实现该纸巾售卖机，得到如图39所示的类图。其中类State为抽象类，定义了投币、退币、出纸巾等方法接口。类SoldState、SoldOutState、NoQuarterState和HasQuarterState分别对应图40中纸巾售卖机的4种状态：售出纸巾、纸巾售完、没有投币、有2元钱。<br><img src=\"https://www.cnblogs.com/images/cnblogs_com/cliy-10/1232443/o_40.png\" alt=\" \"><br>图40</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include ＜iostream＞</span><br><span class=\"line\">   using namespace std;</span><br><span class=\"line\">   <span class=\"comment\">//以下为类的定义部分</span></span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TissueMachine</span></span>;    <span class=\"comment\">//类的提前引用</span></span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">State</span>  </span>&#123;</span><br><span class=\"line\">   public：</span><br><span class=\"line\">       virtual <span class=\"keyword\">void</span> insertQuarter()=<span class=\"number\">0</span>; <span class=\"comment\">//投币</span></span><br><span class=\"line\">       virtual <span class=\"keyword\">void</span> ejectQuarter()=<span class=\"number\">0</span>;  <span class=\"comment\">//退币</span></span><br><span class=\"line\">       virtual  <span class=\"keyword\">void</span>  turnCrank()=<span class=\"number\">0</span>;   <span class=\"comment\">//按下“出纸巾”按钮</span></span><br><span class=\"line\">       virtual <span class=\"keyword\">void</span> dispense()=<span class=\"number\">0</span>;     <span class=\"comment\">//出纸巾</span></span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\">   <span class=\"comment\">/*类SoldOutState、NoQuarterState、HasQuarterState、SoldState的定义省略，</span></span><br><span class=\"line\"><span class=\"comment\">   每个类中均定义了私有数据成员TissueMachine* tissueMachine;*/</span></span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TissueMachine</span>  </span>&#123;</span><br><span class=\"line\">   private：</span><br><span class=\"line\">         State *soldOutState, *noQuarterState, *hasQuarterState,*soldState,</span><br><span class=\"line\">   *state;</span><br><span class=\"line\">       int count;    <span class=\"comment\">//纸巾数</span></span><br><span class=\"line\">   public：</span><br><span class=\"line\">       TissueMachine (int numbers);</span><br><span class=\"line\">       <span class=\"keyword\">void</span> setState (State*  state);</span><br><span class=\"line\">       State* getHasQuarterState();</span><br><span class=\"line\">       State* getNoQuarterState();</span><br><span class=\"line\">       State* getSoldState();</span><br><span class=\"line\">       State* getSoldOutState();</span><br><span class=\"line\">       int  getCount();</span><br><span class=\"line\">       <span class=\"comment\">//其余代码省略</span></span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\">   <span class=\"comment\">//以下为类的实现部分</span></span><br><span class=\"line\">   <span class=\"keyword\">void</span> NoQuarterState  ::insertQuarter()&#123;</span><br><span class=\"line\">   tissueMachine-＞setState(tissueMachine-&gt;getHasQuarterState());</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">void</span>  HasQuarterState  ::ejectQuarter()&#123;</span><br><span class=\"line\">   tissueMachine-＞setState(tissueMachine-&gt;getNoQuarterState());</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">void</span> SoldState  ::dispense()&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (tissueMachine-＞getCount()＞<span class=\"number\">0</span>)  &#123;</span><br><span class=\"line\">           tissueMachine-＞setState(tissueMachine-&gt;getNoQuarterState());</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">else</span>  &#123;</span><br><span class=\"line\">           tissueMachine-＞setState(tissueMachine-&gt;getSoldOutState());</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   &#125;  <span class=\"comment\">//其余代码省略</span></span><br></pre></td></tr></table></div></figure>\n","prev":{"title":"设计模式之生成器模式","link":"2018/03/19/设计模式之生成器模式"},"next":{"title":"设计模式之模板方法模式","link":"2018/03/15/设计模式之模板方法模式"},"plink":"http://yoursite.com/2018/03/17/设计模式之状态模式/"}