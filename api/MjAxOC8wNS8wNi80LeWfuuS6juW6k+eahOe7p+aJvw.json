{"title":"4-基于库的继承","date":"2018-05-06T08:00:30.000Z","link":"2018/05/06/4-基于库的继承","tags":["JavaScript"],"categories":["前端"],"updated":"2018-10-12T14:47:53.956Z","content":"<blockquote>\n<p>原型链的继承方式实际上是把对象的所有方法给只给类的prototype对象，我们可以利用zInherit库实现继承，不必使用原型链，这个库支持所有的现代浏览器以及比较旧版本的浏览器，我们可以看一下这个库是怎么样使用的。</p>\n</blockquote>\n<h2 id=\"1-zInherit库\">1.zInherit库<a href=\"2018/05/06/4-基于库的继承#1-zInherit库\"></a></h2><p>下载地址：找了半天没有找个zInherit库的下载地址，好心塞牙，以后有机会碰到的话，在添加吧。</p>\n<p>zInherit库给Object类添加了两个方法：inheritFrom()方法和instanceof()方法</p>\n<p>inheritFrom()方法:负责复制指定对象的所有方法。</p>\n<p>举例：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B.prototype=new A();</span><br><span class=\"line\">可替换成</span><br><span class=\"line\">B.prototype.inheritFrom(A);</span><br></pre></td></tr></table></div></figure>\n<p>inheritFrom()方法接受一个参数，也就是要复制的方法所属的类，与原型链相对的是，这种方法并未真正创建要继承的类的实例，所以比较安全。</p>\n<p>instanceof()方法和instanceof运算符的效果是相同的，不过在该库中不需要使用原型链，所以instanceof运算符根本就检测不出来什么，因此封装了instanceof()方法。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b instanceof A //true</span><br><span class=\"line\"> 等价于</span><br><span class=\"line\"> b instanceof(A) //true</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"1-1-混合的对象冒充和原型方式\">1.1.混合的对象冒充和原型方式<a href=\"2018/05/06/4-基于库的继承#1-1-混合的对象冒充和原型方式\"></a></h3><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Polygon(iside)&#123;</span><br><span class=\"line\">\tthis.sides=iside;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Polygon.prototype.getArea=function()&#123;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Triangle(iside,ibase,iheight)&#123;</span><br><span class=\"line\">   Polygon.call(this,iside);</span><br><span class=\"line\">   this.base=ibase;</span><br><span class=\"line\">   this.height=iheight;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Triangle.prototype.inheritFrom(Polygon);</span><br><span class=\"line\"></span><br><span class=\"line\">Triangle.prototype.getArea=function()&#123;</span><br><span class=\"line\">\treturn 0.5*this.base*this.height;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Rectangle(iside,iwidth,iheight)&#123;</span><br><span class=\"line\">\tPolygon.call(this,iside);</span><br><span class=\"line\">\tthis.width=iwidth;</span><br><span class=\"line\">\tthis.height=iheight;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Rectangle.prototype=inheritFrom(Polygon);</span><br><span class=\"line\"></span><br><span class=\"line\">Rectangle.prototype.getArea=function()&#123;</span><br><span class=\"line\">\treturn this.width*this.height;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var triangle=new Triangle(3,4,5);</span><br><span class=\"line\">var rectangle=new Rectangle(4,4,5);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(triangle.sides); //3</span><br><span class=\"line\">console.log(triangle.base);  //4</span><br><span class=\"line\">console.log(triangle.height); //5</span><br><span class=\"line\">console.log(triangle.getArea()); //10</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(rectangle.sides); //4</span><br><span class=\"line\">console.log(rectangle.width); //4</span><br><span class=\"line\">console.log(rectangle.height); //5</span><br><span class=\"line\">console.log(rectangle.getArea());//20</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(triangle.instanceof(Triangle));//true</span><br><span class=\"line\">console.log(triangle.instanceof(Polygon));//true</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(rectangle.instanceof(Rectangle));//true</span><br><span class=\"line\">console.log(rectangle.instanceof(Polygon));//true</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"1-2-动态原型支持\">1.2.动态原型支持<a href=\"2018/05/06/4-基于库的继承#1-2-动态原型支持\"></a></h3><p>原型链不能满足动态原型主旨，也就是说把类的所有代码放置在它的构造函数中，zInherit库修正了这个问题，它允许在构造函数内部调用inheritForm()方法。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Polygon(iside)&#123;</span><br><span class=\"line\">\tthis.sides=iside;</span><br><span class=\"line\"> if(typeof Polygon._initialized==&quot;undefined&quot;)&#123;</span><br><span class=\"line\">   Polygon.prototype.gerArea=function()&#123; //属性指向函数</span><br><span class=\"line\">      return 0;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">   Polygon._initialized=true;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//三角形类</span><br><span class=\"line\">function Triangle(iside,ibase,iheight)&#123;</span><br><span class=\"line\">   Polygon.call(this,iside);</span><br><span class=\"line\">   this.base=ibase;</span><br><span class=\"line\">   this.height=iheight;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> if(typeof Triangle._initialized==&quot;undefined&quot;)&#123;</span><br><span class=\"line\"> \tTriangle.prototype.inheritFrom(Polygon);;</span><br><span class=\"line\">    Triangle.prototype.getArea=function()&#123;</span><br><span class=\"line\">\t    return 0.5*this.base*this.height;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     Triangle._initialized=true;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//矩形类</span><br><span class=\"line\">function Rectangle(iside,iwidth,iheight)&#123;</span><br><span class=\"line\">   Polygon.call(this,iside);</span><br><span class=\"line\">\tthis.width=iwidth;</span><br><span class=\"line\">\tthis.height=iheight;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> if(typeof Rectangle._initialized==&quot;undefined&quot;)&#123;</span><br><span class=\"line\"> \tRectangle.prototype.inheritFrom(Polygon);;</span><br><span class=\"line\">    Rectangle.prototype.getArea=function()&#123;</span><br><span class=\"line\">\t    return 0.5*this.base*this.height;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    Rectangle._initialized=true;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"1-3-多重继承支持\">1.3.多重继承支持<a href=\"2018/05/06/4-基于库的继承#1-3-多重继承支持\"></a></h3><p>zInherit库最有用的特性之一是支持多重继承，原型链不支持这种能力，使这种支持成为可能的关键是inheritFromForm()方法不替换prototype对象。</p>\n<p>多重继承示例图：</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1255650/o_15.png\" alt=\" \" class=\"article-img\"></p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function classX()&#123;</span><br><span class=\"line\">this.messagex=&quot;我是classX&quot;;</span><br><span class=\"line\"> if(typeof classX._initialized==&quot;undefined&quot;)&#123;</span><br><span class=\"line\">    classX.prototype.showmessagex=function()&#123;</span><br><span class=\"line\">\t    console.log(this.messagex);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    classX._initialized=true;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function classY()&#123;</span><br><span class=\"line\">this.messagey=&quot;我是classY&quot;;</span><br><span class=\"line\"> if(typeof classY._initialized==&quot;undefined&quot;)&#123;</span><br><span class=\"line\">    classY.prototype.showmessagey=function()&#123;</span><br><span class=\"line\">\t    console.log(this.messagey);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    classY._initialized=true;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function classZ()&#123;</span><br><span class=\"line\">  classX.call(this);</span><br><span class=\"line\">  classY.call(this);</span><br><span class=\"line\"> this.messagez=&quot;我是classZ&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"> if(typeof classZ._initialized==&quot;undefined&quot;)&#123;</span><br><span class=\"line\">    classZ.prototype.inheritFrom(classX);</span><br><span class=\"line\">    classZ.prototype.inheritFrom(classY);</span><br><span class=\"line\">    classX.prototype.showmessagez=function()&#123;</span><br><span class=\"line\">\t    console.log(this.messagez);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    classZ._initialized=true;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>发生继承的顺序是非常重要的，通常按照继承属性的顺序继承方法比较好，也就是说如果先继承classX的属性，然后继承classY的属性，那么也应该按照这种继承顺序继承它们的方法。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var z=new classZ();</span><br><span class=\"line\">console.log(z.showshowmessagex()); //我是classX</span><br><span class=\"line\">console.log(z.showshowmessagey()); //我是classY</span><br><span class=\"line\">console.log(z.showshowmessagez()); //我是classZ</span><br></pre></td></tr></table></div></figure>\n<p>说明：</p>\n<ul>\n<li><p>showshowmessagex()方法是从classX继承而来的，它访问messagex属性，该属性也是从classX继承而来的。</p>\n</li>\n<li><p>showshowmessagey()方法是从classY继承而来的，它访问messagey属性，该属性也是从classY继承而来的。</p>\n</li>\n<li><p>showshowmessagez()方法是从classZ继承而来的，它访问messagez属性，该属性也是从classZ继承而来的。</p>\n</li>\n</ul>\n<h2 id=\"2-xbObjects库\">2.xbObjects库<a href=\"2018/05/06/4-基于库的继承#2-xbObjects库\"></a></h2><h3 id=\"2-1-目的\">2.1.目的<a href=\"2018/05/06/4-基于库的继承#2-1-目的\"></a></h3><p>xbObjects库为JavaScript提供更强的面向对象泛型，不只支持继承，还支持方法的重载和调用超类方法的能力。</p>\n<h3 id=\"2-1-第一步：注册类\">2.1.第一步：注册类<a href=\"2018/05/06/4-基于库的继承#2-1-第一步：注册类\"></a></h3><p>需要定义它是由哪个类继承而来的</p>\n<p><code>_classes.registerClass(&quot;Subclass_Name&quot;,&quot;Superclsss_Name&quot;);</code></p>\n<p>子类和父类都以字符串形式传进来，而不是指向它们的构造函数的指针，这个调用必须放在指定子类的构造函数前。</p>\n<p>如果新的类未继承任何类，调用registerClass()时也可以只用第一个参数。</p>\n<h3 id=\"2-2-第二步：defineClass\">2.2.第二步：defineClass()<a href=\"2018/05/06/4-基于库的继承#2-2-第二步：defineClass\"></a></h3><p>在构造函数内调用defineClass()方法，传给它类名和原型函数的指针，该函数用于初始化对象的所有属性和方法。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_classes.registerClass(&quot;A&quot;);</span><br><span class=\"line\">function A(name)&#123;</span><br><span class=\"line\">\t_class.defineClass(&quot;A&quot;,prototypeFunction);</span><br><span class=\"line\"></span><br><span class=\"line\">\tfunction prototypeFunction()&#123;</span><br><span class=\"line\">    //</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>原型函数prototypeFunction()位于构造函数内部，它的主要用途是在适当的时候把所有方法赋予该类，这一点上与动态原型相似。</p>\n<h3 id=\"2-3-第三步：init-方法\">2.3.第三步：init()方法<a href=\"2018/05/06/4-基于库的继承#2-3-第三步：init-方法\"></a></h3><p>创建init()方法，该方法负责该类的所有属性，它必须接受与构造函数相同的参数。作为一种规约，init()方法总是在defineClaaa()方法后调用。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_classes.registerClass(&quot;A&quot;);</span><br><span class=\"line\">function A(name)&#123;</span><br><span class=\"line\">\t_class.defineClass(&quot;A&quot;,prototypeFunction);</span><br><span class=\"line\">     this.init(name);</span><br><span class=\"line\">\tfunction prototypeFunction()&#123;</span><br><span class=\"line\">    A.prototype.init=function()&#123;</span><br><span class=\"line\">    \tthis.parentMethod(&quot;init&quot;);</span><br><span class=\"line\">    \tthis.name=name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>parentMethod()方法接受任意多的参数，但是第一个参数总是要调用的类方法的名字(该参数必须是字符串，而不是函数指针)，所有其他参数都是传给父类的方法。</p>\n<h3 id=\"2-4-第四步：添加方法\">2.4.第四步：添加方法<a href=\"2018/05/06/4-基于库的继承#2-4-第四步：添加方法\"></a></h3><p>在原型函数内添加其他类的方法</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_classes.registerClass(&quot;A&quot;);</span><br><span class=\"line\">function A(name)&#123;</span><br><span class=\"line\">\t_classes.defineClass(&quot;A&quot;,prototypeFunction);</span><br><span class=\"line\">     this.init(name);</span><br><span class=\"line\">\tfunction prototypeFunction()&#123;</span><br><span class=\"line\">    A.prototype.init=function()&#123;</span><br><span class=\"line\">    \tthis.parentMethod(&quot;init&quot;);</span><br><span class=\"line\">    \tthis.name=name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    A.prototype.showname=function()&#123;</span><br><span class=\"line\">    \tconsole.log(this.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>测试：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a=new A(&quot;red&quot;);</span><br><span class=\"line\">console.log(a.showname());</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"2-5-重载多边形\">2.5.重载多边形<a href=\"2018/05/06/4-基于库的继承#2-5-重载多边形\"></a></h3><h5 id=\"2-5-1-Polygon类\">2.5.1.Polygon类<a href=\"2018/05/06/4-基于库的继承#2-5-1-Polygon类\"></a></h5><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_classes.registerClass(&quot;Polygon&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">function Polygon(sides)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> _classes.defineClass(&quot;Polygon&quot;,prototypeFunction);</span><br><span class=\"line\"></span><br><span class=\"line\">\t this.init(sides);</span><br><span class=\"line\">\t function prototypeFunction()&#123;</span><br><span class=\"line\">       Polygon.prototype.init=function(iside)&#123;</span><br><span class=\"line\">    \t   this.parentMethod(&quot;init&quot;);</span><br><span class=\"line\">    \t   this.sides=iside;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Polygon.prototype.getArea=function()&#123;</span><br><span class=\"line\">    \treturn 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h5 id=\"2-5-2-Triangle类\">2.5.2.Triangle类<a href=\"2018/05/06/4-基于库的继承#2-5-2-Triangle类\"></a></h5><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_classes.registerClass(&quot;Triangle&quot;,&quot;Polygon&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">function Triangle(sides,base,height)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> _classes.defineClass(&quot;Triangle&quot;,prototypeFunction);</span><br><span class=\"line\"></span><br><span class=\"line\">\t this.init(sides,base,height);</span><br><span class=\"line\">\t function prototypeFunction()&#123;</span><br><span class=\"line\">       Triangle.prototype.init=function(iside,ibase,iheight)&#123;</span><br><span class=\"line\">    \t   this.parentMethod(&quot;init&quot;);</span><br><span class=\"line\">    \t   this.sides=iside;</span><br><span class=\"line\">    \t   this.base=ibase;</span><br><span class=\"line\">    \t   this.height=iheight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     Triangle.prototype.getArea=function()&#123;</span><br><span class=\"line\">\t    return 0.5*this.base*this.height;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h5 id=\"2-5-3-Rectangle类\">2.5.3.Rectangle类<a href=\"2018/05/06/4-基于库的继承#2-5-3-Rectangle类\"></a></h5><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_classes.registerClass(&quot;Rectangle&quot;,&quot;Polygon&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">function Rectangle(sides,width,height)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> _classes.defineClass(&quot;Rectangle&quot;,prototypeFunction);</span><br><span class=\"line\"></span><br><span class=\"line\">\t this.init(sides,width,height);</span><br><span class=\"line\">\t function prototypeFunction()&#123;</span><br><span class=\"line\">       Rectangle.prototype.init=function(iside,iwidth,iheight)&#123;</span><br><span class=\"line\">    \t   this.parentMethod(&quot;init&quot;);</span><br><span class=\"line\">    \t   this.sides=iside;</span><br><span class=\"line\">    \t   this.width=iwidth;</span><br><span class=\"line\">    \t   this.height=iheight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Rectangle.prototype.getArea=function()&#123;</span><br><span class=\"line\">\t  return this.width*this.height;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h5 id=\"2-5-4-测试\">2.5.4.测试<a href=\"2018/05/06/4-基于库的继承#2-5-4-测试\"></a></h5><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var triangle=new Triangle(3,4,5);</span><br><span class=\"line\">var rectangle=new Rectangle(4,4,5);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(triangle.sides); //3</span><br><span class=\"line\">console.log(triangle.base);  //4</span><br><span class=\"line\">console.log(triangle.height); //5</span><br><span class=\"line\">console.log(triangle.getArea()); //10</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(rectangle.sides); //4</span><br><span class=\"line\">console.log(rectangle.width); //4</span><br><span class=\"line\">console.log(rectangle.height); //5</span><br><span class=\"line\">console.log(rectangle.getArea());//20</span><br></pre></td></tr></table></div></figure>","prev":{"title":"动态类型语言和鸭子类型","link":"2018/05/07/动态类型语言和鸭子类型"},"next":{"title":"4-继承实例","link":"2018/05/05/4-继承实例"},"plink":"http://yoursite.com/2018/05/06/4-基于库的继承/","toc":[{"title":"1.zInherit库","id":"1-zInherit库","index":"1","children":[{"title":"1.1.混合的对象冒充和原型方式","id":"1-1-混合的对象冒充和原型方式","index":"1.1"},{"title":"1.2.动态原型支持","id":"1-2-动态原型支持","index":"1.2"},{"title":"1.3.多重继承支持","id":"1-3-多重继承支持","index":"1.3"}]},{"title":"2.xbObjects库","id":"2-xbObjects库","index":"2","children":[{"title":"2.1.目的","id":"2-1-目的","index":"2.1"},{"title":"2.1.第一步：注册类","id":"2-1-第一步：注册类","index":"2.2"},{"title":"2.2.第二步：defineClass()","id":"2-2-第二步：defineClass","index":"2.3"},{"title":"2.3.第三步：init()方法","id":"2-3-第三步：init-方法","index":"2.4"},{"title":"2.4.第四步：添加方法","id":"2-4-第四步：添加方法","index":"2.5"},{"title":"2.5.重载多边形","id":"2-5-重载多边形","index":"2.6"}]}]}