{"title":"设计模式之装饰器模式","date":"2018-03-25T03:12:11.000Z","link":"2018/03/25/设计模式之装饰器模式","tags":["设计模式"],"categories":["前端"],"updated":"2019-08-25T12:51:08.482Z","content":"<blockquote>\n<p>装饰器模式</p>\n</blockquote>\n<p>1.1定义：以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案。</p>\n<p>1.2结构图</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232443/o_20.png\" alt=\" \"><br>图20</p>\n<ul>\n<li>抽象构件(Component)角色：给出一个抽象接口，以规范准备接收附加责任的对象。</li>\n<li>具体构件(ConcreteComponent)角色：定义一个将要接收附加责任的类。</li>\n<li>装饰(Decorator)角色：持有一个构件(Component)对象的实例，并定义一个与抽象构件接口一致的接口。</li>\n<li>具体装饰(ConcreteDecorator)角色：负责给构件对象“贴上”附加的责任。</li>\n</ul>\n<p>①　装饰模式以对客户透明的方式动态地给一个对象附加上更多的责任。换言之，客户端并不会觉得对象在装饰前和装饰后有什么不同。装饰模式可以在不使用创造更多子类的情况下，将对象的功能加以扩展。</p>\n<p>②　如果只有一个ConcreteComponent类，那么可以考虑去掉抽象的Component类（接口），把Decorator作为一个ConcreteComponent子类。如21所示：</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232443/o_21.png\" alt=\" \"><br>图21<br>③　如果只有一个ConcreteDecorator类，那么就没有必要建立一个单独的Decorator类，而可以把Decorator和ConcreteDecorator的责任合并成一个类。甚至在只有两个ConcreteDecorator类的情况下，都可以这样做。</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232443/o_22.png\" alt=\" \"><br>图 22</p>\n<p>④　装饰模式对客户端的透明性要求程序不要声明一个ConcreteComponent类型的变量，而应当声明一个Component类型的变量。</p>\n<p>⑤　实际情况中，纯粹的装饰模式很难找到。装饰模式的用意是在不改变接口的前提下，增强所考虑的类的性能。在增强性能的时候，往往需要建立新的公开的方法。这就导致了大多数的装饰模式的实现都是“半透明”的，而不是完全透明的。换言之，允许装饰模式改变接口，增加新的方法。</p>\n<p>⑥　半透明的装饰模式是介于装饰模式和适配器模式之间的。适配器模式的用意是改变所考虑的类的接口，也可以通过改写一个或几个方法，或增加新的方法来增强或改变所考虑的类的功能。大多数的装饰模式实际上是半透明的装饰模式，这样的装饰模式也称做半装饰、半适配器模式。</p>\n<p>⑦　装饰模式能够实现动态的为对象添加功能，是从一个对象外部来给对象添加功能。通常给对象添加功能，要么直接修改对象添加相应的功能，要么派生对应的子类来扩展，抑或是使用对象组合的方式。显然，直接修改对应的类这种方式并不可取。在面向对象的设计中，而我们也应该尽量使用对象组合，而不是对象继承来扩展和复用功能。装饰器模式就是基于对象组合的方式，可以很灵活的给对象添加所需要的功能。装饰器模式的本质就是动态组合。动态是手段，组合才是目的。总之，装饰模式是通过把复杂的功能简单化，分散化，然后再运行期间，根据需要来动态组合的这样一个模式。</p>\n<p>⑧　这个结构中最关键的是，装饰角色持有一个构件对象的实例。这样，需要装饰的实例，才能够传入到装饰器中，让装饰器对其进行装饰。同时，在多个装饰器共同装饰的情况下，还可以把前面的装饰器传入到后面的装饰器中，由最后的装饰器调用动作。因为它们实现了同样的接口，这样做是允许的。例如：对象A，需要装饰器A,B进行装饰。那么，可以把A传给装饰器A，装饰后，再把A传给装饰器B，继续装饰。也可以把A传给装饰器A之后，再把装饰器A传给装饰器B，由B完成所有的装饰动作（实际上只是调用了A的装饰动作，具体实现仍是在装饰器A当中）。</p>\n<p>⑨　装饰器模式能够动态地为对象添加功能，是从一个对象外部来给对象添加功能，相当于改变了对象的外观。从外部使用系统的角度看，就不再是使用原始的那个对象了，而是使用被一系列装饰器装饰过后的对象。这样就能够灵活的改变一个对象的功能，只要动态组合的装饰器发生了改变，那么最终所得到的对象的功能就发生了改变。另一个好处是装饰器功能的复用，可以给一个对象多次增加同一个装饰器，也可以用同一个装饰器来装饰不同的对象。而且符合面向对象设计中的一条基本规则：”尽量使用对象组合，而不是对象继承”.</p>\n<p>1.3适用场景</p>\n<ul>\n<li>扩展一个类的功能。</li>\n<li>动态增加功能，动态撤销。</li>\n<li>想透明并动态地给对象增加新的职责</li>\n</ul>\n<p>1.4优缺点</p>\n<ul>\n<li>装饰模式与继承关系的目的都是要扩展对象的功能，但是装饰模式可以提供比继承更多的灵活性。装饰模式允许系统动态决定“贴上”一个需要的“装饰”，或者除掉一个不需要的“装饰”。继承关系则不同，继承关系是静态的，它在系统运行前就决定了。</li>\n</ul>\n<ul>\n<li>通过使用不同的具体装饰类以及这些装饰类的排列组合，设计师可以创造出很多不同行为的组合。</li>\n<li>有效避免了使用继承方式扩展对象功能而带来的灵活性差，子类无限制扩展的问题</li>\n<li>装饰者与被装饰者之间虽然都是统一类型，但是它们彼此是完全独立并可以独立任意改变的。</li>\n<li>（缺点）　由于使用装饰模式，可以比使用继承关系需要较少数目的类。使用较少的类，当然使设计比较易于进行。但是，在另一方面，使用装饰模式会产生比使用继承关系更多的对象。更多的对象会使得查错变得困难，特别是这些对象看上去都很相像。</li>\n</ul>\n<p>1.1实例<br>描述：</p>\n<ul>\n<li><p>需要根据配置文件，动态地生成一个Excel模板。模板有首页，内容页，链接页等几个页签。</p>\n</li>\n<li><p>假设我们现在去咖啡店要了一杯咖啡，可以加奶、加糖等等。咖啡和奶、糖分别有不同的价格。 咖啡就是我们的组件，奶和糖是我们的装饰者，现在我们要计算调制这样一杯咖啡花费多少。</p>\n</li>\n<li><p>如果我们要实现一个咖啡屋的订单系统，设计类时，如果要为m种咖啡（浓缩、深焙。。。）搭配的n种调料（豆浆、摩卡、糖、牛奶。。） 分别设计一个类。。简直是一个噩梦，这还没有考虑可能的新的需求变动。</p>\n</li>\n</ul>\n<p>1.1.1.2012A</p>\n<p>某咖啡店卖咖啡时，可以根据顾客的要求在其中加入各种配料，咖啡店会根据所加入的配料来计算费用。咖啡店所供应的咖啡及配料的种类和价格如表3所示。</p>\n<p>表3 咖啡及配料的种类和价格<br><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232443/t_%e8%a1%a83.png\" alt=\" \">  </p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232443/o_23.png\" alt=\" \"><br>图23</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include ＜iostream＞</span><br><span class=\"line\">#include ＜string＞</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">consr int ESPRESSO_PRICE = <span class=\"number\">21</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> int DRAKROAST_PRICE = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> int MOCHA_PRICE = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> int WHIP_PRICE = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Beverage</span> </span>&#123;       <span class=\"comment\">//饮料</span></span><br><span class=\"line\">   protected: string description;</span><br><span class=\"line\">    public:   virtual string getDescription() &#123;<span class=\"keyword\">return</span> description;&#125;</span><br><span class=\"line\">    virtual int cost()=<span class=\"number\">0</span>;&#125;;</span><br><span class=\"line\">class CondimentDecorator: public Beverage &#123;            //配料</span><br><span class=\"line\">             protected:Beverage*beverage;&#125;;</span><br><span class=\"line\">class Espresso: public Beverage &#123;                    //蒸馏咖啡</span><br><span class=\"line\">    public:</span><br><span class=\"line\">          Espresso ()  &#123; description=<span class=\"string\">\"Espresso\"</span>; &#125;</span><br><span class=\"line\">          int cost ()  &#123; <span class=\"keyword\">return</span> ESPRESSO_PRICE; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">class DarkRoast: public Beverage &#123;                     //深度烘培咖啡</span><br><span class=\"line\">    public: DarkRoast() &#123; description = <span class=\"string\">\"DardRoast\"</span>; &#125;</span><br><span class=\"line\">    int cost()&#123; <span class=\"keyword\">return</span> DRAKROAST_PRICE; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">class Mocha: public CondimentDecorator &#123; //摩卡</span><br><span class=\"line\">     public: Mocha (Beverage*beverage) &#123; <span class=\"keyword\">this</span>-＞beverage=beverage; &#125;</span><br><span class=\"line\">     string getDescription()&#123; <span class=\"keyword\">return</span> beverage-＞getDescription()+<span class=\"string\">\",Mocha\"</span>; &#125;</span><br><span class=\"line\">     int cost()&#123; <span class=\"keyword\">return</span> MOCHA_PRICE+beverage-＞cost(); &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">class Whip: public CondimentDecorator &#123;                 //奶泡</span><br><span class=\"line\">     public: Whip (Beverage*beverage) &#123; <span class=\"keyword\">this</span>-＞beverage=beverage; &#125;</span><br><span class=\"line\">     string getDescription() &#123; <span class=\"keyword\">return</span> beverage-＞getDescription()+<span class=\"string\">\",Whip\"</span>; &#125;</span><br><span class=\"line\">     int cost()&#123; <span class=\"keyword\">return</span> WHIP_PRICE+beverage-＞cost(); &#125;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">     Beverage* beverage = <span class=\"keyword\">new</span> DarkRoast() ;</span><br><span class=\"line\">     beverage=<span class=\"keyword\">new</span> Mocha(beverage) ;</span><br><span class=\"line\">     beverage=<span class=\"keyword\">new</span> Whip (beverage) ;</span><br><span class=\"line\">     cout＜＜beverage-＞getDescription()＜＜<span class=\"string\">\"￥\"</span>＜＜beverage-＞cost() end1;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>1.1.2.2016B<br>某发票（lnvoice）由抬头（Head）部分、正文部分和脚注（Foot）部分构成。现采用装饰（ Decorator）模式实现打印发票的功能，得到如图24所示的类图。</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232443/o_24.png\" alt=\" \"><br>图24</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std；</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">invoice</span></span>&#123;</span><br><span class=\"line\">public：</span><br><span class=\"line\">\t   virtual <span class=\"keyword\">void</span> printinvoice()&#123;</span><br><span class=\"line\">\tcout《 <span class=\"string\">\"This is the content of the invoice!\"</span>《 endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">class Decorator : public invoice &#123;</span><br><span class=\"line\">\tInvoice *ticket;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tDecorator（lnvoice *t） &#123; ticket = t; &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> printinvoice()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>（ticket != NULL）</span><br><span class=\"line\">\t\t\tticket-&gt;printInvoice();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">class HeadDecorator : public Decorator&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tHeadDecorator（lnvoice*t）: Decorator（t） &#123; &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> printinvoice() &#123;</span><br><span class=\"line\">\t\tcout《 <span class=\"string\">\"This is the header of the invoice! \"</span>&lt;&lt; endl;</span><br><span class=\"line\">\t\t Decorator::printInvoice();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;；</span><br><span class=\"line\">\tclass FootDecorator : public Decorator&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tFootDecorator（invoice *t）: Decorator（t） &#123; &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> printlnvoice（） &#123;</span><br><span class=\"line\">\t\tDecorator::printInvoice();</span><br><span class=\"line\">\t\tcout《 <span class=\"string\">\"This is the footnote of the invoice!\"</span>《 endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">int main（<span class=\"keyword\">void</span>） &#123;</span><br><span class=\"line\">\tInvoice t;</span><br><span class=\"line\">\tFootDecorator f（&amp;t）;</span><br><span class=\"line\">\tHeadDecorator h（&amp;f）;</span><br><span class=\"line\">\tH.printlnvoice（）;</span><br><span class=\"line\">\tcout&lt; &lt; “_____”&lt; &lt; endl;</span><br><span class=\"line\">\tFootDecorator a(NULL);</span><br><span class=\"line\">\tHeadDecorator b((&amp;a));</span><br><span class=\"line\">\tB．printinvoice();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;；</span><br></pre></td></tr></table></div></figure>","prev":{"title":"设计模式之观察者模式","link":"2018/03/27/设计模式之观察者模式"},"next":{"title":"设计模式之组合模式","link":"2018/03/23/设计模式之组合模式"},"plink":"http://yoursite.com/2018/03/25/设计模式之装饰器模式/"}