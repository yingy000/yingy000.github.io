{"title":"call和apply","date":"2018-05-15T05:20:20.000Z","link":"2018/05/15/call和apply","tags":["JavaScript"],"categories":["前端"],"updated":"2018-10-12T14:47:36.565Z","content":"<blockquote>\n<p>ECMAScript3给Function的原型定义了两个方法<code>Function.prototype.call</code>或<code>Function.prototype.apply</code>，在一些函数式风格的代码编写中，<code>call()</code>方法和apply方法扮演着及其重要的角色，它们所实现的功能是一模一样的，区别仅仅在于传入参数形式的不同。</p>\n</blockquote>\n<h2 id=\"1-apply方法\">1.apply方法<a href=\"2018/05/15/call和apply#1-apply方法\"></a></h2><p>apply()方法接受两个参数，第一个参数指定了函数体内this对象的指向，第二个参数为一个带下标的集合，这个集合可以为数组，也可以为类数组，apply方法把这个集合中的元素作为参数传递给被调用的函数。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function func(a,b,c)&#123;</span><br><span class=\"line\">  console.log([a,b,c]); //[1, 2, 3]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func.apply(null,[1,2,3])</span><br></pre></td></tr></table></div></figure>\n<p>在上述代码中，参数1、2、3被放在数组中一起传入func函数，它们分别对应func参数列表中的a、b、c。</p>\n<h2 id=\"2-call方法\">2.call方法<a href=\"2018/05/15/call和apply#2-call方法\"></a></h2><p>call()方法传入的参数数量不固定，第一个参数同样指定了函数体内this对象的指向，从第二个参数开始往后，每个参数被依次传入函数。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function func(a,b,c)&#123;</span><br><span class=\"line\">  console.log([a,b,c]); //[1, 2, 3]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func.call(null,1,2,3)</span><br></pre></td></tr></table></div></figure>\n<p>当调用一个函数时，JavaScript的解释器并不会计较形参和实参在数量、类型以及顺序上的区别，JavaScript的参数在内部就是用一个数组来表示的，从这个层面来说，apply比call的使用率更高。</p>\n<p>如果我们想要明确地知道函数接受多少参数，而且想一目了然地表达形参和实参的对应关系，可以使用call来传递参数。</p>\n<p>使用call或者apply时，如果传入的第一个参数是null，函数体内的this会指向window。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function func(a,b,c)&#123;</span><br><span class=\"line\">  console.log([a,b,c]); //[1, 2, 3]</span><br><span class=\"line\">  console.log(this==window ); //true</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func.call(null,1,2,3)</span><br></pre></td></tr></table></div></figure>\n<p>如果是在严格模式下，函数体内的this为null</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function func(a,b,c)&#123;</span><br><span class=\"line\">  &quot;use strict&quot;</span><br><span class=\"line\">  console.log([a,b,c]); //[1, 2, 3]</span><br><span class=\"line\">  console.log(this==undefined); //true</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func.call(null,1,2,3)</span><br></pre></td></tr></table></div></figure>\n<p>有时使用call和apply的目的并不在于指定this指向，而是可以借用其他对象的方法，我们可以传入null来代替某个具体的对象。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Math.max.apply(null,[3,5,6,8,1]); //8</span><br><span class=\"line\"></span><br><span class=\"line\">Math.min.apply(null,[3,5,6,8,1]);  //1</span><br><span class=\"line\"></span><br><span class=\"line\">Math.random.apply(null,[0,1])  //0.6309077036021082</span><br></pre></td></tr></table></div></figure>\n<p>Math对象是内置对象，不用实例化就可以直接使用。</p>\n","prev":{"title":"call和apply的用途","link":"2018/05/16/call和apply的用途"},"next":{"title":"this","link":"2018/05/14/this"},"plink":"http://yoursite.com/2018/05/15/call和apply/","toc":[{"title":"1.apply方法","id":"1-apply方法","index":"1"},{"title":"2.call方法","id":"2-call方法","index":"2"}]}