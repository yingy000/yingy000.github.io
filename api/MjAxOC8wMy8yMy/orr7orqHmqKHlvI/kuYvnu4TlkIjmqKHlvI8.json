{"title":"设计模式之组合模式","date":"2018-03-23T07:12:11.000Z","link":"2018/03/23/设计模式之组合模式","tags":["设计模式"],"categories":["前端"],"updated":"2019-08-25T12:49:14.336Z","content":"<blockquote>\n<p>组合模式</p>\n</blockquote>\n<p>1.1定义：组合模式，将对象组合成树形结构以表示“部分-整体”的层次结构，组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>\n<p>1.2结构图：</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232443/o_1.png\" alt=\" \" class=\"article-img\"></p>\n<p>图1</p>\n<ul>\n<li>Client：通过 Component 接口操作结构中的对象。</li>\n<li>Component:组合中的对象声明接口，在适当的情况下，实现所有类共有接口的默认行为。声明一个接口用于访问和管理 Component 的子部件。</li>\n<li>Composite:定义枝节点行为，用来存储子部件，在 Component 接口中实现与子部件相关的操作。</li>\n<li>Leaf:表示叶节点对象。叶子节点没有子节点。</li>\n</ul>\n<p>①　组合模式它描述了如何构造一个类层次结构，这一结构由两种类型的对象所对应的类构成，其中的组合对象使得用户可以组合基元以及其他的组合对象，从而形成任意复杂的结构。</p>\n<p>②　组合模式对单个对象(Leaf)和组合对象(Compostie)具有一致性，它将对象组织到树结构中，可以用来描述整体与部分的关系。同时它也模糊了简单元素(Leaf)和复杂元素(Composite)的概念，使得客户能够像处理简单元素一样来处理复杂元素，从而使客户程序能够与复杂元素的内部结构解耦。</p>\n<p>③　从模式结构中我们看出了叶子节点和容器对象都实现Component接口，这也是能够将叶子对象和容器对象一致对待的关键所在。</p>\n<p>④　组合模式必须满足叶子对象和组合对象实现相同的接口</p>\n<p>1.3适用场景</p>\n<ul>\n<li><p>想要表示对象的部分-整体层次结构，在具有整体和部分的层次结构中，希望通过一种方式忽略整体与部分的差异，可以一致地对待它们。</p>\n</li>\n<li><p>让客户能够忽略不同对象层次的变化，客户端可以针对抽象构件编程，无须关心对象层次结构的细节。</p>\n</li>\n</ul>\n<p>1.4优缺点</p>\n<ul>\n<li><p>可以清楚地定义分层次的复杂对象，表示对象的全部或部分层次，使得增加新构件也更容易。</p>\n</li>\n<li><p>客户端调用简单，客户端可以一致的使用组合结构或其中单个对象。</p>\n</li>\n<li><p>定义了包含叶子对象和容器对象的类层次结构，叶子对象可以被组合成更复杂的容器对象，而这个容器对象又可以被组合，这样不断递归下去，可以形成复杂的树形结构。</p>\n</li>\n<li><p>更容易在组合体内加入对象构件，客户端不必因为加入了新的对象构件而更改原有代码。</p>\n</li>\n<li><p>（缺点）使设计变得更加抽象，对象的业务规则如果很复杂，则实现组合模式具有很大挑战性，而且不是所有的方法都与叶子对象子类都有关联</p>\n</li>\n</ul>\n<p>1.5实例</p>\n<p>说明：在文件系统中，可能存在很多不同目录的文件，C盘、D盘、E盘、F盘等等，这些不同的目录文件的打开方式不同，同时对文件夹的浏览就是对文件夹中文件的浏览，但是对于客户而言都是浏览文件，两者之间不存在什么差别。</p>\n<p>1.5.1.2009B</p>\n<p>现欲构造一文件/目录树，采用组合(Composite)设计模式来设计，得到的类图下图所示：</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232443/o_2.png\" alt=\" \" class=\"article-img\"></p>\n<p> 图2</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractFile</span>  </span>&#123;</span><br><span class=\"line\">    protected：</span><br><span class=\"line\">         string name；  <span class=\"comment\">//文件或目录名称</span></span><br><span class=\"line\">    public：</span><br><span class=\"line\">         <span class=\"keyword\">void</span> printName()&#123;cout＜＜name;＞    <span class=\"comment\">//打印文件或目录名称</span></span><br><span class=\"line\">         virtual <span class=\"keyword\">void</span> addChild(AbstractFile  *file)=<span class=\"number\">0</span>；</span><br><span class=\"line\">                                          <span class=\"comment\">//给一个目录增加子目录或文件</span></span><br><span class=\"line\">         virtual <span class=\"keyword\">void</span> removeChild(AbstractFile*file)=<span class=\"number\">0</span>；</span><br><span class=\"line\">                                          <span class=\"comment\">//删除一个目录的子目录或文件</span></span><br><span class=\"line\">         virtual list＜AbstractFile*＞*getChildren()=<span class=\"number\">0</span>；</span><br><span class=\"line\">                                          <span class=\"comment\">//获得一个目录的子目录或文件</span></span><br><span class=\"line\">&#125;；</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">File</span>：<span class=\"title\">public</span> <span class=\"title\">AbstractFile</span></span>&#123;</span><br><span class=\"line\">    public：</span><br><span class=\"line\">        File(string name)  &#123;<span class=\"keyword\">this</span>.name=name；&#125;</span><br><span class=\"line\">        <span class=\"keyword\">void</span> addChild(AbstractFile*file)  &#123;<span class=\"keyword\">return</span>；  &#125;</span><br><span class=\"line\">        <span class=\"keyword\">void</span> removeChild(AbstractFile*file)  &#123;<span class=\"keyword\">return</span>；  &#125;</span><br><span class=\"line\">        list＜AbstractFile*＞*getChildren() &#123;<span class=\"keyword\">return</span> <span class=\"literal\">null</span>；&#125;</span><br><span class=\"line\">&#125;；</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Folder</span>：<span class=\"title\">public</span> <span class=\"title\">AbstractFile</span></span>&#123;</span><br><span class=\"line\">    private：</span><br><span class=\"line\">        list＜AbstractFile*＞childList；  <span class=\"comment\">//存储子目录或文件</span></span><br><span class=\"line\">    public：</span><br><span class=\"line\">        Folder(string name)&#123;<span class=\"keyword\">this</span>.name=name；&#125;</span><br><span class=\"line\">        <span class=\"keyword\">void</span> addChild(AbstractFile*file)&#123;childList.push_back(file)；&#125;</span><br><span class=\"line\">        <span class=\"keyword\">void</span> removeChild(AbstractFile*file)  &#123;childList.remove(file)；&#125;</span><br><span class=\"line\">        list＜AbstractFile*＞*getChildren()&#123;<span class=\"keyword\">return</span> &amp;childList；&#125;</span><br><span class=\"line\">&#125;；</span><br><span class=\"line\">    <span class=\"keyword\">void</span> main()&#123;</span><br><span class=\"line\">     <span class=\"comment\">//构造一个树形的文件/目录结构</span></span><br><span class=\"line\">    AbstractFile*rootFolder=<span class=\"keyword\">new</span> Folder(<span class=\"string\">\"c:＼＼\"</span>)；</span><br><span class=\"line\">    AbstractFile*compositeFolder=<span class=\"keyword\">new</span> Folder(<span class=\"string\">\"compositel\"</span>)；</span><br><span class=\"line\">    AbstractFile*windw File(<span class=\"string\">\"TestComposite.java\"</span>)；</span><br><span class=\"line\">    rootFolder-＞addChildowsFolder=<span class=\"keyword\">new</span> Folder(<span class=\"string\">\"windows\"</span>)；</span><br><span class=\"line\">    AbstractFile*file=ne(compositeFolder)；</span><br><span class=\"line\">    rootFolder-＞addChild(windowsFolder)；</span><br><span class=\"line\">    compositeFolder-＞addChild(file)；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>1.5.2.2010B</p>\n<p>某公司的组织结构图如图3所示，现采用组合(Composition)设计模式来构造该公司的组织结构，得到如图4所示的类图。其中Company为抽象类，定义了在组织结构图上添加(Add)和删除(Delete)分公司/办事处或者部门的方法接口。类ConcreteCompany表示具体的分公司或者办事处，分公司或办事处下可以设置不同的部门。类HRDepartment和FinanceDepartment分别表示人力资源部和财务部。</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232443/o_3.png\" alt=\" \" class=\"article-img\"></p>\n<p>图3</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232443/o_4.png\" alt=\" \"><br>图4</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Company</span> </span>&#123;    <span class=\"comment\">//抽象类</span></span><br><span class=\"line\">    protected:</span><br><span class=\"line\">    string name;</span><br><span class=\"line\">    public:</span><br><span class=\"line\">    Company(string name) &#123;<span class=\"keyword\">this</span>.name=name;&#125;</span><br><span class=\"line\">    virtual <span class=\"keyword\">void</span> Add(Company* children)=<span class=\"number\">0</span>; <span class=\"comment\">//增加子公司、办事处或部门</span></span><br><span class=\"line\">    virtual <span class=\"keyword\">void</span> Delete (Company* children)=<span class=\"number\">0</span>;<span class=\"comment\">//删除子公司办事处或部门</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">    class ConcreteCompany: public Company  &#123;</span><br><span class=\"line\">    private:</span><br><span class=\"line\">    list＜ Company*＞children;     <span class=\"comment\">//存储子公司、办事处或部门</span></span><br><span class=\"line\">    public:</span><br><span class=\"line\">    ConcreteCompany(string name):Company(name) &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> Add(Company* children) &#123; children. push_back(c); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> Delete(Company* children) &#123;  children. remove(c); &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">    class HRDepartment : public Company  &#123;</span><br><span class=\"line\">    public:</span><br><span class=\"line\">    HRDepartment(string name): Company(name) &#123;&#125;    <span class=\"comment\">//其他代码省略</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">    class  FinanceDepartment: public Company  &#123;</span><br><span class=\"line\">    public:</span><br><span class=\"line\">    FinanceDepartment(string name): Company(name)  &#123;&#125;  <span class=\"comment\">//其他代码省略</span></span><br><span class=\"line\">&#125;; </span><br><span class=\"line\">    <span class=\"keyword\">void</span> main()&#123;</span><br><span class=\"line\">    ConcreteCompany *root=<span class=\"keyword\">new</span> ConcreteCompany(<span class=\"string\">\"北京总公司\"</span>);</span><br><span class=\"line\">    root-＞Add(<span class=\"keyword\">new</span> HRDepartment(<span class=\"string\">\"总公司人力资源部\"</span>));</span><br><span class=\"line\">    root-＞Add(<span class=\"keyword\">new</span> FinanceDepartment(<span class=\"string\">\"总公司财务部\"</span>));</span><br><span class=\"line\">    ConcreteCompany *comp=<span class=\"keyword\">new</span> ConcreteCompany(<span class=\"string\">\"上海分公司\"</span>);</span><br><span class=\"line\">    comp-＞Add(<span class=\"keyword\">new</span> HRDepartment(<span class=\"string\">\"上海分公司人力资源部\"</span>));</span><br><span class=\"line\">    comp-＞Add(<span class=\"keyword\">new</span> FinanceDepartment(<span class=\"string\">\"上海分公司财务部\"</span>));</span><br><span class=\"line\">    root-&gt;Add(comp)  ;</span><br><span class=\"line\">    ConcreteCompany *comp1=<span class=\"keyword\">new</span> ConcreteCompany(<span class=\"string\">\"南京办事处\"</span>);</span><br><span class=\"line\">    comp1-＞Add(<span class=\"keyword\">new</span> HRDepartment(<span class=\"string\">\"南京办事处人力资源部\"</span>));</span><br><span class=\"line\">    comp1-＞Add(<span class=\"keyword\">new</span> FinanceDepartment(<span class=\"string\">\"南京办事处财务部\"</span>));</span><br><span class=\"line\">      comp-&gt;Add(comp1)  ;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></div></figure>\n<p>1.5.3.2011A</p>\n<p>某饭店在不同的时段提供多种不同的餐饮，其菜单的结构图如图5所示。</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232443/o_5.png\" alt=\" \"><br>图5</p>\n<p>现在采用组合(Composition)模式来构造该饭店的菜单，使得饭店可以方便地在其中增加新的餐饮形式，得到如图6所示的类图。其中MenuComponent为抽象类，定义了添加(add)新菜单和打印饭店所有菜单信息(print)的方法接口。类Menu表示饭店提供的每种餐饮形式的菜单，如煎饼屋菜单、咖啡屋菜单等。每种菜单中都可以添加子菜单，例如图5中的甜点菜单。类MenuItem表示菜单中的菜式。</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232443/o_6.png\" alt=\" \"><br>图6</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MenuComponent</span>  </span>&#123;</span><br><span class=\"line\">    protected: string name;</span><br><span class=\"line\">    public:</span><br><span class=\"line\">    MenuComponent(string name)  &#123;<span class=\"keyword\">this</span>-＞name=name;  &#125;</span><br><span class=\"line\">    <span class=\"built_in\">String</span> getName()&#123;<span class=\"keyword\">return</span> name;&#125;</span><br><span class=\"line\">    virtual <span class=\"keyword\">void</span> add(MenuComponent* menuComponent)=<span class=\"number\">0</span><span class=\"comment\">//添加新菜单</span></span><br><span class=\"line\">    virtual <span class=\"keyword\">void</span> print()=<span class=\"number\">0</span>;    <span class=\"comment\">//打印菜单信息</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">    class MenuItem: public MenuComponent  &#123;</span><br><span class=\"line\">    private: double price;</span><br><span class=\"line\">    public:</span><br><span class=\"line\">    Menultem(string name, double price): MenuComponent(name)&#123;<span class=\"keyword\">this</span>-＞price=price;&#125;</span><br><span class=\"line\">    double getPrice()&#123;<span class=\"keyword\">return</span> price;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> add(MenuComponent* menuComponent)  &#123;<span class=\"keyword\">return</span>;  &#125;  <span class=\"comment\">//添加新菜单</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> print()  &#123; cout＜＜<span class=\"string\">\" \"</span>＜＜getName()＜＜<span class=\"string\">\", \"</span>＜＜getPrice()＜＜end1;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">    class Menu: public MenuComponent  &#123;</span><br><span class=\"line\">    private: list＜MenuComponent*＞ menuComponents;</span><br><span class=\"line\">    pubiic:</span><br><span class=\"line\">    Menu(string name): MenuC0mponent(name)&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> add(MenuComponent* menuComponent)    <span class=\"comment\">//添加新菜单</span></span><br><span class=\"line\">    &#123;  menuComponents.add(menuComponent); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> print()&#123;</span><br><span class=\"line\">    cout＜＜<span class=\"string\">\"\\n\"</span>＜＜getName()＜＜<span class=\"string\">\"\\n-------------------------\"</span>＜＜end1;</span><br><span class=\"line\">    std::list＜MenuC0mponent*＞::iterator iter;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(iter=menuComponents.begin(); iter!=menuComponents. end(); iter++)</span><br><span class=\"line\">    (*iter)-＞print();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> main()&#123;</span><br><span class=\"line\">    MenuComponent* allMenus=<span class=\"keyword\">new</span> Menu(<span class=\"string\">\"ALL MENUS\"</span>);</span><br><span class=\"line\">    MenuComponent* dinerMenu=<span class=\"keyword\">new</span> Menu(<span class=\"string\">\"DINER MENU\"</span>);</span><br><span class=\"line\">    …<span class=\"comment\">//创建更多的Menu对象，此处代码省略</span></span><br><span class=\"line\">    allMenus-＞add(dinerMenu);    <span class=\"comment\">//将dinerMenu添加到餐厅菜单中</span></span><br><span class=\"line\">    …<span class=\"comment\">//为餐厅增加更多的菜单，此处代码省略</span></span><br><span class=\"line\">    allMenus-＞print();    <span class=\"comment\">//打印饭店所有菜单的信息</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></div></figure>\n<p>1.6 总结</p>\n<ul>\n<li><p>组合模式定义由Leaf对象和Compostie对象组成的类结构。</p>\n</li>\n<li><p>组合模式使得客户端变得简单。</p>\n</li>\n<li><p>组合模式使得添加或删除子部件变得很容易。</p>\n</li>\n</ul>\n","prev":{"title":"设计模式之装饰器模式","link":"2018/03/25/设计模式之装饰器模式"},"next":{"title":"设计模式之策略模式","link":"2018/03/21/设计模式之策略模式"},"plink":"http://yoursite.com/2018/03/23/设计模式之组合模式/"}