{"title":"this","date":"2018-05-14T06:40:40.000Z","link":"2018/05/14/this","tags":["JavaScript"],"categories":["前端"],"updated":"2018-10-12T14:46:43.518Z","content":"<blockquote>\n<p>JavaScript的this总是指向一个对象，而具体指向哪个对象是在运行时基于函数的执行环境动态绑定的，而非函数被声明时的环境。</p>\n</blockquote>\n<h2 id=\"1-this的指向\">1.this的指向<a href=\"2018/05/14/this#1-this的指向\"></a></h2><p>关于this的指向可以分为四种情况</p>\n<p>1.作为对象的方法调用</p>\n<p>2.作为函数的实例化对象调用</p>\n<p>2.作为普通函数调用</p>\n<p>3.构造器调用</p>\n<p>4.<code>Function.prototype.call</code>或<code>Function.prototype.apply</code>调用</p>\n<h3 id=\"1-1-作为对象的方法调用\">1.1.作为对象的方法调用<a href=\"2018/05/14/this#1-1-作为对象的方法调用\"></a></h3><p><strong>当函数作为对象的方法被调用时，this指向该对象。</strong></p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj=&#123;</span><br><span class=\"line\">\tname:&quot;张三&quot;,</span><br><span class=\"line\">\tshowname:function()&#123;</span><br><span class=\"line\">\t  console.log(this.name); //张三</span><br><span class=\"line\">\t  console.log(this==obj) //true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.showname(); //函数作为对象的方法被调用</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"1-2-作为对象的构造函数-被调用\">1.2.作为对象的构造函数 被调用<a href=\"2018/05/14/this#1-2-作为对象的构造函数-被调用\"></a></h3><p><strong>当函数作为对象的构造函数被调用时，this指向实例化的对象。</strong></p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function A()&#123;</span><br><span class=\"line\">\tthis.name=&quot;张三&quot;;</span><br><span class=\"line\">\tthis.showname=function()&#123;</span><br><span class=\"line\">\t console.log(this.name);   //张三</span><br><span class=\"line\">\t console.log(this==a);   //true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a=new A();</span><br><span class=\"line\">console.log(a.showname());//函数作为对象的构造函数被调用时</span><br><span class=\"line\">console.log(a.__proto__==A.prototype)  //true</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"1-3-作为普通函数调用\">1.3.作为普通函数调用<a href=\"2018/05/14/this#1-3-作为普通函数调用\"></a></h3><p>当函数不作为对象的属性被调用时，也就是普通函数方法，this指向全局对象，在浏览器的JavaScript里，这个全局对象是window对象。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.name=&quot;张三&quot;;</span><br><span class=\"line\">function showname()&#123;</span><br><span class=\"line\">\tconsole.log(this.name); //张三</span><br><span class=\"line\">\tconsole.log(this==window);//true</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">showname();//普通的函数调用</span><br></pre></td></tr></table></div></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.name=&quot;张三&quot;;</span><br><span class=\"line\">var obj=&#123;</span><br><span class=\"line\">\tname:&quot;王五&quot;,</span><br><span class=\"line\">\tshowname:function()&#123;</span><br><span class=\"line\">\t  console.log(this.name);    //张三</span><br><span class=\"line\">      console.log(this==window);  //true</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">var showname=obj.showname;</span><br><span class=\"line\">console.log(showname());//普通的函数调用</span><br></pre></td></tr></table></div></figure>\n<p>举例：</p>\n<p>在div节点的事件函数内部，有一个局部的callback方法，callback被作为普通函数调用时，callback内部的this这时指向了window，但我们往往想让它指向该div节点。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"> &lt;div id=&quot;div1&quot;&gt;我是一个div&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\twindow.id=&quot;window&quot;;</span><br><span class=\"line\">\tdocument.getElementById(&quot;div1&quot;).onclick=function()&#123;</span><br><span class=\"line\">\t\tconsole.log(this.id); //div1</span><br><span class=\"line\">\t\tfunction callback()&#123;</span><br><span class=\"line\">\t\t    console.log(this==window);//true</span><br><span class=\"line\">\t\t\tconsole.log(this.id) //window</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcallback();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></div></figure>\n<p>最简单的解决方案是，用一个变量保存div节点的引用。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"> &lt;div id=&quot;div1&quot;&gt;我是一个div&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\twindow.id=&quot;window&quot;;</span><br><span class=\"line\">\tdocument.getElementById(&quot;div1&quot;).onclick=function()&#123;</span><br><span class=\"line\">\t\tconsole.log(this.id); //div1</span><br><span class=\"line\">\t\tvar that=this;</span><br><span class=\"line\">\t\tfunction callback()&#123;</span><br><span class=\"line\">\t\t    console.log(that==div1);//true</span><br><span class=\"line\">\t\t\tconsole.log(that.id) //div1</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcallback();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></div></figure>\n<p>在ECMAScript5的strict模式下，这种情况下的this已经被规定为不会指向全局对象，而是undefined。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function func()&#123;</span><br><span class=\"line\">\t&quot;user strict&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"1-4-构造器调用\">1.4.构造器调用<a href=\"2018/05/14/this#1-4-构造器调用\"></a></h3><p>除了内置对象，大部分JavaScript函数都可以当作构造器使用，构造器函数的外表跟普通函数一模一样，它们的区别在于被调用的方式。当用new运算符调用函数时，该函数总会返回一个对象，通常情况下，构造器里的this对象就指向返回的这个对象。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function showname()&#123;</span><br><span class=\"line\">\tthis.name=&quot;张三&quot;;</span><br><span class=\"line\">\tconsole.log(this); //showname &#123;name: &quot;张三&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var getname=new showname();</span><br><span class=\"line\">console.log(getname.name);//张三</span><br><span class=\"line\">console.log(this==window); //true</span><br></pre></td></tr></table></div></figure>\n<p>如果构造器显示地返回一个Object类型的对象，那么this的指向是显示返回的那个对象，而不是我们之前期待的this。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function showname()&#123;</span><br><span class=\"line\">\tthis.name=&quot;张三&quot;;</span><br><span class=\"line\">\treturn &#123;</span><br><span class=\"line\">\t name:&quot;李四&quot;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   console.log(this); //&#123;name: &quot;李四&quot;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var getname=new showname();</span><br><span class=\"line\">console.log(getname.name);//李四</span><br><span class=\"line\">console.log(this==window); //true</span><br></pre></td></tr></table></div></figure>\n<p>如果构造器不显式地返回任何数据，或者返回一个非对象类型的数据，this的指向就不是改变。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function showname()&#123;</span><br><span class=\"line\">\tthis.name=&quot;张三&quot;;</span><br><span class=\"line\">\treturn name:&quot;李四&quot;</span><br><span class=\"line\">\tconsole.log(this); //showname &#123;name: &quot;张三&quot;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var getname=new showname();</span><br><span class=\"line\">console.log(getname.name);//张三</span><br><span class=\"line\">console.log(this==window); //true</span><br></pre></td></tr></table></div></figure>\n<p>4.Function.prototype.call或Function.prototype.apply调用</p>\n<p>利用<code>Function.prototype.call</code>或<code>Function.prototype.apply</code>可以动态的改变传入函数的this。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj1=&#123;</span><br><span class=\"line\">\tname:&quot;张三&quot;,</span><br><span class=\"line\">\tshowname:function()&#123;</span><br><span class=\"line\">\tconsole.log(this.name);</span><br><span class=\"line\">\tconsole.log(this);</span><br><span class=\"line\">\t//第一次调用：this的指向：&#123;name: &quot;张三&quot;, showname: ƒ&#125;</span><br><span class=\"line\">\t//第二次调用：this的指向：&#123;name: &quot;李四&quot;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj2=&#123;</span><br><span class=\"line\">name:&quot;李四&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(this)//window</span><br><span class=\"line\">console.log(obj1.showname());//张三</span><br><span class=\"line\">console.log(this) //window</span><br><span class=\"line\">console.log(obj1.showname.call(obj2)); //李四</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"2-丢失的this\">2.丢失的this<a href=\"2018/05/14/this#2-丢失的this\"></a></h2><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj=&#123;</span><br><span class=\"line\">\tname:&quot;张三&quot;,</span><br><span class=\"line\">\tshowname:function()&#123;</span><br><span class=\"line\">\t  console.log(this.name);</span><br><span class=\"line\">\t  console.log(this==obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.showname(); ////函数作为对象的方法被调用(张三和true)</span><br><span class=\"line\">var showname1=obj.showname;</span><br><span class=\"line\">console.log(showname1()); //普通的函数调用(undefined和false)this-&gt;window</span><br></pre></td></tr></table></div></figure>\n<p>当调用obj.showname()时，showname()方法是作为obj对象的属性被调用的，此时的this指向obj对象。</p>\n<p>当用变量showname1来引用obj.showname，并且调用showname1()时，此时是普通函数调用方式，this是指向全局window的。</p>\n<h2 id=\"3-关于document-getElementById\">3.关于document.getElementById<a href=\"2018/05/14/this#3-关于document-getElementById\"></a></h2><p>用document.getElementById获取元素ID值时，这个方法名实在是太长了，我们可以封装一下。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.onload=function()&#123;</span><br><span class=\"line\">function getId(id)&#123;</span><br><span class=\"line\">\treturn document.getElementById(id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">   var div=getId(&quot;div&quot;); //获取到元素的ID值</span><br><span class=\"line\">   console.log(div.id); //div</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>我们是不是还可以用更加简便的方式：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var getId=document.getElementById;</span><br><span class=\"line\">var div=getId(&quot;div&quot;); //获取到元素的ID值</span><br><span class=\"line\">console.log(div.id); //报错</span><br></pre></td></tr></table></div></figure>\n<p>可以尝试在浏览器中运行一下：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"> &lt;div id=&quot;div&quot;&gt;我是一个div&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">window.onload=function()&#123;</span><br><span class=\"line\">var getId=document.getElementById;</span><br><span class=\"line\">getId(&quot;div&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></div></figure>\n<p>答案：不可以</p>\n<p>浏览器引擎的document.getElementById方法的内部实现中需要用到this，this本来被期望指向document，当getElementById方法当做document对象的属性被调用时，方法内部的this确实指向document，但当用getId来引用document.getElementById之后，再调用getId，此时就成了普通函数调用，函数内部的this指向了window，而不是document。</p>\n<p>我们可以使用apply或者call把document当做this传入getId函数，帮助<code>&quot;修正&quot;</code>this.</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.getElementById=(function(func)&#123;</span><br><span class=\"line\">\treturn function()&#123;</span><br><span class=\"line\">\t   return func.call(document,arguments);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;)(document.getElementById)</span><br><span class=\"line\"></span><br><span class=\"line\">var getId=document.getElementById;</span><br><span class=\"line\">var div=getId(&quot;div&quot;);</span><br><span class=\"line\">console.log(div.id); //div</span><br></pre></td></tr></table></div></figure>\n","prev":{"title":"call和apply","link":"2018/05/15/call和apply"},"next":{"title":"JavaScript中的原型继承","link":"2018/05/12/JavaScript中的原型继承"},"plink":"http://yoursite.com/2018/05/14/this/","toc":[{"title":"1.this的指向","id":"1-this的指向","index":"1","children":[{"title":"1.1.作为对象的方法调用","id":"1-1-作为对象的方法调用","index":"1.1"},{"title":"1.2.作为对象的构造函数 被调用","id":"1-2-作为对象的构造函数-被调用","index":"1.2"},{"title":"1.3.作为普通函数调用","id":"1-3-作为普通函数调用","index":"1.3"},{"title":"1.4.构造器调用","id":"1-4-构造器调用","index":"1.4"}]},{"title":"2.丢失的this","id":"2-丢失的this","index":"2"},{"title":"3.关于document.getElementById","id":"3-关于document-getElementById","index":"3"}]}