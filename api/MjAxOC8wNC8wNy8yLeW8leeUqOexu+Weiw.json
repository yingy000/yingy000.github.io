{"title":"2-引用类型","date":"2018-04-06T18:12:10.000Z","link":"2018/04/07/2-引用类型","tags":["JavaScript"],"categories":["前端"],"updated":"2018-10-12T14:48:37.898Z","content":"<h2 id=\"1-引用类型\">1.引用类型<a href=\"2018/04/07/2-引用类型#1-引用类型\"></a></h2><p>引用类型通常叫做类，也就是说当遇到引用值时，所处理的就是对象。</p>\n<p>对象是由new运算符加上要实例化的类的名字创建的。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var o=new Object();</span><br><span class=\"line\"></span><br><span class=\"line\">var o=new Object;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"1-1-Object类\">1.1.Object类<a href=\"2018/04/07/2-引用类型#1-1-Object类\"></a></h3><p>ECMAScript中的所有的其他类都是由Object类继承而来，Object类中的所有属性和方法都会出现在其他类中。</p>\n<p>属性：</p>\n<ul>\n<li><p><code>constructor</code>：对创建对象的函数的引用（指针），对于Object类，该指针执行原始的object()函数。</p>\n</li>\n<li><p><code>prototype</code>：对该对象的对象原型的引用。</p>\n</li>\n</ul>\n<p>方法：</p>\n<ul>\n<li><p><code>HasOwnPropertype(property)</code>：判断某个对象是否有某个特定的属性，必须用字符串指定该属性。</p>\n</li>\n<li><p><code>IsPrototypeOf(object)</code>：判断该对象是否为另一个对象的原型。</p>\n</li>\n<li><p><code>PropertyIsEnumerable(prototype)</code>：判断给定的属性是否可以用<code>for...in</code>语句进行枚举。</p>\n</li>\n<li><p><code>ToString()</code>：返回对象的原始字符串表示。</p>\n</li>\n<li><p><code>ValueOf()</code>：返回与该对象相关的原始值。</p>\n</li>\n</ul>\n<p>这些属性和方法都会被其他的类覆盖。</p>\n<h3 id=\"1-2-Boolean类\">1.2.Boolean类<a href=\"2018/04/07/2-引用类型#1-2-Boolean类\"></a></h3><p>Bollean类是Boolean原始类型的引用类型。</p>\n<p>创建一个Boolean对象，只需要传递Boolean值作为参数。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bool=new Boolean(true)</span><br></pre></td></tr></table></div></figure>\n<p>Boolean对象将覆盖Object类的<code>valueOf()</code>方法，返回原始值(true,false).</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bool=new Boolean(true)</span><br><span class=\"line\"></span><br><span class=\"line\">bool.valueOf()  //true</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"1-3-Number类\">1.3.Number类<a href=\"2018/04/07/2-引用类型#1-3-Number类\"></a></h3><p>Number类是Number原始类型的引用类型。</p>\n<p>创建一个Number对象：<code>var num=new Number(30);</code></p>\n<p>获取数字对象的Number原始值：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num=new Number(30);</span><br><span class=\"line\"></span><br><span class=\"line\">num.valueOf();   //30</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li><code>toFixed()</code>方法：返回的是具有指定位数小数的数字的字符串表示。</li>\n</ul>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num=new Number(300);</span><br><span class=\"line\"></span><br><span class=\"line\">num.toFixed(3)  //&quot;300.000&quot;</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li><code>toExponential()</code>方法：返回的是用科学计数法表示的数字的字符串的形式。</li>\n</ul>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num=new Number(300);</span><br><span class=\"line\">num.toExponential(2)   //&quot;3.00e+2&quot;</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li><code>toPrecision()</code>方法：根据最有意义的形式来返回数字的预定形式或指数形式。</li>\n</ul>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num=new Number(300);</span><br><span class=\"line\">num.toPrecision(2)    //&quot;3.0e+2&quot;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"1-4-String类\">1.4.String类<a href=\"2018/04/07/2-引用类型#1-4-String类\"></a></h3><p>String类是String原始类型的引用类型。</p>\n<p>创建一个String对象：<code>var str=new String(&quot;hello&quot;);</code></p>\n<p>String对象的<code>valueof()</code>方法和<code>toString()</code>方法都会返回String型的原始值。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str=new String(&quot;hello&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">str.valueOf()==str.toString()   //true</span><br></pre></td></tr></table></div></figure>\n<p>属性：length</p>\n<p>方法：</p>\n<ul>\n<li><code>charAt()</code>：访问字符串中的单个字符</li>\n</ul>\n<p>抽取字符串中指定位置处的字符，第一个字符的位置是0，第二个字符的位置是1，以此类推。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str=new String(&quot;hello&quot;);</span><br><span class=\"line\">str.charAt(2)   //&quot;l&quot;</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li><code>charCodeAt()</code>：访问字符串中的单个字符</li>\n</ul>\n<p>返回字符串中指定位置处的字符编码</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str=new String(&quot;hello&quot;);</span><br><span class=\"line\">str.charCodeAt(2)  //108</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li><code>concat()</code>：把一个或多个值连接到String对象的原始值上</li>\n</ul>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str=new String(&quot;hello&quot;);</span><br><span class=\"line\">var result=str.concat(&apos;world&apos;)</span><br><span class=\"line\">console.log(result);    //&quot;helloworld&quot;</span><br><span class=\"line\">console.log(str)    //String &#123;&quot;hello&quot;&#125;</span><br></pre></td></tr></table></div></figure>\n<p>通过结果我们可以发现<code>concat()</code>函数并没有改变原字符串的值，只是在操作它的副本。更常见的是我们使用<code>&#39;+&#39;</code>来连接字符串，这种形式从逻辑上表现了真正的行为。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str=new String(&quot;hello &quot;);</span><br><span class=\"line\">var result=str+&apos;world&apos;;</span><br><span class=\"line\">console.log(result);    //&quot;helloworld&quot;</span><br><span class=\"line\">console.log(str)    //String &#123;&quot;hello&quot;&#125;</span><br></pre></td></tr></table></div></figure>\n<p><code>&quot;+&quot;</code>运算符连接字符串的运算规则：</p>\n<p>如果两个运算数都是字符串，把第二个字符串连接到第一个字符串上。</p>\n<p>如果只有一个运算符是字符串，把另一个运算符转换成字符串，结果是两个字符串连接成的字符串。</p>\n<ul>\n<li><p><code>indexOf()</code>：从字符串开头(位置0)开始检索子串</p>\n</li>\n<li><p><code>lastIndexOf()</code>：从字符串结尾开始检索子串。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str=new String(&quot;helloworld&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">str.indexOf(&apos;o&apos;);  //4</span><br><span class=\"line\"></span><br><span class=\"line\">str.lastIndexOf(&apos;o&apos;)  //6</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li><code>localeCompare()</code>：对字符串进行排序。</li>\n</ul>\n<p>如果String对象按照字母顺序排在参数值的字符串之前，返回负数。(真正的返回值是由实现决定的)</p>\n<p>如果String对象等于参数中的字符串，返回0。(真正的返回值是由实现决定的)</p>\n<p>如果String对象按照字母顺序排在参数值的字符串之后，返回正数。(真正的返回值是由实现决定的)</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str=new String(&quot;hello&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">str.localeCompare(&apos;agde&apos;)  //1</span><br><span class=\"line\"></span><br><span class=\"line\">str.localeCompare(&apos;oilk&apos;)  //-1</span><br><span class=\"line\"></span><br><span class=\"line\">str.localeCompare(&apos;hello&apos;)  //0</span><br></pre></td></tr></table></div></figure>\n<p>注意：<code>localeCompare()</code>函数的返回值并不是是先定义好的，而是由实现决定的，所以最好是由if…else形式判断的调用。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str=new String(&quot;hello&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">var str1=new String(&quot;agde&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">var str2=new String(&quot;oilk&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">var str3=new String(&quot;hello&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">var result=TextString.localeCompare(&quot;hello&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">if(result&lt;0)&#123;</span><br><span class=\"line\">\tconsole.log(str1+&quot;在&quot;+str+&quot;之前&quot;);  //agde在hello之前</span><br><span class=\"line\">&#125;else if(result&gt;0)&#123;</span><br><span class=\"line\">\tconsole.log(str2+&quot;在&quot;+str+&quot;之后&quot;);  //oilk在hello之后</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">\tconsole.log(str3+&quot;等于&quot;+str);  //hello等于hellos</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li><p><code>slice()</code>：把字符串分割成一个字符串数组。</p>\n</li>\n<li><p><code>substring()</code>：从字符串中抽取一个子串。</p>\n</li>\n</ul>\n<p>这两个方法返回的都是要处理的字符串的子串，都接受一个或者两个参数。第一个参数是要获取的子串的起始位置，第二个参数是要获取子串终止前的位置。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str=new String(&quot;hello world&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">str.slice(2)   //&quot;llo world&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">str.slice(2,7)  //&quot;llo w&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">str.substring(2)  //&quot;llo world&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">str.substring(2,7)  //&quot;llo w&quot;</span><br></pre></td></tr></table></div></figure>\n<p>从上述结果中可以看出，对于正数参数slice()方法和substring()方法返回的值完全相同，那我们看一下对于负数参数，slice()方法和substring()方法是不是也能返回同样的值呢？</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str=new String(&quot;hello world&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">str.slice(-2)  //&quot;ld&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">str.substring(-2) //&quot;hello world&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">str.slice(-2,5)  //&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">str.substring(-2,5)  //&quot;hello&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">str.slice(5,-2)  //&quot; wor&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">str.substring(5,-2)  //&quot;hello&quot;</span><br></pre></td></tr></table></div></figure>\n<p>从结果中我们可以发现对于负数参数，slice()方法和substring()方法返回的值是完全的不一样呀！！！</p>\n<p>原因：对于字符串<code>&quot;hello world&quot;</code>，str.slice(-2)被转换成了str.slice(9)，而str.substring(-2)被转换成了str.substring(0)，同理str.slice(-2,5)被转化成了str.slice(9,5)，str.slice(5,-2)被转换成了str.slice(5,9)，str.substring(-2,5)和str.substring(5,-2) 被转换成了str.substring(0,5)。</p>\n<ul>\n<li><p><code>toLowerCase()</code>：将字符串中的所有字符都转换成小写的，然后返回一个副本</p>\n</li>\n<li><p><code>toUpperCase()</code>：将字符串中的所有字符都转换成大写的，然后返回一个副本</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str=new String(&quot;hggAFhhv&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">str.toLowerCase()   //&quot;hggafhhv&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">str.toUpperCase()  //&quot;HGGAFHHV&quot;。</span><br></pre></td></tr></table></div></figure>\n<p>注意：String类的所有属性和方法都可应用于String原始值上，因为它们都是伪对象。</p>\n<h3 id=\"2-instanceof运算符\">2.instanceof运算符<a href=\"2018/04/07/2-引用类型#2-instanceof运算符\"></a></h3><p>对于引用类型的值typeof运算符只能返回object，所以我们可以使用instanceof来解决这个问题。</p>\n<p>instanceof运算符用于识别正在处理的对象的类型，要求必须明确的确认对象为某种特定的类型。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ ] instanceof Array  //true</span><br><span class=\"line\"></span><br><span class=\"line\">(/[0-9]/) instanceof RegExp  //true</span><br><span class=\"line\"></span><br><span class=\"line\">var str=new String(&quot;hello&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">str instanceof String;   //true</span><br></pre></td></tr></table></div></figure>\n","prev":{"title":"2-语句","link":"2018/04/09/2-语句"},"next":{"title":"2-原始类型","link":"2018/04/05/2-原始类型"},"plink":"http://yoursite.com/2018/04/07/2-引用类型/","toc":[{"title":"1.引用类型","id":"1-引用类型","index":"1","children":[{"title":"1.1.Object类","id":"1-1-Object类","index":"1.1"},{"title":"1.2.Boolean类","id":"1-2-Boolean类","index":"1.2"},{"title":"1.3.Number类","id":"1-3-Number类","index":"1.3"},{"title":"1.4.String类","id":"1-4-String类","index":"1.4"},{"title":"2.instanceof运算符","id":"2-instanceof运算符","index":"1.5"}]}]}