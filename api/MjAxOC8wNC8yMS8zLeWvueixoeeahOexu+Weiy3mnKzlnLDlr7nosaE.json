{"title":"3-本地对象","date":"2018-04-21T07:20:30.000Z","link":"2018/04/21/3-对象的类型-本地对象","tags":["JavaScript"],"categories":["前端"],"updated":"2018-10-12T14:48:06.670Z","content":"<h2 id=\"本地对象\">本地对象<a href=\"2018/04/21/3-对象的类型-本地对象#本地对象\"></a></h2><p>ECMA-262(ECMAScript5.1的规范)把本地对象定义为<code>&quot;独立于宿主环境的ECMAScript实现提供的对象&quot;</code>。也就是说，本地对象就是ECMA-262定义的类(引用类型)。</p>\n<p>Object、Function 、Array 、String、Boolean 、Number 、Date 、RegExp 、Error 、EvalError 、RangeError </p>\n<p>、ReferenceError、SyntaxError  、TypeError 、URIError</p>\n<h3 id=\"1-Array类\">1.Array类<a href=\"2018/04/21/3-对象的类型-本地对象#1-Array类\"></a></h3><p>创建Array对象：<code>var arr=new Array()</code>;</p>\n<p>如果预先知道数组中项的个数，可以用参数传递数组的大小。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr=new Array();</span><br><span class=\"line\">arr[0]=&quot;a&quot;;</span><br><span class=\"line\">arr[1]=&quot;b&quot;;</span><br><span class=\"line\">arr[2]=&quot;c&quot;;</span><br></pre></td></tr></table></div></figure>\n<p>上述代码创建了一个数组，并定义了三个数组项<code>(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;)</code>，每增加一个数组项，数组的大小就动态地增长。</p>\n<p>如果知道数组应该存放的值，可以用参数声明这些值，创建大小与参数个数相等的Array对象。</p>\n<p><code>var arr =new Array(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);</code></p>\n<p>数组中的第一项位于位置0，第二项位于位置1，</p>\n<p>依此类推。可通过使用方括号中放置要读取的项的位置来访问特定的项。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr =new Array(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(arr[0]); // &quot;a&quot;</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"1-1-属性length可以获取数组的大小。\">1.1.属性length可以获取数组的大小。<a href=\"2018/04/21/3-对象的类型-本地对象#1-1-属性length可以获取数组的大小。\"></a></h4><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr =new Array(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(arr.length); //3</span><br></pre></td></tr></table></div></figure>\n<p>数组可以根据需要增大或减小，因此，如果要为已定义的数组增加一项，只需要把存放的值放入下一个未使用的位置即可。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr =new Array(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(arr.length); //3</span><br><span class=\"line\"></span><br><span class=\"line\">arr[3]=&quot;d&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(arr.length); //4</span><br></pre></td></tr></table></div></figure>\n<p>其实可以给任意位置新增项，不过未定义的项就都变成了null.</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr =new Array(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(arr.length); //3</span><br><span class=\"line\"></span><br><span class=\"line\">arr[15]=&quot;o&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(arr.length); //16</span><br></pre></td></tr></table></div></figure>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1255650/o_12.png\" alt=\" \" class=\"article-img\"></p>\n<p>可以使用字面量表示定义Array对象，即使用方括号([和])和逗号分隔符。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr=[1,2,3,4]</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(arr.length); //4</span><br><span class=\"line\"></span><br><span class=\"line\">arr[4]=&quot;d&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(arr.length); //5</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"1-2-toString-方法\">1.2.toString()方法<a href=\"2018/04/21/3-对象的类型-本地对象#1-2-toString-方法\"></a></h4><p>Array对象覆盖了<code>toString()</code>方法，返回特殊的字符串。该字符串是通过对每项调用<code>toString()</code>方法，然后用逗号把它们连接在一起构成的。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr=[1,2,3,4]</span><br><span class=\"line\">arr.toString();    //  &quot;1,2,3,4&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">var arr =new Array(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">arr.toString()  //&quot;a,b,c&quot;</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"1-3-join-方法：连接字符串值，将数组转换成字符串，该方法只有一个参数，就是数组项之间使用的字符串。\">1.3.join()方法：连接字符串值，将数组转换成字符串，该方法只有一个参数，就是数组项之间使用的字符串。<a href=\"2018/04/21/3-对象的类型-本地对象#1-3-join-方法：连接字符串值，将数组转换成字符串，该方法只有一个参数，就是数组项之间使用的字符串。\"></a></h4><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.join(&quot; &quot;) //&quot;1 2 3 4&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">arr.join(&quot;/&quot;) //&quot;1/2/3/4&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">arr.join(&quot;%&quot;) //&quot;1%2%3%4&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">arr.join(&quot;-&quot;)  //&quot;1-2-3-4&quot;</span><br></pre></td></tr></table></div></figure>\n<p>——————————————-插入题外话：——————————————</p>\n<h4 id=\"1-4-String类\">1.4.String类<a href=\"2018/04/21/3-对象的类型-本地对象#1-4-String类\"></a></h4><p>split()方法：把字符串分割成一个字符串数组，该方法只有一个参数，该参数就是被看作数组项之间的分隔符的字符串。</p>\n<p>如果由一个逗号分割的字符串，就可以转换成数组。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str=&quot;a,b,c,d&quot;</span><br><span class=\"line\">str.split(&quot;,&quot;)   //[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span><br><span class=\"line\">var str=&quot;1,2,3,4&quot;</span><br><span class=\"line\">str.split(&quot;,&quot;)   //[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;]</span><br></pre></td></tr></table></div></figure>\n<p>如果把空字符串声明为分隔符，那么split()方法返回的数组中的每个项是字符串的字符。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str=&quot;hellowoeld&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">str.split(&quot;&quot;)   //[&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;, &quot;w&quot;, &quot;o&quot;, &quot;e&quot;, &quot;l&quot;, &quot;d&quot;]</span><br></pre></td></tr></table></div></figure>\n<p>——————————————————回归正题————————–</p>\n<h4 id=\"1-5-concat-：把一个或多个值连接到Array对象的原始值上\">1.5.concat()：把一个或多个值连接到Array对象的原始值上<a href=\"2018/04/21/3-对象的类型-本地对象#1-5-concat-：把一个或多个值连接到Array对象的原始值上\"></a></h4><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr =new Array(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);</span><br><span class=\"line\">var result=arr.concat(&apos;d&apos;)</span><br><span class=\"line\">console.log(result);    //[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span><br><span class=\"line\">console.log(arr)    //[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br></pre></td></tr></table></div></figure>\n<p>通过结果我们可以发现concat()函数并没有改变原数组的值，只是在操作它的副本。</p>\n<h4 id=\"1-6-slice-方法：分割数组，返回具有特定项的新数组。\">1.6.slice()方法：分割数组，返回具有特定项的新数组。<a href=\"2018/04/21/3-对象的类型-本地对象#1-6-slice-方法：分割数组，返回具有特定项的新数组。\"></a></h4><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;,&apos;f&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">arr.slice(1);    //[&quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">arr.slice(2,5) //[&quot;c&quot;, &quot;d&quot;, &quot;e&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">arr.slice(2,-2)  //[&quot;c&quot;, &quot;d&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">arr.slice() //[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span><br></pre></td></tr></table></div></figure>\n<p>slice(-2)被转换成了slice(4).</p>\n<p>Array类提供的方法使数组的行为与其他数据类型的行为相似，Array对象的push()方法和pop()方法的动作就像一个栈，栈是后进先出(LIFO)结构。</p>\n<h4 id=\"1-7-push-方法：用于在Array类结尾添加一个或多个项。\">1.7.push()方法：用于在Array类结尾添加一个或多个项。<a href=\"2018/04/21/3-对象的类型-本地对象#1-7-push-方法：用于在Array类结尾添加一个或多个项。\"></a></h4><h4 id=\"1-8-pop-方法：用于删除最后一个数组项，数组的最后一项总是-length-1-。\">1.8.pop()方法：用于删除最后一个数组项，数组的最后一项总是[length-1]。<a href=\"2018/04/21/3-对象的类型-本地对象#1-8-pop-方法：用于删除最后一个数组项，数组的最后一项总是-length-1-。\"></a></h4><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr=new Array();</span><br><span class=\"line\"></span><br><span class=\"line\">arr.push(&quot;a&quot;);</span><br><span class=\"line\">arr.push(&quot;b&quot;);</span><br><span class=\"line\">arr.push(&quot;c&quot;);</span><br><span class=\"line\">arr.toString();   //&quot;a,b,c&quot;</span><br><span class=\"line\">var arr1=arr.pop();</span><br><span class=\"line\">console.log(arr1); //c</span><br><span class=\"line\">console.log(arr); //[&quot;a&quot;, &quot;b&quot;]</span><br></pre></td></tr></table></div></figure>\n<p>push()方法其实和手动添加数组项是一样的效果。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr=new Array();</span><br><span class=\"line\">arr[0]=&quot;a&quot;;</span><br><span class=\"line\">arr[1]=&quot;b&quot;;</span><br><span class=\"line\">arr[2]=&quot;c&quot;;</span><br><span class=\"line\">arr.toString();   //&quot;a,b,c&quot;</span><br><span class=\"line\">var arr1=arr.pop();</span><br><span class=\"line\">console.log(arr1); //c</span><br><span class=\"line\">console.log(arr); //[&quot;a&quot;, &quot;b&quot;]</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"1-9-shift-：删除数组中的第一个项，将其作为函数的返回值。\">1.9.shift()：删除数组中的第一个项，将其作为函数的返回值。<a href=\"2018/04/21/3-对象的类型-本地对象#1-9-shift-：删除数组中的第一个项，将其作为函数的返回值。\"></a></h4><h4 id=\"1-10-unshfit-：在数组的头部插入一个元素。\">1.10.unshfit()：在数组的头部插入一个元素。<a href=\"2018/04/21/3-对象的类型-本地对象#1-10-unshfit-：在数组的头部插入一个元素。\"></a></h4><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr=[1,2,3,4];</span><br><span class=\"line\"></span><br><span class=\"line\">var arr0=arr.shift();</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(arr0);   //1</span><br><span class=\"line\"></span><br><span class=\"line\">arr.unshift(&quot;1-1&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(arr); //[&quot;1-1&quot;, 2, 3, 4]</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(arr.toString()); //1-1,2,3,4</span><br></pre></td></tr></table></div></figure>\n<p>Array对象的push()方法和shift()方法的动作就像一个队列，栈是后进后出(LILO)结构。</p>\n<h4 id=\"1-11-reverse-颠倒数组项的顺序。\">1.11.reverse():颠倒数组项的顺序。<a href=\"2018/04/21/3-对象的类型-本地对象#1-11-reverse-颠倒数组项的顺序。\"></a></h4><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr=[1,2,3,4];</span><br><span class=\"line\"></span><br><span class=\"line\">arr.reverse();   //[4, 3, 2, 1]</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"1-12-sort-：根据数组项的值按升序为它们排序。\">1.12.sort()：根据数组项的值按升序为它们排序。<a href=\"2018/04/21/3-对象的类型-本地对象#1-12-sort-：根据数组项的值按升序为它们排序。\"></a></h4><p>var arr=[‘r’,’w’,’s’,’g’,’f’]</p>\n<p>arr.sort()   //[“f”, “g”, “r”, “s”, “w”]</p>\n<p>arr.toString()  //“f,g,r,s,w”</p>\n<p>注意：要使用<code>sort()</code>方法进行排序，首先必须要调用<code>toString()</code>方法，将所有值转换成字符串，然后根据ASCII比较数组项。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr=[2,3,45,4,5,444]</span><br><span class=\"line\"></span><br><span class=\"line\">arr.sort();  //[2, 3, 4, 444, 45, 5]</span><br><span class=\"line\"></span><br><span class=\"line\">var arr1=arr.sort();</span><br><span class=\"line\"></span><br><span class=\"line\">arr1.toString();   //&quot;2,3,4,444,45,5&quot;</span><br></pre></td></tr></table></div></figure>\n<p>在对数字2,3,45,4,5,444进行排序时，是按照字符的ASCII进行比较的，2的ASCII值为50，3的ASCII值为51，4的ASCII值为52，5的ASCII值为53。</p>\n<h4 id=\"1-13-splice-方法：插入、删除或替换一个数组的部分元素。\">1.13.splice()方法：插入、删除或替换一个数组的部分元素。<a href=\"2018/04/21/3-对象的类型-本地对象#1-13-splice-方法：插入、删除或替换一个数组的部分元素。\"></a></h4><ul>\n<li>第一种：删除</li>\n</ul>\n<p>只需要声明两个参数，就可以从数组中删除任意多个项，这两个参数是要删除的第一项的位置和要删除的项的个数。类似slice()方法。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;,&apos;f&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">arr.splice(1);    //[&quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">arr.splice(2,5) //[&quot;c&quot;, &quot;d&quot;, &quot;e&quot;]`(&quot;因为不够5个数，所以只删除了3个&quot;)`</span><br><span class=\"line\"></span><br><span class=\"line\">arr.splice(2,-2)  //[]</span><br><span class=\"line\"></span><br><span class=\"line\">arr.splice() //[]</span><br></pre></td></tr></table></div></figure>\n<p>和slice()方法不同的是splice()方法的参数不能是负数，因为splice()方法第二个参数表示的是要删除的项的个数，而不是要删除项的截止位置。</p>\n<ul>\n<li>第二种：替换而不删除</li>\n</ul>\n<p>声明三个删除就可以把数据项插入指定的位置，这三个参数是起始位置、0(要删除的项的个数)和要插入的项。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;,&apos;f&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">arr.splice(1,0,&apos;b-b&apos;)  //[]</span><br><span class=\"line\"></span><br><span class=\"line\">arr.splice(1,0,&apos;b-b&apos;,&apos;b-2b&apos;,&apos;b-3b&apos;)  //[]</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(arr);   //[&quot;a&quot;, &quot;b-b&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(arr);  //[&quot;a&quot;, &quot;b-b&quot;, &quot;b-2b&quot;, &quot;b-3b&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>第三种：替换并删除</li>\n</ul>\n<p>声明三个删除就可以把数据项插入指定的位置，这三个参数是起始位置、要删除的项的个数和要插入的项。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;,&apos;f&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">arr.splice(1,1,&apos;b-b&apos;)  //[]</span><br><span class=\"line\"></span><br><span class=\"line\">arr.splice(1,3,&apos;b-b&apos;,&apos;b-2b&apos;,&apos;b-3b&apos;)  //[]</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(arr);   //[&quot;a&quot;, &quot;b-b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(arr);  //[&quot;a&quot;, &quot;b-b&quot;, &quot;b-2b&quot;, &quot;b-3b&quot;, &quot;e&quot;, &quot;f&quot;]</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"2-Date类\">2.Date类<a href=\"2018/04/21/3-对象的类型-本地对象#2-Date类\"></a></h3><p>ECMAScript把日期存储为距离UTC时间1970年1月1日凌晨12点的毫秒数。UTC是通用时间代码，也叫做格林尼治标准时间，是所有时区的基准标准时间。以毫秒数存储时间可以确保ECMAScript免受恐怖的<code>&quot;千年虫&quot;</code>问题的侵害。</p>\n<p>创建Date对象：<code>var d=new Date()</code>;</p>\n<p>创建新Date对象时，有两种方式设置日期和时间的值。</p>\n<p>第一种方式：只声明距离1970年1月1日凌晨12点的毫秒数。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var d=new Date(0);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(d);   //Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</span><br></pre></td></tr></table></div></figure>\n<p>第二种方式：直接声明UTC()方法接受的参数</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var d=new Date(2018,6,11);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(d);  //Wed Jul 11 2018 08:00:00 GMT+0800 (中国标准时间)</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"2-1-parse-方法：\">2.1.parse()方法：<a href=\"2018/04/21/3-对象的类型-本地对象#2-1-parse-方法：\"></a></h4><p>parse()方法接受字符串为参数，把该字符串转化成日期值(毫秒表示)</p>\n<p>parse()方法接受的日期格式：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mm/dd/yyyy(7/11/2018)</span><br><span class=\"line\"></span><br><span class=\"line\">mmmm dd,yyyy(July 11,2018)</span><br></pre></td></tr></table></div></figure>\n<p>举例：使用parse()方法获取它的毫秒表示</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var d=new Date(Date.parse(&quot;July 11,2018&quot;));</span><br><span class=\"line\">console.log(d);  //Wed Jul 11 2018 00:00:00 GMT+0800 (中国标准时间)</span><br></pre></td></tr></table></div></figure>\n<p>如果传递给parse()方法的字符串不能转换成日期，该函数返回NaN。</p>\n<h4 id=\"2-2-UTC-方法\">2.2.UTC()方法<a href=\"2018/04/21/3-对象的类型-本地对象#2-2-UTC-方法\"></a></h4><p>UTC()方法的参数是日期中的年、月、日、小时、分、秒、毫秒。使用该方法时，必须声明年和月，其他参数可选。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var d=new Date(Date.UTC(2018,7,11));</span><br><span class=\"line\">console.log(d);  //Aug 11 2018 08:00:00 GMT+0800 (中国标准时间)</span><br><span class=\"line\"></span><br><span class=\"line\">var d=new Date(Date.UTC(2018,6,11));</span><br><span class=\"line\">console.log(d);  //Wed Jul 11 2018 08:00:00 GMT+0800 (中国标准时间)</span><br></pre></td></tr></table></div></figure>\n<p>注意：</p>\n<p>月份的取值范围是从0~11。也就是说0表示1月，11表示12月。</p>\n<p>参数小时，采用24小时制，而不是12小时制。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var d=new Date(2018,6,11,14,22);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(d);  //Wed Jul 11 2018 14:22:00 GMT+0800 (中国标准时间)</span><br></pre></td></tr></table></div></figure>\n<p>获取2018年7月11日下午2点22分的毫秒值。</p>\n","prev":{"title":"3-内置对象","link":"2018/04/23/3-对象的类型-内置对象"},"next":{"title":"3-宿主对象","link":"2018/04/20/3-对象的类型-宿主对象"},"plink":"http://yoursite.com/2018/04/21/3-对象的类型-本地对象/","toc":[{"title":"本地对象","id":"本地对象","index":"1","children":[{"title":"1.Array类","id":"1-Array类","index":"1.1","children":[{"title":"1.1.属性length可以获取数组的大小。","id":"1-1-属性length可以获取数组的大小。","index":"1.1.1"},{"title":"1.2.toString()方法","id":"1-2-toString-方法","index":"1.1.2"},{"title":"1.3.join()方法：连接字符串值，将数组转换成字符串，该方法只有一个参数，就是数组项之间使用的字符串。","id":"1-3-join-方法：连接字符串值，将数组转换成字符串，该方法只有一个参数，就是数组项之间使用的字符串。","index":"1.1.3"},{"title":"1.4.String类","id":"1-4-String类","index":"1.1.4"},{"title":"1.5.concat()：把一个或多个值连接到Array对象的原始值上","id":"1-5-concat-：把一个或多个值连接到Array对象的原始值上","index":"1.1.5"},{"title":"1.6.slice()方法：分割数组，返回具有特定项的新数组。","id":"1-6-slice-方法：分割数组，返回具有特定项的新数组。","index":"1.1.6"},{"title":"1.8.pop()方法：用于删除最后一个数组项，数组的最后一项总是[length-1]。","id":"1-8-pop-方法：用于删除最后一个数组项，数组的最后一项总是-length-1-。","index":"1.1.7"},{"title":"1.10.unshfit()：在数组的头部插入一个元素。","id":"1-10-unshfit-：在数组的头部插入一个元素。","index":"1.1.8"},{"title":"1.11.reverse():颠倒数组项的顺序。","id":"1-11-reverse-颠倒数组项的顺序。","index":"1.1.9"},{"title":"1.12.sort()：根据数组项的值按升序为它们排序。","id":"1-12-sort-：根据数组项的值按升序为它们排序。","index":"1.1.10"},{"title":"1.13.splice()方法：插入、删除或替换一个数组的部分元素。","id":"1-13-splice-方法：插入、删除或替换一个数组的部分元素。","index":"1.1.11"}]},{"title":"2.Date类","id":"2-Date类","index":"1.2","children":[{"title":"2.1.parse()方法：","id":"2-1-parse-方法：","index":"1.2.1"},{"title":"2.2.UTC()方法","id":"2-2-UTC-方法","index":"1.2.2"}]}]}]}