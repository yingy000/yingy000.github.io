{"title":"2-函数","date":"2018-04-02T14:12:10.000Z","link":"2018/04/02/2-函数","tags":["JavaScript"],"categories":["前端"],"updated":"2018-10-12T14:48:39.443Z","content":"<h2 id=\"函数\">函数<a href=\"2018/04/02/2-函数#函数\"></a></h2><p>函数是一组可以随时随地运行的语句，函数是由关键词function、函数名加一组参数以及置于括号中的要执行的代码声明的。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">functionName(arg0,arg1,...,argN)&#123;</span><br><span class=\"line\">\tstatements;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>函数在执行过return语句后会停止执行代码，所以return语句后的代码都不会被执行。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sum(num1,num2)&#123;</span><br><span class=\"line\">\treturn num1+num2;  //3</span><br><span class=\"line\">\tconsole.log(num1-num2); //不会被执行</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum(1,2);     //3</span><br></pre></td></tr></table></div></figure>\n<p>一个函数中可以有多个return语句</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function diff(num1,num2)&#123;</span><br><span class=\"line\">\tif(num1&gt;num2)&#123;</span><br><span class=\"line\">\treturn num1-num2;</span><br><span class=\"line\"> &#125;else&#123;</span><br><span class=\"line\">    return num2-num1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">diff(2,3);   //1</span><br></pre></td></tr></table></div></figure>\n<p>如果函数无返回值，那么可以调用没有参数的return运算符，随时退出函数。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function func(str)&#123;</span><br><span class=\"line\">  if(str==&quot;hello&quot;)&#123;</span><br><span class=\"line\">\t   return;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tconsole.log(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func(&quot;hello&quot;); //undefined</span><br><span class=\"line\"></span><br><span class=\"line\">func(&quot;ddje&quot;);  //deje</span><br></pre></td></tr></table></div></figure>\n<p>上述代码中，如果str的值等于字符串<code>&quot;hello&quot;</code>,那么就会在控制台输出undefined，如果str的值不等于字符串<code>&quot;hello&quot;</code>,那么就会在控制台输出str字符串的值。</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1255650/o_9.png\" alt=\" \" class=\"article-img\"><br><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1255650/o_10.png\" alt=\" \" class=\"article-img\"></p>\n<p>注意：如果函数无明确返回值，或调用了没有参数的return语句，那么它真正的返回值为undefined。</p>\n<h2 id=\"1-无重载\">1.无重载<a href=\"2018/04/02/2-函数#1-无重载\"></a></h2><p>ECMAScript中的函数不能重载，我们可以看一下如果用相同的函数名会发生什么情况？</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(num1,num2)&#123;</span><br><span class=\"line\">\tconsole.log(num1+num2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function add(num1,num2)&#123;</span><br><span class=\"line\">\tconsole.log(num1-num2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(2,1);  //1</span><br></pre></td></tr></table></div></figure>\n<p>从上述代码我们可以知道，可用相同的名字在同一个作用域中定义两个函数，而不会引发错误，但真正起作用的是后一个函数，后一个函数将前一个函数给覆盖了。可以使用arguments对象避开这种限制。</p>\n<h2 id=\"2-arguements对象\">2.arguements对象<a href=\"2018/04/02/2-函数#2-arguements对象\"></a></h2><p>在函数代码中，使用特殊对象<code>arguments</code>，无需明指出参数名，就能访问函数的参数。第一个参数用<code>arguments[0]</code>访问，第一个参数用<code>arguments[1]</code>访问，以此类推。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function func()&#123;</span><br><span class=\"line\">  if(arguments[0]==&quot;hello&quot;)&#123;</span><br><span class=\"line\">\t   return;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tconsole.log(arguments[0]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func(&quot;hello&quot;); //undefined</span><br><span class=\"line\"></span><br><span class=\"line\">func(&quot;ddje&quot;);  //deje</span><br></pre></td></tr></table></div></figure>\n<p>可用<code>arguements.length</code>检测传递给函数的参数个数。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function howmanyArgs()&#123;</span><br><span class=\"line\">\tconsole.log(arguments.length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">howmanyArgs();  //0</span><br><span class=\"line\">howmanyArgs(3);  //1</span><br><span class=\"line\">howmanyArgs(&quot;sde&quot;,0);  //2</span><br><span class=\"line\">howmanyArgs(&#123;a:18&#125;,[1,2],0); //3</span><br></pre></td></tr></table></div></figure>\n<p>用<code>arguements</code>对象判断传递给函数的参数个数，即可模拟函数重载。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add()&#123;</span><br><span class=\"line\">\tif(arguments.length==1)&#123;</span><br><span class=\"line\">\t console.log(arguments[0]+&quot;1&quot;);</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">\t console.log(arguments[0]+arguments[1]);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add(1);   //11</span><br><span class=\"line\"></span><br><span class=\"line\">add(1,2);  //3</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"3-Function类\">3.Function类<a href=\"2018/04/02/2-函数#3-Function类\"></a></h2><p>在ECMAScript中函数实际上是功能完整的对象，Function类可以表示任何函数。</p>\n<p>语法：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var function_name=new Function(arguments1,arguments2,......,argumentsN,function_body);</span><br></pre></td></tr></table></div></figure>\n<p>每个arguments都是一个参数，最后一个参数是函数主体，这些参数必须是字符串。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(num1,num2)&#123;</span><br><span class=\"line\">\tconsole.log(num1+num2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function add(num1,num2)&#123;</span><br><span class=\"line\">\tconsole.log(num1-num2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(2,1);  //1</span><br></pre></td></tr></table></div></figure>\n<p>上述代码，第二个函数重载了第一个函数，所以add(2,1)输出1而不是输出3。如果以下面的形式重写代码块，关于重载就更清楚了。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var add=new Function(&quot;num1&quot;,&quot;num2&quot;,&quot;console.log(num1+num2)&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">var add=new Function(&quot;num1&quot;,&quot;num2&quot;,&quot;console.log(num1-num2)&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">add(2,1);//1</span><br></pre></td></tr></table></div></figure>\n<p>很显然，add的值被改成了指向不同对象的指针。也就是说，函数名只是指向函数对象的引用值，行为就像其他指针一样。</p>\n<p>可以使两个变量指向同一个函数。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var add=new Function(&quot;num1&quot;,&quot;num2&quot;,&quot;console.log(num1+num2)&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">var alsoadd=add;</span><br><span class=\"line\"></span><br><span class=\"line\">add(2,1);//3</span><br><span class=\"line\"></span><br><span class=\"line\">alsoadd(2,1);//3</span><br></pre></td></tr></table></div></figure>\n<p>变量add被定义为函数，同时alsoadd变量被声明为指向同一个函数的指针。所以这两个变量都可以执行该函数的代码，输出相同的结果。因此，如果函数名只是指向函数的变量，那么可以把函数作为参数传递给另一个函数。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function callAnotherFunc(fn,vArg1,vArg2)&#123;</span><br><span class=\"line\">\tfn(vArg1,vArg2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var add=new Function(&quot;num1&quot;,&quot;num2&quot;,&quot;console.log(num1+num2)&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">callAnotherFunc(add,1,2);   //3</span><br></pre></td></tr></table></div></figure>\n<p>因为函数是引用类型，所以它们也有属性和方法。ECMAScript定义的length属性声明了函数期望的参数个数。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sum(num1,num2)&#123;</span><br><span class=\"line\">\tconsole.log(num1+num2); //3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum(1,2);</span><br><span class=\"line\"></span><br><span class=\"line\"> function add(num)&#123;</span><br><span class=\"line\">   console.log(num+&apos;10&apos;) //110</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add(1);</span><br><span class=\"line\">console.log(sum.length);  //2</span><br><span class=\"line\">console.log(add.length);  //1</span><br></pre></td></tr></table></div></figure>\n<p>Fnuction对象也有与所有对象共享的标准的<code>valueOf()</code>方法和<code>toString()</code>方法，这两个方法返回的都是函数的源代码。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sum(num1,num2)&#123;</span><br><span class=\"line\">\tconsole.log(num1+num2); //3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum(1,2);</span><br><span class=\"line\"></span><br><span class=\"line\"> function add(num)&#123;</span><br><span class=\"line\">   console.log(num+&apos;10&apos;) //110</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add(1);</span><br><span class=\"line\">console.log(sum.valueOf());</span><br><span class=\"line\">console.log(add.toString());</span><br></pre></td></tr></table></div></figure>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1255650/o_11.png\" alt=\" \" class=\"article-img\"></p>\n<h2 id=\"4-闭包\">4.闭包<a href=\"2018/04/02/2-函数#4-闭包\"></a></h2><p>关于闭包，会有一个另外专门的一个文章。</p>\n","prev":{"title":"2-原始类型","link":"2018/04/05/2-原始类型"},"next":{"title":"Hexo+Github搭建个人博客","link":"2018/04/01/Hexo-Github搭建个人博客"},"plink":"http://yoursite.com/2018/04/02/2-函数/","toc":[{"title":"函数","id":"函数","index":"1"},{"title":"1.无重载","id":"1-无重载","index":"2"},{"title":"2.arguements对象","id":"2-arguements对象","index":"3"},{"title":"3.Function类","id":"3-Function类","index":"4"},{"title":"4.闭包","id":"4-闭包","index":"5"}]}