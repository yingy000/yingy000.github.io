{"title":"设计模式之策略模式","date":"2018-03-21T04:12:11.000Z","link":"2018/03/21/设计模式之策略模式","tags":["设计模式"],"categories":["前端"],"updated":"2019-08-25T12:54:53.862Z","content":"<blockquote>\n<p>策略模式</p>\n</blockquote>\n<p>1.1定义：针对一组算法，将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替换。策略模式使得算法可以在不影响到客户端的情况下发生变化。</p>\n<p>1.2结构图</p>\n<p><img src=\"https://www.cnblogs.com/images/cnblogs_com/cliy-10/1232443/o_15.png\" alt=\" \"><br>图15</p>\n<ul>\n<li>环境(Context)角色：持有一个Strategy的引用。</li>\n<li>抽象策略(Strategy)角色：这是一个抽象角色，通常由一个接口或抽象类实现。此角色给出所有的具体策略类所需的接口。</li>\n<li>具体策略(ConcreteStrategy)角色：包装了相关的算法或行为。</li>\n</ul>\n<p>①　策略模式是对算法的包装，是把使用算法的责任和算法本身分割开来，委派给不同的对象管理。策略模式通常把一个系列的算法包装到一系列的策略类里面，作为一个抽象策略类的子类。用一句话来说，就是：“准备一组算法，并将每一个算法封装起来，使得它们可以互换”</p>\n<p>②　策略模式的重心不是如何实现算法，而是如何组织、调用这些算法，从而让程序结构更灵活，具有更好的维护性和扩展性。</p>\n<p>③　策略模式一个很大的特点就是各个策略算法的平等性。对于一系列具体的策略算法，大家的地位是完全一样的，正因为这个平等性，才能实现算法之间可以相互替换。所有的策略算法在实现上也是相互独立的，相互之间是没有依赖的。策略算法是相同行为的不同实现。</p>\n<p><img src=\"https://www.cnblogs.com/images/cnblogs_com/cliy-10/1232443/o_16.png\" alt=\" \"><br>图16 </p>\n<p>④　算法的平等性强调的是可替换性，大家是同一行为的不同描述或实现，运行期间，策略模式在每一个时刻只能使用一个具体的策略实现对象，虽然可以动态地在不同的策略实现中切换，但是同时只能使用一个。</p>\n<p>⑤　经常见到的是，所有的具体策略类都有一些公有的行为。这时候，就应当把这些公有的行为放到共同的抽象策略角色Strategy类里面。当然这时候抽象策略角色必须要用Java抽象类实现，而不能使用接口，典型的将代码向继承等级结构的上方集中的标准做法。</p>\n<p><img src=\"https://www.cnblogs.com/images/cnblogs_com/cliy-10/1232443/o_17.png\" alt=\" \"><br>图17</p>\n<p>⑥　策略模式仅仅封装算法，提供新的算法插入到已有系统中，以及老算法从系统中“退休”的方法，策略模式并不决定在何时使用何种算法。在什么情况下使用什么算法是由用户决定的。</p>\n<p>1.3适用场景</p>\n<ul>\n<li>多个类只区别在表现行为不同，可以使用Strategy模式在运行时动态选择具体要执行的行为</li>\n<li>需要在不同的情况下使用不同的策略（算法）,或者策略（算法）还可能在未来用其他方式来实现</li>\n<li>对客户隐藏具体策略（算法）的实现细节，彼此完全独立。</li>\n</ul>\n<p>1.1优缺点</p>\n<ul>\n<li>策略模式提供了管理相关的算法族的办法。策略类的等级结构定义了一个算法或行为族。恰当使用继承可以把公共的代码移到父类里面，从而避免代码重复。</li>\n<li>使用策略模式可以避免使用多重条件(if-else)语句。多重条件语句不易维护，它把采取哪一种算法或采取哪一种行为的逻辑与算法或行为的逻辑混合在一起，统统列在一个多重条件语句里面，比使用继承的办法还要原始和落后。</li>\n<li>（缺点）客户端必须知道所有的策略类，并自行决定使用哪一个策略类。这就意味着客户端必须理解这些算法的区别，以便适时选择恰当的算法类。换言之，策略模式只适用于客户端知道算法或行为的情况。</li>\n<li>（缺点）由于策略模式把每个具体的策略实现都单独封装成为类，如果备选的策略很多的话，那么对象的数目就会很可观。</li>\n</ul>\n<p>1.5实例<br>    描述：假设现在要设计一个贩卖各类书籍的电子商务网站的购物车系统。一个最简单的情况就是把所有货品的单价乘上数量，但是实际情况肯定比这要复杂。比如，本网站可能对所有的高级会员提供每本20%的促销折扣；对中级会员提供每本10%的促销折扣；对初级会员没有折扣。根据描述，折扣是根据以下的几个算法中的一个进行的：<br>算法一：对初级会员没有折扣。<br>算法二：对中级会员提供10%的促销折扣。<br>算法三：对高级会员提供20%的促销折扣。</p>\n<p>1.5.1.2010A</p>\n<p>某软件公司现欲开发一款飞机飞行模拟系统，该系统主要模拟不同种类飞机的飞行特征与起飞特征。需要模拟的飞机种类及其特征如表2所示.<br> <img src=\"https://www.cnblogs.com/images/cnblogs_com/cliy-10/1232443/o_%e8%a1%a82.png\" alt=\" \"></p>\n<p>  为支持将来模拟更多种类的飞机，采用策略设计模式(strategy)设计的类图如图18所示。 在图中，AirCraft为抽象类，描述了抽象的飞机，而类Helicopter、AirPlane、Fighter和Harrier分别描述具体的飞机种类，方法fly31和takeOff31分别表示不同飞机都具有飞行特征和起飞特征；类FlyBehavior与TakeOffBehavior为抽象类，分别用于表示抽象的飞行行为与起飞行为；类SubSonicFly与SuperSonicFly分别描述亚音速飞行和超音速飞行的行为；类VerticalTakeOff与LongDistanceTakeOff分别描述垂直起飞与长距离起飞的行为。</p>\n<p><img src=\"https://www.cnblogs.com/images/cnblogs_com/cliy-10/1232443/o_18.png\" alt=\" \"><br>图18</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">FlyBehaVior</span>  </span>&#123; </span><br><span class=\"line\">    public: virtual <span class=\"keyword\">void</span> fly()=<span class=\"number\">0</span>; </span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\">    class  SubSonicFly: public FlyBehaVior&#123; </span><br><span class=\"line\">    public: <span class=\"keyword\">void</span> fly()&#123;cout＜＜<span class=\"string\">\"亚音速飞行!\"</span>＜＜endl;) </span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\">    class  SupersonicFly: public FlyBehaVior&#123; </span><br><span class=\"line\">    public: <span class=\"keyword\">void</span> fly()&#123;cout＜＜<span class=\"string\">\"超音速飞行!\"</span>＜＜endl;) </span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TakeOffBehavior</span></span>&#123; </span><br><span class=\"line\">    publie: virtual <span class=\"keyword\">void</span> takeOff()=<span class=\"number\">0</span>; </span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\">    class VerticalTakeOff: public TakeOffBehavior&#123; </span><br><span class=\"line\">    public: <span class=\"keyword\">void</span> takeOff()&#123;cout＜＜<span class=\"string\">\"垂直起飞!\"</span>＜＜endl<span class=\"string\">'    &#125; </span></span><br><span class=\"line\"><span class=\"string\">    &#125;; </span></span><br><span class=\"line\"><span class=\"string\">    class LongDistanceTakeOff: public TakeOffBehavior&#123; </span></span><br><span class=\"line\"><span class=\"string\">    public: void takeOff()&#123;cout＜＜\"长距离起飞!\"＜＜endl;&#125; </span></span><br><span class=\"line\"><span class=\"string\">    &#125;; </span></span><br><span class=\"line\"><span class=\"string\">    class AirCraft&#123; </span></span><br><span class=\"line\"><span class=\"string\">    protected: </span></span><br><span class=\"line\"><span class=\"string\">     FlyBehaVior *flyBehaVior; </span></span><br><span class=\"line\"><span class=\"string\">     TakeOffBehavior *takeoffBehavior;</span></span><br><span class=\"line\"><span class=\"string\">    public: </span></span><br><span class=\"line\"><span class=\"string\">    void fly()&#123; flyBehaVior-&gt;fly(); &#125; </span></span><br><span class=\"line\"><span class=\"string\">    void takeoff()  &#123;takeoffBehavior-&gt; takeoff();  &#125;; </span></span><br><span class=\"line\"><span class=\"string\">    &#125;; </span></span><br><span class=\"line\"><span class=\"string\">    class  Helicopter:  public AirCraft  &#123; </span></span><br><span class=\"line\"><span class=\"string\">    public: </span></span><br><span class=\"line\"><span class=\"string\">    Helicopter ()&#123; </span></span><br><span class=\"line\"><span class=\"string\">    flyBehavior=new   SubSonicFly() ; </span></span><br><span class=\"line\"><span class=\"string\">    takeoffBehavior=new  VerticalTakeOff() ; </span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\"> &lt;!--C++中的\"~\"符号代表析构函数，--&gt;</span></span><br><span class=\"line\"><span class=\"string\">    ~Helicopter&#123; </span></span><br><span class=\"line\"><span class=\"string\">    if(!flyBehaVior)  delete  flyBehaVior(); </span></span><br><span class=\"line\"><span class=\"string\">    if(!takeoffBehavior)  delete takeoffBehaVior; </span></span><br><span class=\"line\"><span class=\"string\">    &#125; </span></span><br><span class=\"line\"><span class=\"string\">    &#125;;</span></span><br></pre></td></tr></table></div></figure>\n<p>1.5.2.2015</p>\n<p>某大型购物中心欲开发一套收银软件，要求其能够支持购物中心在不同时期推出的各种促销活动，如打折、返利（例如，满3 00返1 00）等等。现采用策略( Strategy)模式实现该要求，得到如图19所示的类图。</p>\n<p><img src=\"https://www.cnblogs.com/images/cnblogs_com/cliy-10/1232443/o_19.png\" alt=\" \"><br>图19</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt; </span><br><span class=\"line\">Using namespace std; </span><br><span class=\"line\">enum TYPE&#123;NORMAL, CASH_DISCOUNT, CASH_RETURN&#125;; </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CashSuper</span></span>&#123; </span><br><span class=\"line\">public:  virtual double acceptCash(double money)=<span class=\"number\">0</span>；</span><br><span class=\"line\">&#125;; </span><br><span class=\"line\">class CashNormal : public CashSuper &#123; </span><br><span class=\"line\"> ／／正常收费子类</span><br><span class=\"line\"> public: </span><br><span class=\"line\">    double acceptCash(double money) </span><br><span class=\"line\">&#123;     retum  money;    &#125; </span><br><span class=\"line\">&#125;;   </span><br><span class=\"line\">class CashDiscount : public CashSuper &#123; </span><br><span class=\"line\"> private: </span><br><span class=\"line\">    double  moneyDiscount;     <span class=\"comment\">//  折扣率</span></span><br><span class=\"line\">public: </span><br><span class=\"line\">   CashDiscount(double  discount) &#123;    moneyDiscount= discount;    &#125; </span><br><span class=\"line\">   double acceptCash(double money) &#123; retum money * moneyDiscount;    &#125; </span><br><span class=\"line\">&#125;; </span><br><span class=\"line\">class CashRetum : public CashSuper &#123; </span><br><span class=\"line\"><span class=\"comment\">// 满额返利</span></span><br><span class=\"line\">private:          </span><br><span class=\"line\">    double moneyCondition;      <span class=\"comment\">// 满额数额</span></span><br><span class=\"line\">    double moneyReturn;       <span class=\"comment\">// 返利数额</span></span><br><span class=\"line\">public: </span><br><span class=\"line\">  CashRetnm(double;m otieyCondition, double moneyReturn) &#123; </span><br><span class=\"line\">     <span class=\"keyword\">this</span>=&gt;moneyCondition - moneyCondition; </span><br><span class=\"line\">     <span class=\"keyword\">this</span>=&gt;m oneyRetumF moneyRetum; </span><br><span class=\"line\">     &#125;                                                                 . </span><br><span class=\"line\">   double acceptCash(double money) &#123; </span><br><span class=\"line\">     double result = money; </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(money＞=moneyCondition) </span><br><span class=\"line\">        result = money - (int)(money moneyCondition ) * moneyRetum; </span><br><span class=\"line\">     Return  result  </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CashContext</span> </span>&#123; </span><br><span class=\"line\">private: </span><br><span class=\"line\">   CashSuper *cs; </span><br><span class=\"line\">public: </span><br><span class=\"line\">   CashContext(inttype) &#123; </span><br><span class=\"line\">     <span class=\"keyword\">switch</span>(type) &#123; </span><br><span class=\"line\">           <span class=\"keyword\">case</span> NORMAL:           ／／正常收费</span><br><span class=\"line\">                    cs-&gt;<span class=\"keyword\">new</span> CashNormal();</span><br><span class=\"line\">            <span class=\"keyword\">case</span> RETURN       ／／满<span class=\"number\">300</span>返<span class=\"number\">100</span>                     </span><br><span class=\"line\">                    cs-&gt;<span class=\"keyword\">new</span> CashRetum();  </span><br><span class=\"line\">           Break; </span><br><span class=\"line\">       <span class=\"keyword\">case</span> </span><br><span class=\"line\">CASH </span><br><span class=\"line\">DISCOUNT:     </span><br><span class=\"line\">／／打八折</span><br><span class=\"line\">        cs-&gt;<span class=\"keyword\">new</span> CashDiscount();       </span><br><span class=\"line\"><span class=\"keyword\">break</span>; </span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">double GetResult(double money) &#123; </span><br><span class=\"line\"><span class=\"keyword\">return</span> cs-&gt;acceptCash(money);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;；</span><br></pre></td></tr></table></div></figure>","prev":{"title":"设计模式之组合模式","link":"2018/03/23/设计模式之组合模式"},"next":{"title":"设计模式之生成器模式","link":"2018/03/19/设计模式之生成器模式"},"plink":"http://yoursite.com/2018/03/21/设计模式之策略模式/"}