{"title":"HTML5新增APT","date":"2018-07-27T02:47:01.000Z","link":"2018/07/27/HTML5新增API","tags":["HTML5"],"categories":["前端"],"updated":"2018-10-12T14:47:23.807Z","content":"<h2 id=\"优点：\">优点：<a href=\"2018/07/27/HTML5新增API#优点：\"></a></h2><ul>\n<li><p>极简的DOM操作</p>\n</li>\n<li><p>本地数据缓存：不管是取数据，还是存数据、还是删除数据也好都十分的简单，只需要调用相对应的方法即可。</p>\n</li>\n</ul>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232449/o_1.png\" alt=\" \" class=\"article-img\"></p>\n<ul>\n<li>提升了浏览器的存储性能</li>\n</ul>\n<p>通常来讲，再更老版本的浏览器，如果用户想要给本地写数据是非常困难的，可以通过cookie来操作，相对比localStorage来说，cookie的用法看起来就太繁琐了。</p>\n<ul>\n<li>跟硬件相关的特性</li>\n</ul>\n<p>可以通过Google的服务获取我们当前设备所在的地理位置</p>\n<p>可以获得从打开页面开始那一刻页面性能的监控：<code>window.performance.timing</code>,后面我们在具体讲解。</p>\n<ul>\n<li>HTML5 API更好的完成性能上的提升</li>\n</ul>\n<p><code>Web worker</code>异步请求、离线缓存、应用程序缓存为应用带来三个优势：</p>\n<p><strong>离线浏览 - 用户可在应用离线时使用它们</strong></p>\n<p><strong>速度 - 已缓存资源加载得更快</strong></p>\n<p><strong>减少服务器负载 - 浏览器将只从服务器下载更新过或更改过的资源。</strong></p>\n<h2 id=\"1-DOM操作\">1.DOM操作<a href=\"2018/07/27/HTML5新增API#1-DOM操作\"></a></h2><p>使用原生JavaScript获得DOM节点对象的时候有以下几种方式：</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"#elementId\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByName(<span class=\"string\">\"elementName\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"tagName\"</span>);</span><br></pre></td></tr></table></div></figure>\n<p>我们虽然可以使用上面的几种方式方便获得元素，但也存在着很大的缺点，比如根据Class来获取元素，如果有需要，我们要么自己写<code>getElementsByClassName()</code>方法，要么使用其他的JS类库，使用类库也存在着问题：一是加载类库会影响网站性能，二是还必须学习类库的相关知识。现在HTML5给我们提供了一些API，可以很方便的解决这个问题。</p>\n<h3 id=\"1-1-document-querySelector-quot-selector-quot\">1.1.<code>document.querySelector(&quot;selector&quot;)</code><a href=\"2018/07/27/HTML5新增API#1-1-document-querySelector-quot-selector-quot\"></a></h3><ul>\n<li><p>根据css选择器返回第一个匹配的元素，如果没有匹配返回null；</p>\n</li>\n<li><p>浏览器支持: Chrome 4.0+, FireFox 3.5+, Safari 3.2+, Opera 10.1+, IE 8+</p>\n</li>\n</ul>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">\t&lt;head&gt;</span><br><span class=\"line\">\t\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">\t\t&lt;title&gt;Document&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;/</span>head&gt;</span><br><span class=\"line\">\t&lt;body&gt;</span><br><span class=\"line\">\t\t&lt;ul&gt;</span><br><span class=\"line\">\t\t\t&lt;li&gt;<span class=\"number\">1</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t&lt;li&gt;2&lt;/</span>li&gt;</span><br><span class=\"line\">\t\t\t&lt;li&gt;<span class=\"number\">3</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t&lt;li&gt;4&lt;/</span>li&gt;</span><br><span class=\"line\">\t\t&lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\tvar selector = document.querySelector('li');</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\tconsole.log(selector.innerHTML);</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&lt;/</span>script&gt;</span><br><span class=\"line\">\t&lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>html&gt;</span><br></pre></td></tr></table></div></figure>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232449/o_4.png\" alt=\" \" class=\"article-img\"></p>\n<ul>\n<li><code>querySelector</code>也支持多个选择器</li>\n</ul>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">\t&lt;head&gt;</span><br><span class=\"line\">\t\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">\t\t&lt;title&gt;Document&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;/</span>head&gt;</span><br><span class=\"line\">\t&lt;body&gt;</span><br><span class=\"line\">\t\t&lt;ul <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"header\"</span>&gt;</span><br><span class=\"line\">\t\t\t&lt;li&gt;<span class=\"number\">1</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t&lt;li&gt;2&lt;/</span>li&gt;</span><br><span class=\"line\">\t\t\t&lt;li&gt;<span class=\"number\">3</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t&lt;li&gt;4&lt;/</span>li&gt;</span><br><span class=\"line\">\t\t&lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t var selector = document.querySelector('.header li');</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t console.log(selector.innerHTML);</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&lt;/</span>script&gt;</span><br><span class=\"line\">\t&lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>html&gt;</span><br></pre></td></tr></table></div></figure>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232449/o_4.png\" alt=\" \" class=\"article-img\"></p>\n<p>可以看到<code>querySelector</code>非常的方便，类似jquery的选择器，也不存在兼容性问题。</p>\n<h3 id=\"1-2-document-querySelectorAll-quot-selector-quot\">1.2.<code>document.querySelectorAll(&quot;selector&quot;)</code>;<a href=\"2018/07/27/HTML5新增API#1-2-document-querySelectorAll-quot-selector-quot\"></a></h3><ul>\n<li><p><code>querySelectorAll</code>和<code>querySelector</code>作用一样的，只是<code>querySelectorAll</code>返回的是元素数组，<code>querySelector</code>返回的是一个元素。如果<code>querySelectorAll</code>没有匹配的内容返回的是一个空数组。</p>\n</li>\n<li><p>浏览器支持： Chrome 4.0+, FireFox 3.5+, Safari 3.2+, Opera 10.1+, IE 8+</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">\t&lt;head&gt;</span><br><span class=\"line\">\t\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">\t\t&lt;title&gt;Document&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;/</span>head&gt;</span><br><span class=\"line\">\t&lt;body&gt;</span><br><span class=\"line\">\t\t&lt;ul <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"header\"</span>&gt;</span><br><span class=\"line\">\t\t\t&lt;li&gt;<span class=\"number\">1</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t&lt;li&gt;2&lt;/</span>li&gt;</span><br><span class=\"line\">\t\t\t&lt;li&gt;<span class=\"number\">3</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t&lt;li&gt;4&lt;/</span>li&gt;</span><br><span class=\"line\">\t\t&lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t  &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    var selector = document.querySelectorAll('.header li');</span></span><br><span class=\"line\"><span class=\"regexp\">\tconsole.log(console.log(selector););</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&lt;/</span>script&gt;</span><br><span class=\"line\">\t&lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>html&gt;</span><br></pre></td></tr></table></div></figure>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232449/o_5.png\" alt=\" \" class=\"article-img\"></p>\n<h3 id=\"1-3-document-getElementsByClassName-quot-selector-quot\">1.3.<code>document.getElementsByClassName(&quot;selector&quot;)</code><a href=\"2018/07/27/HTML5新增API#1-3-document-getElementsByClassName-quot-selector-quot\"></a></h3><ul>\n<li><p><code>getElementsByClassName</code>是一个类选择器，返回值是一个元素数组。</p>\n</li>\n<li><p>浏览器支持： Chrome 4.0+, FireFox 3.5+, Safari 3.2+, Opera 10.1+, IE 8+</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">\t&lt;head&gt;</span><br><span class=\"line\">\t\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">\t\t&lt;title&gt;Document&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;/</span>head&gt;</span><br><span class=\"line\">\t&lt;body&gt;</span><br><span class=\"line\">\t\t&lt;ul <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"header\"</span>&gt;</span><br><span class=\"line\">\t\t\t&lt;li&gt;<span class=\"number\">1</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t&lt;li&gt;2&lt;/</span>li&gt;</span><br><span class=\"line\">\t\t\t&lt;li&gt;<span class=\"number\">3</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t&lt;li&gt;4&lt;/</span>li&gt;</span><br><span class=\"line\">\t\t&lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t  var selector = document.getElementsByClassName('header');</span></span><br><span class=\"line\"><span class=\"regexp\">\t console.log(selector[0].innerHTML);</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&lt;/</span>script&gt;</span><br><span class=\"line\">\t&lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>html&gt;</span><br></pre></td></tr></table></div></figure>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232449/o_6.png\" alt=\" \" class=\"article-img\"></p>\n<h2 id=\"2-classList属性\">2.<code>classList</code>属性<a href=\"2018/07/27/HTML5新增API#2-classList属性\"></a></h2><p>classList属性没有出现之前JavaScript操作class类选择器使用的是<code>className()</code>，可以看下DOM对象的添加样式、删除样式、切换样式。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//javascript只能用className()这样一个方法来判断存不存在样式、</span></span><br><span class=\"line\">添加样式、删除样式、切换样式。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`javascript</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">window.onload=function()&#123;</span></span><br><span class=\"line\"><span class=\"string\">//判断有没有样式</span></span><br><span class=\"line\"><span class=\"string\">function hasClass(obj,cls)&#123;</span></span><br><span class=\"line\"><span class=\"string\">    return obj.className.match(new RegExp('(\\\\s|^)'+cls+'(\\\\s|$)'));</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">//添加样式</span></span><br><span class=\"line\"><span class=\"string\">function addClass(obj,cls)&#123;</span></span><br><span class=\"line\"><span class=\"string\">    if(!hasClass(obj,cls))&#123;</span></span><br><span class=\"line\"><span class=\"string\">        obj.className+=\" \"+cls</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">//删除样式</span></span><br><span class=\"line\"><span class=\"string\">function removeClass(obj,cls)&#123;</span></span><br><span class=\"line\"><span class=\"string\">    if(hasClass(obj,cls))&#123;</span></span><br><span class=\"line\"><span class=\"string\">        var reg=new RegExp('(\\\\s|^)'+cls+'(\\\\s|$)');</span></span><br><span class=\"line\"><span class=\"string\">        obj.className=obj.className.replace(reg,' ');</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">//切换样式</span></span><br><span class=\"line\"><span class=\"string\">function toggleClass(obj,cls)&#123;</span></span><br><span class=\"line\"><span class=\"string\">    if(hasClass(obj,cls))&#123;</span></span><br><span class=\"line\"><span class=\"string\">        removeClass(obj,cls);</span></span><br><span class=\"line\"><span class=\"string\">    &#125;else&#123;</span></span><br><span class=\"line\"><span class=\"string\">        addClass(obj,cls);</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></div></figure>\n<h3 id=\"2-1-classList属性\">2.1.<code>classList</code>属性<a href=\"2018/07/27/HTML5新增API#2-1-classList属性\"></a></h3><p><code>classList</code>是HTML5新的属性，只不过现在浏览器支持的不是很好,我们使用<a href=\"https://caniuse.com/\" target=\"_blank\" rel=\"noopener\">caniuse</a>网站检测一下：</p>\n<p>中文：<br><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232449/o_7.png\" alt=\" \"></p>\n<p>英文：<br><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232449/o_7.1.png\" alt=\" \"></p>\n<p>判断是否是IE11+以及其他现代浏览器:</p>\n<p><code>document.body.classList</code>是否为<code>undefined</code></p>\n<p>我们把上面的实例修改为classlist来操作：</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;ul <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"class1 class2 class3 \"</span>&gt;</span><br><span class=\"line\">        &lt;li&gt;<span class=\"number\">1</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;li&gt;2&lt;/</span>li&gt;</span><br><span class=\"line\">        &lt;li&gt;<span class=\"number\">3</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;li&gt;4&lt;/</span>li&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    var ul = document.getElementsByTagName(\"ul\")[0];</span></span><br><span class=\"line\"><span class=\"regexp\">    console.log(ul.classList);</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>script&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>html&gt;</span><br></pre></td></tr></table></div></figure>\n<p>下面是Chorme浏览器下面打印的结果：</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232449/o_8.png\" alt=\" \" class=\"article-img\"></p>\n<p>可见其直接暴露的API有：</p>\n<ul>\n<li><p><code>length</code>属性，表示元素类名的个数，只读</p>\n</li>\n<li><p><code>item()</code>支持一个参数，为类名的索引，返回对应的类名，例如上例：</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul.classList.item(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//结果是：\"class1\".</span></span><br></pre></td></tr></table></div></figure>\n<p>如果索引超出范围，例如：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul.classList.item(3);</span><br><span class=\"line\"></span><br><span class=\"line\">结果是：null.</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li><code>add()</code>：支持一个类名字符串参数。表示往类名列表中新增一个类名；如果之前类名存在，则添加忽略。例如：</li>\n</ul>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul.classList.add(<span class=\"string\">\"class1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">ul.classList.length ;   <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></div></figure>\n<p><code>add()</code>方法执行的返回值是<code>undefined</code></p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232449/o_9.png\" alt=\" \" class=\"article-img\"></p>\n<p> 因此，classList的add()方法是无法级联的，remove()方法也是无法级联的。</p>\n<ul>\n<li><code>remove()</code>：支持一个类名字符串参数。表示往类名列表中移除该类名。例如：</li>\n</ul>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul.classList.remove(<span class=\"string\">\"class1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">ul.classList.length    <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></div></figure>\n<p>类似于jQuery对象中的<code>removeClass()</code>方法，然后者返回包装器对象本身，<code>removeClass()</code>方法可级联；</p>\n<p><code>remove()</code>方法返回undefined，索引<code>remove()</code>方法是无法级联的。</p>\n<ul>\n<li><p><code>toggle()</code>：支持一个类名字符串参数。无则加勉，有则移除之意。若类名列表中有此类名，移除之，并返回false; 如果没有，则添加该类名，并返回true.</p>\n</li>\n<li><p><code>contains()</code>：支持一个类名字符串参数。表示往类名列表中是否包含该类名。有点对应jQuery中的hasClass方法。如果包含，则返回true, 不包含，则false。</p>\n</li>\n</ul>\n<p>举例：</p>\n<p><code>ul.classList.contains(&quot;class1&quot;);  // false 因为&quot;class1&quot;上面remove掉了</code></p>\n<h2 id=\"3-全屏\">3.全屏<a href=\"2018/07/27/HTML5新增API#3-全屏\"></a></h2><p>为了方便用户的阅读或者观看视频，很多的网站实现了全屏功能。<code>FullScreen API</code> 是一个新的JavaScript API,简单而又强大.<code>FullScreen</code> 让我们可以通过编程的方式来向用户请求全屏显示,如果交互完成,随时可以退出全屏状态.</p>\n<p>FullScreen是HTML5的一个新特征，现在主流的浏览器已经支持,我们可以使用<a href=\"https://caniuse.com/\" target=\"_blank\" rel=\"noopener\">caniuse</a>网站再检测一下：</p>\n<p>中文：<br><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232449/o_10.png\" alt=\" \"></p>\n<p>英文：<br><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232449/o_10.1.png\" alt=\" \"></p>\n<h3 id=\"3-1-FullScreen-API接口\">3.1.<code>FullScreen API</code>接口<a href=\"2018/07/27/HTML5新增API#3-1-FullScreen-API接口\"></a></h3><p>属性：</p>\n<ul>\n<li><p><code>fullscreenElement</code>：该属性返回当前处于全屏模式的DOM元素。</p>\n</li>\n<li><p><code>fullscreenEnabled</code>：该属性返回当前<code>document</code>是否进入了可以请求全屏模式的状态。</p>\n</li>\n</ul>\n<p>方法：</p>\n<ul>\n<li><p><code>requestFullscreen()</code>：请求进入全屏模式。</p>\n</li>\n<li><p><code>exitFullscreen()</code>：退出全屏模式。</p>\n</li>\n</ul>\n<p>事件：</p>\n<ul>\n<li><p><code>fullscreenchange</code>：进入/退出全屏模式切换时会触发。</p>\n</li>\n<li><p><code>fullscreenerror</code>：进入/退出全屏模式失败时会触发。</p>\n</li>\n</ul>\n<p>由于各个浏览器对<code>FullScreen</code>接口实现的方式不一样，主要是因为浏览器内核的差别，所以在使用的时候要考虑浏览器的兼容性。</p>\n<h3 id=\"3-1-进入全屏\">3.1.进入全屏<a href=\"2018/07/27/HTML5新增API#3-1-进入全屏\"></a></h3><figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">\t&lt;head&gt;</span><br><span class=\"line\">\t\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">\t\t&lt;title&gt;Document&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;/</span>head&gt;</span><br><span class=\"line\">\t&lt;body&gt;</span><br><span class=\"line\">\t\t    &lt;button id=<span class=\"string\">\"btn\"</span> onclick=<span class=\"string\">\"launchFullScreen()\"</span>&gt;我是全屏&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t/</span><span class=\"regexp\">/ 找到支持的方法, 使用需要全屏的 element 调用</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\tfunction launchFullScreen(element) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\tvar element = element || document.documentElement;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\tif(element.requestFullscreen) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t\telement.requestFullscreen();</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t&#125; else if(element.mozRequestFullScreen) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t\telement.mozRequestFullScreen();</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t&#125; else if(element.webkitRequestFullscreen) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t\telement.webkitRequestFullscreen();</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t&#125; else if(element.msRequestFullscreen) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t\telement.msRequestFullscreen();</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&lt;/</span>script&gt;</span><br><span class=\"line\">\t&lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>html&gt;</span><br></pre></td></tr></table></div></figure>\n<p>有的浏览器在进入全屏的时候会提示用户是否进行全屏，如果用户取消则全屏失效。同意浏览器的工具栏以及浏览器其它的组件都会隐藏起来，使document的高和宽横跨整个屏幕。</p>\n<p>一般浏览器在进入全屏的时候提供用户按esc键可以退出全屏，即使这样有的时候我们还是需要给用户提供退出全屏的操作。</p>\n<h3 id=\"3-2-退出全屏\">3.2.退出全屏<a href=\"2018/07/27/HTML5新增API#3-2-退出全屏\"></a></h3><figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;script&gt;</span><br><span class=\"line\">\t<span class=\"comment\">// 退出 fullscreen</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">exitFullscreen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.exitFullscreen) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">document</span>.exitFullscreen();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.mozExitFullScreen) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">document</span>.mozExitFullScreen();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.webkitExitFullscreen) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">document</span>.webkitExitFullscreen();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p>退出全屏的代码很简单，我们只需要考虑浏览器的前缀就可以了。</p>\n<p>注意: <code>exitFullscreen</code>只能通过<code>document</code>对象调用,而不是使用普通的<code>DOM element</code>.</p>\n<h3 id=\"3-3-检查全屏状态变化\">3.3.检查全屏状态变化<a href=\"2018/07/27/HTML5新增API#3-3-检查全屏状态变化\"></a></h3><p>有的时候为了用户友好体验，在进入全屏或者退出全屏的时候，需要给用户提示，这个时候我们可以使用<code>FullScreen</code>的<code>screenchang</code>事件进行监控。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"fullscreenchange\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tfullscreenState.innerHTML = (<span class=\"built_in\">document</span>.fullscreen) ? <span class=\"string\">\"\"</span> : <span class=\"string\">\"not \"</span>;</span><br><span class=\"line\">\t&#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mozfullscreenchange\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tfullscreenState.innerHTML = (<span class=\"built_in\">document</span>.mozFullScreen) ? <span class=\"string\">\"\"</span> : <span class=\"string\">\"not \"</span>;</span><br><span class=\"line\">\t&#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"webkitfullscreenchange\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tfullscreenState.innerHTML = (<span class=\"built_in\">document</span>.webkitIsFullScreen) ? <span class=\"string\">\"\"</span> : <span class=\"string\">\"not \"</span>;</span><br><span class=\"line\">\t&#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></div></figure>\n<h3 id=\"3-4-css的全屏样式Styling-fullscreen\">3.4.css的全屏样式<code>Styling fullscreen</code><a href=\"2018/07/27/HTML5新增API#3-4-css的全屏样式Styling-fullscreen\"></a></h3><p>在css中，我们有几个伪类来给全屏设置样式,一般是<code>full-screen</code>这个伪类，然后会自动再全屏的时候生效</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">\thtml:-moz-full-screen &#123;</span><br><span class=\"line\">\t\tbackground: red;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\thtml:-webkit-full-screen &#123;</span><br><span class=\"line\">\t\tbackground: red;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\thtml:fullscreen &#123;</span><br><span class=\"line\">\t\tbackground: red;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/style&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p>全屏状态下的键盘输入 <code>Full screen with key input</code></p>\n<p> 为了安全原因，很多情况下全屏输入都是被阻塞禁止的，但是chrome允许通过下面的API来允许键盘输入：</p>\n<p><code>docElm.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);</code></p>\n<p>这个只在chrome支持，其他浏览器不支持。firefox计划使用<code>requestFullscreenWithKeys</code>方法来支持鼠标输入，但是会触发用户通知已保证安全，firefox10以上，chrome 15和safari5.1以上都支持了。</p>\n<h2 id=\"4-页面可见性-Page-Visibility\">4.页面可见性(<code>Page Visibility</code>)<a href=\"2018/07/27/HTML5新增API#4-页面可见性-Page-Visibility\"></a></h2><p>页面可见性就是当前页面是处于显示状态还是隐藏状态，页面可见性对于网站的统计非常有用。有的时候我们会统计用户停留在每个页面的时间，这个时间就是：用户打开网页到网页关闭或者最小化之间的时间。</p>\n<p>有的时候在视频播放的时候，当用户离开视频播放页面自动暂停视频播放，我们有时候也对那些定期刷新内容的页面进行控制，当该页面不可见则不刷新，可见则刷新。这些都是页面可见性的具体应用。</p>\n<p>HTML5之前，我们可以监听 <code>onfocus()</code>事件。如果当前窗口得到焦点，那么我们可以简单认为用户在与该页面交互，如果失去焦点<code>onblur()</code>那么可以认为用户停止与该页面交互。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当前窗口得到焦点</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onfocus = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// 动画</span></span><br><span class=\"line\">  <span class=\"comment\">// ajax 轮询等等</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 当前窗口失去焦点</span></span><br><span class=\"line\"> <span class=\"built_in\">window</span>.onblur = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">   <span class=\"comment\">// 停止动画</span></span><br><span class=\"line\">  <span class=\"comment\">// 停止 ajax 轮询等等</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n<p>通过焦点来判断页面的可见性是非常不精确的，因为如果用户打开了网页，同时进行word内容的编辑，这个时候焦点在word编辑器里面，但是页面仍然可见。</p>\n<h3 id=\"4-1-可见性API和事件\">4.1.可见性API和事件<a href=\"2018/07/27/HTML5新增API#4-1-可见性API和事件\"></a></h3><p>首先，我们来看一下可见性的兼容性</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232449/o_11.png\" alt=\" \" class=\"article-img\"></p>\n<p>哈哈哈，只有Opera mini的浏览器都支持这个API，其他的浏览器都支持，这个可是非常不容易的。</p>\n<p>可见性的属性：</p>\n<ul>\n<li><p><code>document.hidden</code>：Boolean值，表示当前页面可见还是不可见</p>\n</li>\n<li><p><code>document.visibilityState</code>：返回当前页面的可见状态：</p>\n</li>\n<li><p><code>visible</code>：页面内容至少部分可见.意味着该页面是一个非最小化窗口的前台标签页.</p>\n</li>\n<li><p><code>hidden</code>：页面内容用户不可见.意味着当前浏览器窗口处于最小化模式,或者该页面是一个后台标签页.</p>\n</li>\n<li><p><code>prerender</code>：页面内容正在被预渲染,用户不可见(这种情况下document.hidden会返回true). 一个页面只有在初始化时可能为这个值, 一旦变为其他两种值,不可能再变回来.</p>\n</li>\n<li><p><code>unloaded</code>：当前文档已经被卸载,用户不可见(这种情况下document.hidden会返回true).</p>\n</li>\n</ul>\n<p>可见性的事件：</p>\n<ul>\n<li><code>visibilitychange</code>: 当可见状态改变时候触发的事件。</li>\n</ul>\n<h3 id=\"4-2-可见性的使用\">4.2.可见性的使用<a href=\"2018/07/27/HTML5新增API#4-2-可见性的使用\"></a></h3><p>简单实例：</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">\t&lt;head&gt;</span><br><span class=\"line\">\t\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">\t\t&lt;title&gt;Document&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;/</span>head&gt;</span><br><span class=\"line\">\t&lt;body&gt;</span><br><span class=\"line\">\t\t&lt;script&gt;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'visibilitychange'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> isHidden = <span class=\"built_in\">document</span>.hidden;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(isHidden) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'页面隐藏'</span>)</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'页面显示'</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;/</span>body&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p>上述实例没有考虑浏览器的兼容性问题，我们就简单的测试一下，通过不停地切换其他页面与该页面，便可以触发该事件。</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232449/o_12.png\" alt=\" \"><br>通过结果可以看到监听到了页面可见性的变化。</p>\n<h3 id=\"4-3-兼容浏览器的写法\">4.3.兼容浏览器的写法<a href=\"2018/07/27/HTML5新增API#4-3-兼容浏览器的写法\"></a></h3><figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">\t&lt;head&gt;</span><br><span class=\"line\">\t\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">\t\t&lt;title&gt;Document&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;/</span>head&gt;</span><br><span class=\"line\">\t&lt;body&gt;</span><br><span class=\"line\">\t\t&lt;ul <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"class1 class2 class3 \"</span>&gt;</span><br><span class=\"line\">\t\t\t&lt;li onclick=<span class=\"string\">\"launchFullScreen()\"</span>&gt;<span class=\"number\">1</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t&lt;li&gt;2&lt;/</span>li&gt;</span><br><span class=\"line\">\t\t\t&lt;li&gt;<span class=\"number\">3</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t&lt;li&gt;4&lt;/</span>li&gt;</span><br><span class=\"line\">\t\t&lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\tfunction supportPageVisibility() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\tvar hidden = \"hidden\",</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t\tvisibilityChange = \"visibilitychange\";</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\tif(typeof document.hidden !== \"undefined\") &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t\thidden = \"hidden\";</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t\tvisibilityChange = \"visibilitychange\";</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t\tstate = \"visibilityState\";</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t&#125; else if(typeof document.mozHidden !== \"undefined\") &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t\thidden = \"mozHidden\";</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t\tvisibilityChange = \"mozvisibilitychange\";</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t\tstate = \"mozVisibilityState\";</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t&#125; else if(typeof document.msHidden !== \"undefined\") &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t\thidden = \"msHidden\";</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t\tvisibilityChange = \"msvisibilitychange\";</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t\tstate = \"msVisibilityState\";</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t&#125; else if(typeof document.webkitHidden !== \"undefined\") &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t\thidden = \"webkitHidden\";</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t\tvisibilityChange = \"webkitvisibilitychange\";</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t\tstate = \"webkitVisibilityState\";</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t&#125; /</span><span class=\"regexp\">/ 添加一个标题改变的监听器</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\tdocument.addEventListener(visibilityChange, function(e) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t\tif(document[hidden]) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t\t\tconsole.log('页面隐藏')</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t\t&#125; else &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t\t\tconsole.log('页面显示');</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t&#125;, false);</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\tsupportPageVisibility();</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&lt;/</span>script&gt;</span><br><span class=\"line\">\t&lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>html&gt;</span><br></pre></td></tr></table></div></figure>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232449/o_12.png\" alt=\" \" class=\"article-img\"></p>\n<h2 id=\"5-预加载\">5.预加载<a href=\"2018/07/27/HTML5新增API#5-预加载\"></a></h2><p>网站优化一直是项目开发中的重点之中，常用的优化方式主要有：图片懒加载、图片sprite、css合并、js合并、数据本地存储、数据网络缓存等。这些都是项目中经常使用的，HTML5考虑到了这一点，提出了链接预加载的方法，其实，这个方案是FireFox提出的，所以它对链接预加载绝对的支持。</p>\n<p>预加载是一种浏览器机制，使用浏览器空闲时间来预先下载\\加载用户接下来很可能会浏览的页面/资源。页面提供给浏览器需要预加载的集合。 浏览器载入当前页面完成后，将会在后台下载需要预加载的页面并添加到缓存中。当用户访问某个预加载的链接时，如果从缓存命中,页面就得以快速呈现，说的直接一些就是让浏览器在后台提前下载一些文件。</p>\n<h3 id=\"5-1-link的prefetch属性\">5.1.link的prefetch属性<a href=\"2018/07/27/HTML5新增API#5-1-link的prefetch属性\"></a></h3><figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;!-- 页面，可以使用绝对或者相对路径 --&gt;</span><br><span class=\"line\">&lt;link rel=<span class=\"string\">\"prefetch\"</span> href=<span class=\"string\">\"page2.html\"</span> /&gt;</span><br><span class=\"line\"> &lt;!-- 图片，也可以是其他类型的文件 --&gt;</span><br><span class=\"line\"> &lt;link rel=<span class=\"string\">\"prefetch\"</span> href=<span class=\"string\">\"sprite.png\"</span> /&gt;</span><br></pre></td></tr></table></div></figure>\n<p>上面是预加载的使用方案，href就是预加载的文件，可以看到可以加载不通类型的文件。但是由于<code>prefetch</code>兼容性现在使用不是特别的多，我们来看一下兼容图：</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232449/o_13.png\" alt=\" \"><br>可以看到兼容效果不是特别的好。考虑到prefetech的兼容，w3c提出了另外一个属性<code>dns-prefetch</code>属性。它的兼容性现在主流浏览器基本都支持。</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232449/o_14.png\" alt=\" \"><br>通过上图可以看到<code>dns-prefetch</code>的兼容性比prefetch好很多。</p>\n<h3 id=\"5-2-link的dns-prefetch\">5.2.link的<code>dns-prefetch</code><a href=\"2018/07/27/HTML5新增API#5-2-link的dns-prefetch\"></a></h3><link rel=\"dns-prefetch\" href=\"http://example-domain.com/\">\n\n<p>可以看到使用方法和prefetch一样，只是rel的属性不一样。</p>\n<h3 id=\"5-3-注意事项\">5.3.注意事项<a href=\"2018/07/27/HTML5新增API#5-3-注意事项\"></a></h3><ul>\n<li><p>预加载可以跨域进行，当然，请求时cookie等信息也会被发送。</p>\n</li>\n<li><p>预加载可能破坏网站统计数据，而用户并没有实际访问。</p>\n</li>\n<li><p>浏览器兼容性不是很好</p>\n</li>\n</ul>\n<h2 id=\"6-页面监控-window-performance-timing\">6. 页面监控(window.performance.timing)<a href=\"2018/07/27/HTML5新增API#6-页面监控-window-performance-timing\"></a></h2><p>百度的页面监控截图，在控制台输入<code>window.performance.timing</code>就可以看到。</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232449/o_2.png\" alt=\" \" class=\"article-img\"></p>\n<h3 id=\"6-1-各字段的含义：\">6.1.各字段的含义：<a href=\"2018/07/27/HTML5新增API#6-1-各字段的含义：\"></a></h3><ul>\n<li><p><code>navigationStart</code>：当前浏览器窗口的前一个网页关闭，发生unload事件时的Unix毫秒时间戳。如果没有前一个网页，则等于fetchStart属性。</p>\n</li>\n<li><p><code>unloadEventStart</code>：如果前一个网页与当前网页属于同一个域名，则返回前一个网页的unload事件发生时的Unix毫秒时间戳。如果没有前一个网页，或者之前的网页跳转不是在同一个域名内，则返回值为0。</p>\n</li>\n<li><p><code>unloadEventEnd</code>：如果前一个网页与当前网页属于同一个域名，则返回前一个网页unload事件的回调函数结束时的Unix毫秒时间戳。如果没有前一个网页，或者之前的网页跳转不是在同一个域名内，则返回值为0。</p>\n</li>\n<li><p><code>redirectStart</code>：返回第一个HTTP跳转开始时的Unix毫秒时间戳。如果没有跳转，或者不是同一个域名内部的跳转，则返回值为0。</p>\n</li>\n<li><p><code>redirectEnd</code>：返回最后一个HTTP跳转结束时（即跳转回应的最后一个字节接受完成时）的Unix毫秒时间戳。如果没有跳转，或者不是同一个域名内部的跳转，则返回值为0。</p>\n</li>\n<li><p><code>fetchStart</code>：返回浏览器准备使用HTTP请求读取文档时的Unix毫秒时间戳。该事件在网页查询本地缓存之前发生。</p>\n</li>\n<li><p><code>domainLookupStart</code>：返回域名查询开始时的Unix毫秒时间戳。如果使用持久连接，或者信息是从本地缓存获取的，则返回值等同于fetchStart属性的值。</p>\n</li>\n<li><p><code>domainLookupEnd</code>：返回域名查询结束时的Unix毫秒时间戳。如果使用持久连接，或者信息是从本地缓存获取的，则返回值等同于fetchStart属性的值。</p>\n</li>\n<li><p><code>connectStart</code>：返回HTTP请求开始向服务器发送时的Unix毫秒时间戳。如果使用持久连接（persistent connection），则返回值等同于fetchStart属性的值。</p>\n</li>\n<li><p><code>connectEnd</code>：返回浏览器与服务器之间的连接建立时的Unix毫秒时间戳。如果建立的是持久连接，则返回值等同于fetchStart属性的值。连接建立指的是所有握手和认证过程全部结束。</p>\n</li>\n<li><p><code>secureConnectionStart</code>：返回浏览器与服务器开始安全链接的握手时的Unix毫秒时间戳。如果当前网页不要求安全连接，则返回0。</p>\n</li>\n<li><p><code>requestStart</code>：返回浏览器向服务器发出HTTP请求时（或开始读取本地缓存时）的Unix毫秒时间戳。</p>\n</li>\n<li><p><code>responseStart</code>：返回浏览器从服务器收到（或从本地缓存读取）第一个字节时的Unix毫秒时间戳。</p>\n</li>\n<li><p><code>responseEnd</code>：返回浏览器从服务器收到（或从本地缓存读取）最后一个字节时（如果在此之前HTTP连接已经关闭，则返回关闭时）的Unix毫秒时间戳。</p>\n</li>\n<li><p><code>domLoading</code>：返回当前网页DOM结构开始解析时（即Document.readyState属性变为“loading”、相应的readystatechange事件触发时）的Unix毫秒时间戳。</p>\n</li>\n<li><p><code>domInteractive</code>：返回当前网页DOM结构结束解析、开始加载内嵌资源时（即Document.readyState属性变为“interactive”、相应的readystatechange事件触发时）的Unix毫秒时间戳。</p>\n</li>\n<li><p><code>domContentLoadedEventStart</code>：返回当前网页DOMContentLoaded事件发生时（即DOM结构解析完毕、所有脚本开始运行时）的Unix毫秒时间戳。</p>\n</li>\n<li><p><code>domContentLoadedEventEnd</code>：返回当前网页所有需要执行的脚本执行完成时的Unix毫秒时间戳。</p>\n</li>\n<li><p><code>domComplete</code>：返回当前网页DOM结构生成时（即Document.readyState属性变为“complete”，以及相应的readystatechange事件发生时）的Unix毫秒时间戳。</p>\n</li>\n<li><p><code>loadEventStart</code>：返回当前网页load事件的回调函数开始时的Unix毫秒时间戳。如果该事件还没有发生，返回0。</p>\n</li>\n<li><p><code>loadEventEnd</code>：返回当前网页load事件的回调函数运行结束时的Unix毫秒时间戳。如果该事件还没有发生，返回0。</p>\n<p>这些时间戳是告诉你这个网页从连接服务器开始，到连接服务器结束，到内容下载，到页面渲染，还有包括DNS，以及关闭浏览器时，卸载时所花费的时间.</p>\n</li>\n</ul>\n<h3 id=\"6-2-如何分析页面整体加载速度\">6.2.如何分析页面整体加载速度<a href=\"2018/07/27/HTML5新增API#6-2-如何分析页面整体加载速度\"></a></h3><p>主要是查看指标值<code>PAGET_</code>页面加载时间,此指标指的是页面整体加载时间但不含(<code>onload</code>事件和<code>redirect</code>),此指标值可直接反应用户体验,从此项指标可以知道指定某时间段的页面加载速度值,以及和天,周,月的对比状况.</p>\n<p>也可以查询指标<code>ALLT_</code>页面完全加载时间, 可以查询到从浏览器开始导航(用户点击链接或在地址栏输入url或点刷新,后退按钮)到页面onload 事件js完全跑完的所有时间.如果发现页面加载速度有增加或减少,则可以分项查询前面表格中的每个指标值,总的来说他们的关系如下:</p>\n<ul>\n<li><p>dom开始加载前所有花费时间=重定向时间+域名解析时间+建立连接花费时间+请求花费时间+接收数据花费时间</p>\n</li>\n<li><p><code>pageLoadTime页面加载时间</code>=域名解析时间+建立连接花费时间+请求花费时间+接收数据花费时间+解析dom花费时间+加载dom花费时间</p>\n</li>\n</ul>\n<ul>\n<li><code>allLoadTime页面完全加载时间</code>=重定向时间+域名解析时间+建立连接花费时间+请求花费时间+接收数据花费时间+解析dom花费时间+加载dom花费时间+执行onload事件花费时间</li>\n</ul>\n<ul>\n<li><code>resourcesLoadedTime资源加载时间</code>=解析dom花费时间+加载dom花费时间</li>\n</ul>\n<h3 id=\"6-3-不支持HTML5元素的浏览器\">6.3.不支持HTML5元素的浏览器<a href=\"2018/07/27/HTML5新增API#6-3-不支持HTML5元素的浏览器\"></a></h3><p>可以利用getTime()获取当前的时间戳，完成某个功能之后再获取一个时间戳，两个时间戳相减就是完成这个功能所花费的时间。</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232449/o_3.png\" alt=\" \" class=\"article-img\"></p>\n<p>不支持的浏览器只能通过这种办法粗略的计算该方法所花费的事件，其他的性能指标无法获得。</p>\n","prev":{"title":"认识Git","link":"2018/08/01/1-认识Git"},"next":{"title":"雅虎35条","link":"2018/07/22/前端性能优化"},"plink":"http://yoursite.com/2018/07/27/HTML5新增API/","toc":[{"title":"优点：","id":"优点：","index":"1"},{"title":"1.DOM操作","id":"1-DOM操作","index":"2","children":[{"title":"1.1.<code>document.querySelector(&quot;selector&quot;)</code>","id":"1-1-document-querySelector-quot-selector-quot","index":"2.1"},{"title":"1.2.<code>document.querySelectorAll(&quot;selector&quot;)</code>;","id":"1-2-document-querySelectorAll-quot-selector-quot","index":"2.2"},{"title":"1.3.<code>document.getElementsByClassName(&quot;selector&quot;)</code>","id":"1-3-document-getElementsByClassName-quot-selector-quot","index":"2.3"}]},{"title":"2.<code>classList</code>属性","id":"2-classList属性","index":"3","children":[{"title":"2.1.<code>classList</code>属性","id":"2-1-classList属性","index":"3.1"}]},{"title":"3.全屏","id":"3-全屏","index":"4","children":[{"title":"3.1.<code>FullScreen API</code>接口","id":"3-1-FullScreen-API接口","index":"4.1"},{"title":"3.1.进入全屏","id":"3-1-进入全屏","index":"4.2"},{"title":"3.2.退出全屏","id":"3-2-退出全屏","index":"4.3"},{"title":"3.3.检查全屏状态变化","id":"3-3-检查全屏状态变化","index":"4.4"},{"title":"3.4.css的全屏样式<code>Styling fullscreen</code>","id":"3-4-css的全屏样式Styling-fullscreen","index":"4.5"}]},{"title":"4.页面可见性(<code>Page Visibility</code>)","id":"4-页面可见性-Page-Visibility","index":"5","children":[{"title":"4.1.可见性API和事件","id":"4-1-可见性API和事件","index":"5.1"},{"title":"4.2.可见性的使用","id":"4-2-可见性的使用","index":"5.2"},{"title":"4.3.兼容浏览器的写法","id":"4-3-兼容浏览器的写法","index":"5.3"}]},{"title":"5.预加载","id":"5-预加载","index":"6","children":[{"title":"5.1.link的prefetch属性","id":"5-1-link的prefetch属性","index":"6.1"},{"title":"5.2.link的<code>dns-prefetch</code>","id":"5-2-link的dns-prefetch","index":"6.2"},{"title":"5.3.注意事项","id":"5-3-注意事项","index":"6.3"}]},{"title":"6. 页面监控(window.performance.timing)","id":"6-页面监控-window-performance-timing","index":"7","children":[{"title":"6.1.各字段的含义：","id":"6-1-各字段的含义：","index":"7.1"},{"title":"6.2.如何分析页面整体加载速度","id":"6-2-如何分析页面整体加载速度","index":"7.2"},{"title":"6.3.不支持HTML5元素的浏览器","id":"6-3-不支持HTML5元素的浏览器","index":"7.3"}]}]}