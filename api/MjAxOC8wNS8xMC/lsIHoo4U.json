{"title":"封装","date":"2018-05-10T07:50:56.000Z","link":"2018/05/10/封装","tags":["JavaScript"],"categories":["前端"],"updated":"2018-10-12T14:46:41.925Z","content":"<blockquote>\n<p>面向对象是一种对现实世界理解和抽象的方法，系统中一切事物皆对象，对象是属性及其操作的封装体，实例关系和继承关系是对象之间的静态关系，消息传递是对象之间动态联系的唯一形式，方法是消息的序列。</p>\n</blockquote>\n<h2 id=\"封装\">封装<a href=\"2018/05/10/封装#封装\"></a></h2><p>封装的目的是将信息隐藏，封装包括封装数据、封装实现、封装类型和封装变化。</p>\n<h3 id=\"1-封装数据\">1.封装数据<a href=\"2018/05/10/封装#1-封装数据\"></a></h3><p>在传统的面向对象语言中，封装数据是由语法解析来实现的，传统的面向对象语言提供了privata、public、protected等关键字来提供不同的访问权限。</p>\n<p>但JavaScript并没有提供对这些关键字的支持，我们只能依赖变量的作用域来实现封装特性，而且只能模拟出public和private这两种封装性。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fengzhuang=(function()&#123;</span><br><span class=\"line\">\tvar __name__=&quot;张三&quot;;</span><br><span class=\"line\">\treturn &#123;</span><br><span class=\"line\">\tgetName:function()&#123;</span><br><span class=\"line\">       console.log(__name__);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(fengzhuang.getName()); //张三</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(fengzhuang.__name__); //undefined</span><br></pre></td></tr></table></div></figure>\n<p>利用闭包，将变量的作用域封装起来，只有函数内部可以访问，外部不能访问。</p>\n<h3 id=\"2-封装实现\">2.封装实现<a href=\"2018/05/10/封装#2-封装实现\"></a></h3><p>封装的目的是将信息隐藏，封装应该被视为”任何形式的封装”，不应仅局限于数据层面的封装，也就是说，封装不仅仅是隐藏数据，还包括隐藏实现细节、设计细节以及隐藏对象的类型。</p>\n<p>从封装实现细节来讲，封装使得对象内部的变化对其他对象而言是透明的，对象对它自己的行为负责。其他对象或用户都不关心它的内部实现，封装使得对象之间的耦合变松散，对象之间只通过暴露的API接口来通信。当我们修改一个对象的时候，可以随意修改它的内部实现，只要对外的接口没有变化，就不会影响程序的其他功能。</p>\n<h3 id=\"3-封装类型\">3.封装类型<a href=\"2018/05/10/封装#3-封装类型\"></a></h3><p>封装类型是静态类型语言中的一种重要的封装方式，因为JavaScript本身就是动态类型语言，根本没必要封装类型。</p>\n<h3 id=\"4-封装变化\">4.封装变化<a href=\"2018/05/10/封装#4-封装变化\"></a></h3><p>封装在更重要的层面体现为封装变化。</p>\n<p>“考虑你的设计中哪些地方可能变化，这种方式与关注会导致重新设计的原因相反。它不是考虑什么时候会迫使你的设计改变，而是考虑你怎样才能够在不重新设计的情下进行改变。这里的关键在于封装发生变化的概念。”</p>\n<p>通过封装变化的方式，把系统中稳定不变的部分和容易变化的部分隔离开，在系统的演变过程中，我们只需要替换那些容易变化的部分，如果这些部分是已经封装好的，替换起来也相对容易。这可以最大程度地保证程序的稳定性和可扩展性。</p>\n","prev":{"title":"JavaScript中的原型继承","link":"2018/05/12/JavaScript中的原型继承"},"next":{"title":"多态","link":"2018/05/08/多态"},"plink":"http://yoursite.com/2018/05/10/封装/","toc":[{"title":"封装","id":"封装","index":"1","children":[{"title":"1.封装数据","id":"1-封装数据","index":"1.1"},{"title":"2.封装实现","id":"2-封装实现","index":"1.2"},{"title":"3.封装类型","id":"3-封装类型","index":"1.3"},{"title":"4.封装变化","id":"4-封装变化","index":"1.4"}]}]}