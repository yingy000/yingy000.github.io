{"title":"多态","date":"2018-05-08T11:10:56.000Z","link":"2018/05/08/多态","tags":["JavaScript"],"categories":["前端"],"updated":"2018-10-12T14:48:55.798Z","content":"<blockquote>\n<p>面向对象是一种对现实世界理解和抽象的方法，系统中一切事物皆对象，对象是属性及其操作的封装体，实例关系和继承关系是对象之间的静态关系，消息传递是对象之间动态联系的唯一形式，方法是消息的序列。</p>\n</blockquote>\n<h2 id=\"多态\">多态<a href=\"2018/05/08/多态#多态\"></a></h2><p>多态的含义：同一操作作用于不同的对象上面，可以产生不同的解释和不同的执行结果。也就是说，给不同的对象发送同一个消息的时候，这些对象会根据这个消息分别给出不同的反馈。</p>\n<p>举例：</p>\n<p>主人家里养了两只动物，分别是一只鸭和一只鸡，当主人向它们发出”叫”的命令时，鸭会”嘎嘎嘎”地叫，而鸡会”咯咯咯”地叫。这两只动物都会以自己的方式来发出叫声。它们同样”都是动物，并且可以发出叫声”，但根据主人的指令，它们会各自发出不同的叫声。</p>\n<h3 id=\"1-一段-quot-多态-quot-的JavaScript代码\">1.一段<code>&quot;多态&quot;</code>的JavaScript代码<a href=\"2018/05/08/多态#1-一段-quot-多态-quot-的JavaScript代码\"></a></h3><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function makeSound(animal)&#123;</span><br><span class=\"line\">if(animal instanceof Duck)&#123;</span><br><span class=\"line\">\t  console.log(&quot;嘎嘎嘎&quot;);</span><br><span class=\"line\">  &#125;else&#123;</span><br><span class=\"line\">  console.log(&quot;咯咯咯&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function Duck()&#123;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">function Chicken()&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var duck=new Duck();</span><br><span class=\"line\">var chicken=new Chicken();</span><br><span class=\"line\">makeSound(duck);//嘎嘎嘎</span><br><span class=\"line\">makeSound(chicken);//咯咯咯</span><br></pre></td></tr></table></div></figure>\n<p>上述代码确实体现了<code>&quot;多态性&quot;</code>，当我们分别向鸭和鸡发出<code>&quot;叫&quot;</code>的命令时，它们根据此消息作出了各自不同的反应，但这样的<code>&quot;多态性&quot;</code>是无法令人满意的，如果后来又增加一个动物，比如狗的叫声是<code>&quot;汪汪汪&quot;</code>，我们唯一的办法是改动makeSound函数，修改代码总是危险的，修改的地方越多，程序出错的可能性就越大，而且当动物的种类越来越多时，mackSound有可能变成一个超级恶心的函数。</p>\n<p>多态的思想是要将<code>&quot;不变的事务&quot;</code>与<code>&quot;可能改变的事务&quot;</code>分离开来。</p>\n<p>动物都会叫，这是不变的，但是不同类型的动物具体怎么叫是可变的。把不变的部分隔离出来，把可变的部分封装起来，这给与了我们扩展程序的能力。</p>\n<h3 id=\"2-对象的多态性\">2.对象的多态性<a href=\"2018/05/08/多态#2-对象的多态性\"></a></h3><p>首先我们把不变的部分隔离出来，所有的动物都会叫。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function makeSound(animal)&#123;</span><br><span class=\"line\">\tanimal.sound();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>然后把可变的部分封装起来，多态性实际上是指对象的多态性。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Duck()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Duck.prototype.sound=function()&#123;</span><br><span class=\"line\">\tconsole.log(&quot;嘎嘎嘎&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Chicken()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Chicken.prototype.sound=function()&#123;</span><br><span class=\"line\">\tconsole.log(&quot;咯咯咯&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var duck=new Duck();</span><br><span class=\"line\">var chicken=new Chicken();</span><br><span class=\"line\">makeSound(duck);//嘎嘎嘎</span><br><span class=\"line\">makeSound(chicken);//咯咯咯</span><br></pre></td></tr></table></div></figure>\n<p>现在，当我们分别向鸭和鸡发出<code>&quot;叫&quot;</code>的命令时，它们根据此消息作出了各自不同的反应。现在我们可以方便的添加新的对象，而不用去改变makeSound()函数。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Dog()&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Dog.prototype.sound=function()&#123;</span><br><span class=\"line\">\tconsole.log(&quot;汪汪汪&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var dog=new Dog()</span><br><span class=\"line\">makeSound(dog);//咯咯咯</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"3-类型检查和多态\">3.类型检查和多态<a href=\"2018/05/08/多态#3-类型检查和多态\"></a></h3><p>JavaScript的变量类型在运行期是可变的，一个JavaScript对象，即可以表示Duck类型的对象，又可以表示Chicken类型的对象，这意味着JavaScript对象的多态性是与生俱来的。</p>\n<p>这种与生俱来的多态性并不难理解，JavaScript作为一门动态类型语言，它在编译时没有类型检查的过程，既没有检查创建的对象类型，也没有检查传递的参数类型。所以我们既可以往makeSound函数里传递duck对象当做参数，也可以传递chicken对象当做参数。</p>\n<p>在JavaScript中，我们判断某一种动物能否发出叫声，只取决于它有没有makeSound方法，而不取决于它是某种类型的对象，这正是鸭子类型的思想。</p>\n<h3 id=\"4-多态的作用\">4.多态的作用<a href=\"2018/05/08/多态#4-多态的作用\"></a></h3><p>Martin Fowler在《重构:改善既有代码的设计》里提到：</p>\n<p>多态的最根本好处在于，你不必再向对象询问”你是什么类型”而后根据得到的答案调用对象的某个行为，你只管调用该行为就是了，其他的一切多态机制都会为你安排妥当。</p>\n<p>也就是说，多态最根本的作用就是通过把过程化的条件分支语句转化为对象的多态性，从而消除这些条件分支语句。</p>\n<p>Martin Fowler关于多态有一段很经典的话。</p>\n<p>在电影的拍摄现场，当导演喊出”action”时，主角开始背台词，照明师负责打灯光，后面的群众演员假装中枪倒地，道具师往镜头里撒上雪花。在得到同一个消息时，每个对象都知道自己应该做什么。如果不利用对象的多态性，而是用面向过程的方式来编写这一段代码，那么相当于在电影开始拍摄之后，导演每次都要走到每个人的面前，确认它们的职业分工（类型），然后告诉他们要做什么。如果映射到程序中，那么程序中将充斥着条件分支语句。</p>\n<p>利用对象的多态性，导演在发布消息时，就不必考虑各个对象接收到消息后应该做什么，对象应该做什么并不是临时决定的，而是已经事先约定和排练完毕的。每个对象应该做什么，已经成为了该对象的一个方法，被安排在对象的内部，每个对象负责它们自己的行为。所以这些对象可以根据同一个消息，有条不紊地分别进行各自的工作。</p>\n<p>多态的特点：将行为分步在各个对象中，并让这些对象各自负责自己的行为。</p>\n","prev":{"title":"封装","link":"2018/05/10/封装"},"next":{"title":"动态类型语言和鸭子类型","link":"2018/05/07/动态类型语言和鸭子类型"},"plink":"http://yoursite.com/2018/05/08/多态/","toc":[{"title":"多态","id":"多态","index":"1","children":[{"title":"1.一段<code>&quot;多态&quot;</code>的JavaScript代码","id":"1-一段-quot-多态-quot-的JavaScript代码","index":"1.1"},{"title":"2.对象的多态性","id":"2-对象的多态性","index":"1.2"},{"title":"3.类型检查和多态","id":"3-类型检查和多态","index":"1.3"},{"title":"4.多态的作用","id":"4-多态的作用","index":"1.4"}]}]}