{"title":"设计模式之生成器模式","date":"2018-03-19T02:12:11.000Z","link":"2018/03/19/设计模式之生成器模式","tags":["设计模式"],"categories":["前端"],"updated":"2019-08-25T12:52:18.710Z","content":"<blockquote>\n<p>生成器模式</p>\n</blockquote>\n<p>1.1定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。<br>1.2结构图<br><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232443/o_29.png\" alt=\" \"><br>图 29</p>\n<ul>\n<li>Builder：为创建一个Product对象的各个部件指定抽象接口</li>\n<li>ConcreteBuilder：实现Builder的接口以构造和装配该产品的各个部件；定义并明确它所创建的表示；提供一个检索产品的接口。</li>\n<li>Director：构造一个使用Builder接口的对象</li>\n<li>Product：表示被构造的复杂对象。</li>\n<li>ConcreteBuilder创建该产品的内部表示并定义它的装配过程；包含定义组成部件的类，包括将这些部件装配成最终产品的接口</li>\n</ul>\n<p>①　当系统准备为用户提供一个内部结构复杂的对象时，使用生成器模式，使用该模式可以逐步地构造对象，使得对象的创建更具有弹性。</p>\n<p>②　生成器模式的关键是将一个包含有多个组件对象的创建分为若干个步骤，并将这些步骤封装在一个称为生成器的接口中。<br>③　生成器模式的重心还是在于分离整体构建算法与子部件的构建，分步骤构建对象只不过是整体构建算法的一个简单表现，或者说是一个附带产物。</p>\n<p>④　生成器模式的本质：分离整体构建算法和部件构造。</p>\n<p>⑤　虽然在生成器模式的整体构建算法中，会一步一步引导Builder来构建对象，但这并不是说生成器主要就是用来实现分步骤构建对象的。生成器模式的重心还是在于分离整体构建算法和部件构造，而分步骤构建对象不过是整体构建算法的一个简单表现，或者说是一个附带产物。</p>\n<p>⑥　“将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示”。有这么几个关键点：对象比较复杂，内部可能包含多个元素或者多个其他对象的组合；对象的表示可能有多种，并且有需求在多种表示中进行切换；使用同样的构造过程来创建可能的不同表示。</p>\n<p>1.3适用场景</p>\n<ul>\n<li>当创建复杂对象的算法应该独立于该对象的组成部分以及他们的装配方式；</li>\n<li>当构造过程必须允许构造的对象有不同的表示；</li>\n<li>需要创建的复杂对象内部的各个子部分有一定的关联性或者依赖性，这样在可以通过生成器来强迫生成一定的创建和组装顺序</li>\n</ul>\n<p>1.4优缺点</p>\n<ul>\n<li>松散耦合：生成器模式可以用同一个构建算法构建出表现上完全不同的产品，实现产品构建和产品表现的分离。正是将产品的构建过程独立开来，才使得生成器模式与具体产品的表现松散耦合，从而使得构建算法可以复用，而具体产品表现也可以灵活地、方便地扩展和切换。</li>\n<li>可以很容易地改变产品的内部表示：在生成器模式中，由于指导者只是通过Builder来构建具体产品，但是具体产品中的各个子部件的创建和装配方式却被builder接口隐藏起来，Director并不清楚这些具体实现细节。也正是因为这样，需要改变产品的内部表象时，我们只需要切换不同的Builder实现对象即可，而Director角色无需作出任何的改变。</li>\n<li>复用性更好：生成器模式分离了构建算法和具体产品实现，这样使得“稳定”的构建算法可以达到复用的效果，同样的效果，具体产品的子部件的实现亦可以复用，一个相同的子部件实现可以配合不同的构建算法来使用。</li>\n<li>（缺点）</li>\n</ul>\n<p>1.5实例<br>描述：</p>\n<ul>\n<li><p>造一艘船”这个事件中，复杂对象指的是不同种类“船”，“船”的内部可能包括其他对象：“鱼雷”、“飞机”等；“船”有多种表示；相同的构建过程则是描述“造船”这个事件的抽象过程，隐藏具体的构造细节，这样才能通过相同的构造过程得到不同的“船”的表示。</p>\n</li>\n<li><p>快餐店制作儿童餐。典型的儿童餐包括一个主食，一个辅食，一杯饮料和一个玩具（例如汉堡、炸鸡、可乐和玩具车）。这些在不同的儿童餐中可以是不同的，但是组合成儿童餐的过程是相同的（这是关键点）。无论顾客点的是汉堡，三名治还是鸡肉，过程都是一样的。柜台的员工直接把主食，辅食和玩具放在一起。这些是放在一个袋子中的。饮料被倒入杯中，放在袋子外边。这些过程在相互竞争的餐馆中是同样的。在这样一种场景中，主食、辅食、饮料和玩具根据所选择的套餐种类的不同而不同，但是不管何种套餐，都具有这几大部分。</p>\n</li>\n</ul>\n<p>1.5.1. 2017A<br>某快餐厅主要制作并出售儿童套餐，一般包括主餐(各类比萨)、饮料和玩具，其餐品种类可能不同，但其制作过程相同。前台服务员(Waiter)调度厨师制作套餐。现采用生成器(Builder) 模式实现制作过程，得到如图30所示的类图。 </p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1232443/o_30.png\" alt=\" \"><br>图30</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pizza</span> </span>&#123;</span><br><span class=\"line\">\tprivate: string parts;</span><br><span class=\"line\">\tpublic:</span><br><span class=\"line\">\t\t<span class=\"keyword\">void</span> setParts(string parts) &#123; <span class=\"keyword\">this</span>-&gt;parts=parts; &#125;</span><br><span class=\"line\">\t\tstring getParts() &#123; <span class=\"keyword\">return</span> parts; &#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PizzaBuilder</span> </span>&#123;</span><br><span class=\"line\">\tprotected:Pizza* pizza;</span><br><span class=\"line\">\tpublic:</span><br><span class=\"line\">\t\tPizza* getPizza() &#123; retum pizza; &#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">void</span> createNewPizza() &#123; pizza = <span class=\"keyword\">new</span> Pizza(); &#125;</span><br><span class=\"line\">\t\tvirtual <span class=\"keyword\">void</span> buildParts();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class HawaiianPizzaBuilder :public PizzaBuilder &#123;</span><br><span class=\"line\">\tpublic:</span><br><span class=\"line\">\t\t<span class=\"keyword\">void</span> buildParts() &#123;</span><br><span class=\"line\">\t\t\tpizza-&gt;setParts(<span class=\"string\">\"cross +mild + ham&amp;pineapple\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class SpicyPizzaBuider: public PizzaBuilder &#123;</span><br><span class=\"line\">\tpublic:</span><br><span class=\"line\">\t\t<span class=\"keyword\">void</span> buildParts() &#123;</span><br><span class=\"line\">\t\t\tpizza-&gt;setParts(<span class=\"string\">\"pan baked +hot + ham&amp;pineapple\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Class Waiter&#123;</span><br><span class=\"line\">\tPrivate:</span><br><span class=\"line\">\t\tPizzaBuilder* pizzaBuilder;</span><br><span class=\"line\">\tpublic:</span><br><span class=\"line\">\t\t<span class=\"keyword\">void</span> setPizzaBuilder(PizzaBuilder* pizzaBuilder) &#123; <span class=\"comment\">/*设置构建器*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;pizzaBuilder=pizzaBuilder;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Pizza* getPizza() &#123; <span class=\"keyword\">return</span> pizzaBuilder-&gt;getPizza(); &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> construct() &#123; <span class=\"comment\">/*构建*/</span></span><br><span class=\"line\">\t\tpizzaBuilder-&gt;createNewPizza();</span><br><span class=\"line\">\t\tpizzaBuilder-&gt;builderParts();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">\tWaiter*waiter=<span class=\"keyword\">new</span> Waiter();</span><br><span class=\"line\">\tPizzaBuilder*hawaiian pizzabuilder=<span class=\"keyword\">new</span></span><br><span class=\"line\">\tHawaiianPizzaBuilder()</span><br><span class=\"line\">\twaiter-&gt;setPizzaBuilder(hawaiian_pizzabuilder);</span><br><span class=\"line\">\twaiter-&gt;construct();</span><br><span class=\"line\">\tcout&lt;&lt; <span class=\"string\">\"pizza: \"</span>&lt;&lt; waiter-&gt;getPizza()-&gt;getParts()&lt;&lt; endl;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>","prev":{"title":"设计模式之策略模式","link":"2018/03/21/设计模式之策略模式"},"next":{"title":"设计模式之状态模式","link":"2018/03/17/设计模式之状态模式"},"plink":"http://yoursite.com/2018/03/19/设计模式之生成器模式/"}