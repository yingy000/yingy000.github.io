{"title":"设计模式之访问者模式","date":"2018-03-28T17:01:10.000Z","link":"2018/03/29/设计模式之访问者模式","tags":["设计模式"],"categories":["前端"],"updated":"2019-08-25T12:54:15.657Z","content":"<blockquote>\n<p> 访问者模式</p>\n</blockquote>\n<p>1.1定义：表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素类的前提下定义作用于这些元素的新操作。</p>\n<p>1.2结构图<br><img src=\"https://www.cnblogs.com/images/cnblogs_com/cliy-10/1232443/o_45.png\" alt=\" \"><br>图45</p>\n<p>访问者模式适用于数据结构相对未定的系统，它把数据结构和作用于结构上的操作之间的耦合解脱开，使得操作集合可以相对自由地演化。访问者模式的简略图如图46所示。<br><img src=\"https://www.cnblogs.com/images/cnblogs_com/cliy-10/1232443/o_46.png\" alt=\" \"></p>\n<p>图46</p>\n<p>数据结构的每一个节点都可以接受一个访问者的调用，此节点向访问者对象传入节点对象，而访问者对象则反过来执行节点对象的操作。这样的过程叫做“双重分派”。节点调用访问者，将它自己传入，访问者则将某算法针对此节点执行。</p>\n<ul>\n<li>抽象访问者(Visitor)角色：声明了一个或者多个方法操作，形成所有的具体访问者角色必须实现的接口。</li>\n<li>具体访问者(ConcreteVisitor)角色：实现抽象访问者所声明的接口，也就是抽象访问者所声明的各个访问操作。</li>\n<li>抽象节点(Node)角色：声明一个接受操作，接受一个访问者对象作为一个参数。</li>\n<li>具体节点(ConcreteNode)角色：实现了抽象节点所规定的接受操作。</li>\n<li>结构对象(ObjectStructure)角色：有如下的责任，可以遍历结构中的所有元素；如果需要，提供一个高层次的接口让访问者对象可以访问每一个元素；如果需要，可以设计成一个复合对象或者一个聚集，如List或Set。</li>\n</ul>\n<p>①　在实际系统中访问者模式通常是用来处理复杂的对象树结构的，而且访问者模式可以用来处理跨越多个等级结构的树结构问题。这正是访问者模式的功能强大之处。</p>\n<p>②　 先来看第一句话，说是一个作用于某对象结构中的各元素的操作，这里提到了三个事物，一个是对象结构，一个是各元素，一个是操作。那么我们可以这么理解，有这么一个操作，它是作用于一些元素之上的，而这些元素属于某一个对象结构。好了，最关键的第二句来了，它说使用了访问者模式之后，可以让我们在不改变各元素类的前提下定义作用于这些元素的新操作。这里面的关键点在于前半句，即不改变各元素类的前提下，在这个前提下定义新操作是访问者模式精髓中的精髓。</p>\n<p>1.3适用场景</p>\n<p>访问者模式适用于数据结构相对稳定算法又易变化的系统。因为访问者模式使得算法操作增加变得容易。若系统数据结构对象易于变化，经常有新的数据对象增加进来，则不适合使用访问者模式。</p>\n<p>1.4优缺点</p>\n<ul>\n<li>好的扩展性：能够在不修改对象结构中的元素的情况下，为对象结构中的元素添加新的功能。</li>\n<li>好的复用性：可以通过访问者来定义整个对象结构通用的功能，从而提高复用程度。</li>\n<li>分离无关行为：可以通过访问者来分离无关的行为，把相关的行为封装在一起，构成一个访问者，这样每一个访问者的功能都比较单一。</li>\n<li>（缺点）对象结构变化很困难：不适用于对象结构中的类经常变化的情况，因为对象结构发生了改变，访问者的接口和访问者的实现都要发生相应的改变，代价太高。</li>\n<li>（缺点）破坏封装：访问者模式通常需要对象结构开放内部数据给访问者和ObjectStructrue，这破坏了对象的封装性。</li>\n</ul>\n<p>1.5实例</p>\n<p>描述：用户去访问博客,分析：用户可以通过电脑上的Web方式（访问者）或者手机Wap方式（访问者）去访问博客，每篇博客是一个元素，然后博客列表是一个对象结构类。</p>\n<p>1.5.1 2015A<br>   某图书管理系统中管理着两种类型的文献：图书和论文。现在要求统计所有馆藏文献的总页码（假设图书馆中有一本540页的图书和两篇各25页的论文，那么馆藏文献的总页码就是590页）。采用Visitor（访问者）模式实现该要求，得到如图47所示的类图。</p>\n<p><img src=\"https://www.cnblogs.com/images/cnblogs_com/cliy-10/1232443/o_47.png\" alt=\" \"><br>图47</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LibraryVisitor</span></span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LibraryItemInterface</span></span>&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">virtual <span class=\"keyword\">void</span> accept(LibraryVisitor* visitor)=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">class Article : public LibraryItemInterface &#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">string  m_title;        <span class=\"comment\">//论文名</span></span><br><span class=\"line\">string  m_author;    <span class=\"comment\">//论文作者</span></span><br><span class=\"line\">int m_start_page;</span><br><span class=\"line\">int m_end_page;</span><br><span class=\"line\">public:</span><br><span class=\"line\">Article(string p_author, string p_title, int p_start_page,int p_end_page );</span><br><span class=\"line\">int getNumber()fPages();</span><br><span class=\"line\"><span class=\"keyword\">void</span> accept(Library Visitor* visitor);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">class Book : public LibraryItemInterface &#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">string  m_title;       <span class=\"comment\">//书名</span></span><br><span class=\"line\">string  m_author;   <span class=\"comment\">//作者</span></span><br><span class=\"line\">int m_pages;         <span class=\"comment\">//页数</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">Book(string p_author, string p_title, int p_pages);</span><br><span class=\"line\">int getNumber()fPages();</span><br><span class=\"line\"> <span class=\"keyword\">void</span> accept(LibraryVisitor* visitor);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LibraryVisitor</span> </span>&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">virtual <span class=\"keyword\">void</span> visit(Book* p_book)=<span class=\"number\">0</span>;</span><br><span class=\"line\"> virtual <span class=\"keyword\">void</span> visit(Article* p_article)=<span class=\"number\">0</span> </span><br><span class=\"line\"> virtual <span class=\"keyword\">void</span> printSum() = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">class LibrarySumPrintVisitor : public LibraryVisitor  &#123;          //打印总页数</span><br><span class=\"line\">private:</span><br><span class=\"line\">int sum;</span><br><span class=\"line\">public:</span><br><span class=\"line\">LibrarySumPrintVisitor();</span><br><span class=\"line\"><span class=\"keyword\">void</span> visit(Book* p_book);</span><br><span class=\"line\"><span class=\"keyword\">void</span> visit(Article* p_article);</span><br><span class=\"line\"><span class=\"keyword\">void</span> printSum();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// visitor.cpp</span></span><br><span class=\"line\">int Article: :getNumber()fPages()&#123;</span><br><span class=\"line\">retum m_end_page - m_start_page;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> Article::accept(LibraryVisitor* visitor) &#123;  </span><br><span class=\"line\"> (LibraryVisitor*)visitor‐&gt;visit(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">Book: :Book(string p_author, string p_title, int p_pages ) &#123;</span><br><span class=\"line\">m_title = p_title;</span><br><span class=\"line\">m_author = p_author;</span><br><span class=\"line\">m_pages = p_pages;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int Book::getNumberOfPages()&#123;    <span class=\"keyword\">return</span> m_pages;  &#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> Book::accept(LibraryVisitor* visitor)&#123; </span><br><span class=\"line\"> (LibraryVisitor*)visitor‐&gt;visit(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n","prev":{"title":"设计模式之适配器模式","link":"2018/03/30/设计模式之适配器模式"},"next":{"title":"设计模式之观察者模式","link":"2018/03/27/设计模式之观察者模式"},"plink":"http://yoursite.com/2018/03/29/设计模式之访问者模式/"}