{"title":"JS封装库","date":"2018-06-28T07:48:54.000Z","link":"2018/06/28/Yquery","tags":["Yquery"],"updated":"2019-08-25T12:58:45.129Z","content":"<blockquote>\n<p>如果了解并且用过JQuery的人，应该知道它的强大与方便吧，是不是也想自己利用原生的JavaScript封装一个简单的属于自己的库呢？</p>\n</blockquote>\n<p>在JQuery的选择器中，有三种类型的参数，我们可以传一个函数、传一个字符串、传一个对象。如果传进来的是字符串的话，又分为三种类型，<code>$(&quot;#ID&quot;)</code>,<code>$(&quot;.class&quot;)</code>,<code>$(&quot;selector&quot;)</code></p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    &#125;)==&gt;事件绑定</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">\"sEv\"</span>)=$(<span class=\"string\">\"#ID\"</span>),$(<span class=\"string\">\".class\"</span>),$(<span class=\"string\">\"selector\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">$(obj)==&gt;直接插入</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"1-第一步：封装函数\">1.第一步：封装函数<a href=\"2018/06/28/Yquery#1-第一步：封装函数\"></a></h3><figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Yquery</span>(<span class=\"params\">yArg</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//yArg这里表示任何类型的参数，命名要规范。</span></span><br><span class=\"line\">    <span class=\"comment\">//我们需要根据传进来的不同参数做不同的事情</span></span><br><span class=\"line\">    <span class=\"comment\">//首先判断传进来的参数的类型</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"keyword\">typeof</span> yArg)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果传进来的参数是函数类型,就直接让window.onload执行</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'function'</span>:</span><br><span class=\"line\">          <span class=\"built_in\">window</span>.onload=yArg;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>封装好了函数，是不是内心有一丝的小激动呢，那我们现在赶紧来测试一下吧。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Yquery(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">\"a\"</span>)</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p>我们可以在控制台中看到a，这样一个简单的封装就好了，但是这里面存在这一个极大的问题。我们熟悉jQuery的人都知道可以在一个页面中写多个入口函数，并且不会发生冲突问题。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>如果我们在自己封装的库里面写多个呢?会出现什么情况呢？</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Yquery(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"a\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Yquery(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"b\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p>我想大家应该都知道结果了，结果为b,并没有a,这就说明函数b覆盖了函数a,原因是我们把函数直接交给window.onload去执行，大家应该都知道在JavaScript中只能有一个入口函数<code>&quot;window.onload=function(){}&quot;</code>如果有多个的话，就会产生覆盖。</p>\n<h3 id=\"2-第一次修改Yquery-js\">2.第一次修改Yquery.js<a href=\"2018/06/28/Yquery#2-第一次修改Yquery-js\"></a></h3><p>如何解决函数覆盖的问题？</p>\n<p>在Jquery中采用的是事件队列的机制，这里面使用事件绑定机制。我们需要定义一个绑定事件的函数，<code>myAddEvent()</code>;</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myAddEvent</span>(<span class=\"params\">obj,sEv,fn</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//IE浏览器</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj.attachEvent)&#123;</span><br><span class=\"line\">        obj.attachEvent(<span class=\"string\">\"on\"</span>+sEv,fn);</span><br><span class=\"line\">   <span class=\"comment\">//标准浏览器</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        obj.addEventListener(sEv,fn,<span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">//false表示冒泡，true表示捕获，大多数情况下用冒泡不用捕获</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Yquery</span>(<span class=\"params\">yArg</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//yArg这 里表示任何类型的参数，命名要规范。</span></span><br><span class=\"line\">    <span class=\"comment\">//我们需要根据传进来的不同参数做不同的事情</span></span><br><span class=\"line\">    <span class=\"comment\">//首先判断传进来的参数的类型</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"keyword\">typeof</span> yArg)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果传进来的参数是函数类型,就直接让window.onload执行</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'function'</span>:</span><br><span class=\"line\">          <span class=\"comment\">//使用绑定的方式，</span></span><br><span class=\"line\">          myAddEvent(<span class=\"built_in\">window</span>,<span class=\"string\">\"load\"</span>,yArg);</span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"3-封装字符串Yquery-js\">3.封装字符串Yquery.js<a href=\"2018/06/28/Yquery#3-封装字符串Yquery-js\"></a></h3><p>描述：</p>\n<ul>\n<li><p>我们只需要判断第一个字符就可以判断传进来的字符串具体是哪一种类型(ID选择器、标签选择器、类选择器).</p>\n</li>\n<li><p>选择符本身只是用来选择元素的，而不对它做任何操作，对它做操作的是选择符后面的方法。</p>\n</li>\n<li><p><code>substring(1)</code>：截取字符串，从位置1开始截取，一直到结束，返回值是截取的字符串，在这里这个方法非常有用。</p>\n</li>\n<li><p>用一个参数保存选择器选择的元素，<code>this.elements = []</code>;</p>\n</li>\n<li><p><code>getByClass()</code>：类选择器的获取，<code>getElementsByTagName()</code>、<code>className()</code>;</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//通过JavaScript操作DOM方式获取类选择器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getByClass</span>(<span class=\"params\">oParent, sClass</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> aEle = oParent.getElementsByTagName(<span class=\"string\">'*'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> aResult = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; aEle.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(aEle[i].className == sClass) &#123;</span><br><span class=\"line\">            aResult.push(aEle[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> aResult;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Yquery</span>(<span class=\"params\">yArg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//yArg这 里表示任何类型的参数，命名要规范。 </span></span><br><span class=\"line\">    <span class=\"comment\">//我们需要根据传进来的不同参数做不同的事情</span></span><br><span class=\"line\">    <span class=\"comment\">//首先判断传进来的参数的类型</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.elements = []; <span class=\"comment\">//用来保存选择器选择的元素</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(<span class=\"keyword\">typeof</span> yArg) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果传进来的参数是字符串类型，又分为三种情况</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'string'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">switch</span>(yArg.charAt(<span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'#'</span>: <span class=\"comment\">//ID</span></span><br><span class=\"line\">                <span class=\"comment\">//如果选择器是ID选择器，那么yArg的值可能是\"#div\",我们需要把#去掉，剩下的才是我们想要的</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> obj = <span class=\"built_in\">document</span>.getElementById(yArg.substring(<span class=\"number\">1</span>));</span><br><span class=\"line\">                <span class=\"comment\">//这时，elements数组就存了被ID选择器选中的字符串</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.elements.push(obj);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'.'</span>: <span class=\"comment\">//class</span></span><br><span class=\"line\">                <span class=\"comment\">//从哪个父元素选择元素？从整个文档选取类选择器。</span></span><br><span class=\"line\">                <span class=\"comment\">//用substring(1)去掉类选择器的\". \"</span></span><br><span class=\"line\">                <span class=\"comment\">//用返回的数组aResult，替换elements数组</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.elements = getByClass(<span class=\"built_in\">document</span>, yArg.substring(<span class=\"number\">1</span>));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>: <span class=\"comment\">//tagName</span></span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.elements = <span class=\"built_in\">document</span>.getElementsByTagName(yArg);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>字符串的封装就完成了，现在我们来测试一下吧。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;button&gt;我是按钮&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">     <span class=\"keyword\">new</span> Yquery(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> Yquery(<span class=\"string\">\"button\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"a\"</span>)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p>输出结果：在控制台中可以看到a,这里我只测试了标签选择器，大家也可以测测ID选择器和类选择器.</p>\n<h3 id=\"4-封装对象Yquery-js\">4.封装对象Yquery.js<a href=\"2018/06/28/Yquery#4-封装对象Yquery-js\"></a></h3><p>封装对象特别简单，只需要把对象直接<code>push</code>到<code>elements</code>数即可。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Yquery(yArg) &#123;</span><br><span class=\"line\">    //yArg这 里表示任何类型的参数，命名要规范。 </span><br><span class=\"line\">    //我们需要根据传进来的不同参数做不同的事情</span><br><span class=\"line\">    //首先判断传进来的参数的类型</span><br><span class=\"line\">    this.elements = []; //用来保存选择器选择的元素</span><br><span class=\"line\">    switch(typeof yArg) &#123;</span><br><span class=\"line\">        case &apos;object&apos;:</span><br><span class=\"line\">        //如果传进来的参数是字符串对象类型，就直接放到elemens数组</span><br><span class=\"line\">               this.elements.push(yArg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"5-入口函数的封装\">5.入口函数的封装<a href=\"2018/06/28/Yquery#5-入口函数的封装\"></a></h3><p>我们现在自己封装的库每次测试的时候的入口函数为</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Yquery(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p>我们参照一下JQuery的入口函数</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    $(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">   $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p>那我们怎样才能实现这样的写法呢？</p>\n<p>做法：声明一个<code>$</code>符号函数，函数内部返回我们的构造函数，以代替每次的的入口函数都要写<code>new Yquery()</code></p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//声明一个$符号函数，函数内部返回我们的构造函数以代替每次的的入口函数都要写new Yquery</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$</span>(<span class=\"params\">yArg</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Yquery(yArg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>经过这样修改之后，我们的入口函数就可以写成下面的形式了。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    $(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">   $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></div></figure>\n<h3 id=\"6-封装类似JQuery中的click-函数\">6.封装类似JQuery中的<code>click()</code>函数<a href=\"2018/06/28/Yquery#6-封装类似JQuery中的click-函数\"></a></h3><figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//给Yquery函数绑定click事件</span></span><br><span class=\"line\">Yquery.prototype.click = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//不同的选择器可能选择多个元素，给每个选中的元素都需要添加单击事件</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//elements数组里面放的就是被选中的元素</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.elements.length; i++) &#123;</span><br><span class=\"line\">        myAddEvent(<span class=\"keyword\">this</span>.elements[i], <span class=\"string\">\"click\"</span>, fn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"7-封装类似JQuery中的show-函数和hide-函数\">7.封装类似JQuery中的<code>show()</code>函数和<code>hide()</code>函数<a href=\"2018/06/28/Yquery#7-封装类似JQuery中的show-函数和hide-函数\"></a></h3><p><code>display:block==show()</code></p>\n<p><code>display:none==hide()</code></p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//封装类似jQuery中的show()函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">Yquery.prototype.show= <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//不同的选择器可能选择多个元素，给每个选中的元素都需要添加show事件</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//elements数组里面放的就是被选中的元素,让被选中的每一个元素都在展示出来</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.elements.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.elements[i].style.display=<span class=\"string\">\"block\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//封装类似jQuery中的hide()函数</span></span><br><span class=\"line\">Yquery.prototype.hide= <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//不同的选择器可能选择多个元素，给每个选中的元素都需要添加show事件</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//elements数组里面放的就是被选中的元素,让被选中的每一个元素都在隐藏起来</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.elements.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.elements[i].style.display=<span class=\"string\">\"none\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"8-封装hover-函数\">8.封装<code>hover()</code>函数<a href=\"2018/06/28/Yquery#8-封装hover-函数\"></a></h3><figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//封装类似jQuery中的hover()函数</span></span><br><span class=\"line\"><span class=\"comment\">//hover()方法需要两个参数，一个是mouseenter(),一个是mouseleave()</span></span><br><span class=\"line\">Yquery.prototype.hover= <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fnEnter,fnLeave</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//不同的选择器可能选择多个元素，给每个选中的元素都需要添加hover方法</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//elements数组里面放的就是被选中的元素</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.elements.length; i++) &#123;</span><br><span class=\"line\">        myAddEvent(<span class=\"keyword\">this</span>.elements[i], <span class=\"string\">\"mouseenter\"</span>, fnEnter);</span><br><span class=\"line\">        myAddEvent(<span class=\"keyword\">this</span>.elements[i], <span class=\"string\">\"mouseleave\"</span>, fnLeave);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n<p>那我们现在来测试一下<code>hover()</code>函数</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">   &lt;div id=<span class=\"string\">\"div1\"</span> style=<span class=\"string\">\"width: 100px; height: 100px; background: red;\"</span>&gt;</span><br><span class=\"line\">   &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">'#div1'</span>).hover(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.title=<span class=\"string\">'mouseenter'</span>;</span><br><span class=\"line\">         &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.title=<span class=\"string\">'mouseleave'</span>;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></div></figure>\n<h3 id=\"9-封装css-函数\">9.封装<code>css()</code>函数<a href=\"2018/06/28/Yquery#9-封装css-函数\"></a></h3><p>参数个数不固定(arguements.length)</p>\n<p>注意：在利用css()函数获取值的时候，如下代码</p>\n<p><code>$(&quot;div&quot;).css(&quot;background-color&quot;);</code></p>\n<p>,假设现在页面上有三个div，到底获取的是哪一个”div”的背景颜色值呢？</p>\n<p>答案：是获取第一个匹配元素的样式属性值。</p>\n<p>那我们这样封装<code>css()</code>函数有问题吗？</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//封装css(方法)</span></span><br><span class=\"line\"><span class=\"comment\">//CSS()方法主要有两个功能：设置样式(两个参数)和获取样式(一个参数),也就是说参数个数不固定</span></span><br><span class=\"line\">Yquery.prototype.css = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attr, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.lenght == <span class=\"number\">2</span>) <span class=\"comment\">//设置样式</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//不同的选择器可能选择多个元素，给每个选中的元素都需要添加css方法</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//elements数组里面放的就是被选中的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.elements.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.elements[i].style[attr] = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;   <span class=\"comment\">//获取样式</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取第一个匹配元素的样式属性值,直接给style()方法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.elements[<span class=\"number\">0</span>].style[attr];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>肯定是有问题的，Javascript中的<code>style()</code>方法在设置属性值的时候一切正常，但是在获取值的时候却出现了问题：Javascript中的<code>style()</code>方法只能获取的是行间样式，其他的样式值获取不到。但是绝大样式都不是行间样式，都是写在一个外部文件然后引入。</p>\n<p>什么是行间样式呢？就是直接写在标签元素内部的,例如下面的代码。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=<span class=\"string\">\"width:150px;height:150px;background-color:pink;\"</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></div></figure>\n<p>如果不相信的话我们可以测试一下</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">   #div1 &#123;</span><br><span class=\"line\">      width: <span class=\"number\">100</span>px;</span><br><span class=\"line\">      height: <span class=\"number\">100</span>px;</span><br><span class=\"line\">      background: red;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/style&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;div id=\"div1\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            $(function() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                $('#div1').click(function() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                    console.log($('#div1').css('width'));</span></span><br><span class=\"line\"><span class=\"regexp\">                &#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">            &#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>script&gt;</span><br></pre></td></tr></table></div></figure>\n<p>这样的形式获取的width值为空，那我们换成行间样式在测试一下，</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">       &lt;div id=<span class=\"string\">\"div1\"</span> style=<span class=\"string\">\"width:150px;height:150px;background-color:pink;\"</span>&gt;</span><br><span class=\"line\">       &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">   &lt;/</span>body&gt;</span><br><span class=\"line\">   &lt;script&gt;</span><br><span class=\"line\">           $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">               $(<span class=\"string\">'#div1'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                   <span class=\"built_in\">console</span>.log($(<span class=\"string\">'#div1'</span>).css(<span class=\"string\">'width'</span>));</span><br><span class=\"line\">               &#125;);</span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\">       &lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p>这样的形式就可以获取到CSS的width值。</p>\n<p>我们总不可能以后把样式就写在标签内部吧，我们总得寻找一个解决的办法。</p>\n<p>解决办法：我们封装一个<code>getStyle()</code>函数，然后绑定在<code>CSS()</code>函数的获取值的方法中。</p>\n<p>用到的方法：<code>currentStyle</code>属性、<code>getComputedStyle()</code>方法：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//getStyle()：用来获取CSS样式属性值。</span><br><span class=\"line\">function getStyle(obj,attr)&#123;</span><br><span class=\"line\">    if(obj.currentStyle)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return obj.currentStyle[attr];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else&#123;</span><br><span class=\"line\">        return getComputedStyle(obj,false)[attr];</span><br><span class=\"line\"></span><br><span class=\"line\">    //参数中的false并没有什么实际的意义，只要随便传一个值就行，</span><br><span class=\"line\">    //你也可以写true,或者随便的一个数字、字符。</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//封装css(方法)</span><br><span class=\"line\">//CSS()方法主要有两个功能：设置样式(两个参数)和获取样式(一个参数),也就是说参数个数不固定</span><br><span class=\"line\">Yquery.prototype.css = function(attr, value) &#123;</span><br><span class=\"line\">    if(arguments.length == 2) //设置样式</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //不同的选择器可能选择多个元素，给每个选中的元素都需要添加css方法</span><br><span class=\"line\">        var i = 0;</span><br><span class=\"line\">        //elements数组里面放的就是被选中的元素</span><br><span class=\"line\">        for(i = 0; i &lt; this.elements.length; i++) &#123;</span><br><span class=\"line\">            this.elements[i].style[attr] = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;   //获取样式</span><br><span class=\"line\">        //获取第一个匹配元素的样式属性值。</span><br><span class=\"line\">        return getStyle(this.elements[0],attr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>现在的代码应该就没有什么问题了，我们可以测试一下发现，不论是行间样式的属性值，还是外部引入的，我们都可以获得它的属性值，而不会是一个空值。</p>\n<h3 id=\"10-第二次修改关于this\">10.第二次修改关于this<a href=\"2018/06/28/Yquery#10-第二次修改关于this\"></a></h3><p>在测试中，我们总能发现各种各样有趣的问题，现在再来看一个有趣的问题吧。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">            #div1 &#123;</span><br><span class=\"line\">                width: <span class=\"number\">100</span>px;</span><br><span class=\"line\">                height: <span class=\"number\">100</span>px;</span><br><span class=\"line\">                background: red;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/style&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">   &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;div id=\"div1\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"> &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            $(function() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                $('#div1').hover(function ()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                    $('#div1').css('background-color', 'green');</span></span><br><span class=\"line\"><span class=\"regexp\">                &#125;, function ()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                   $('#div1').css('background-color', 'red');</span></span><br><span class=\"line\"><span class=\"regexp\">                &#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">            &#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>script&gt;</span><br></pre></td></tr></table></div></figure>\n<p>我们可以发现上述代码运行的结果本身并没有什么问题，但是在代码书写的方面确是有些怪异的。<br>如果上述代码我们引入jQuery的库，我们肯定是这样写的:</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">            #div1 &#123;</span><br><span class=\"line\">                width: <span class=\"number\">100</span>px;</span><br><span class=\"line\">                height: <span class=\"number\">100</span>px;</span><br><span class=\"line\">                background: red;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/style&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">   &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;div id=\"div1\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"> &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            $(function() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                $('#div1').hover(function ()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                    $(this).css('background-color', 'green');</span></span><br><span class=\"line\"><span class=\"regexp\">                &#125;, function ()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                   $('this').css('background-color', 'red');</span></span><br><span class=\"line\"><span class=\"regexp\">                &#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">            &#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>script&gt;</span><br></pre></td></tr></table></div></figure>\n<p>直接用this替换？？我们自己写的库可以做到吗？我们来测试一下</p>\n<p>我们可以发现在标准的浏览器下，换成this这个也是可以顺利执行的，但是在IE浏览器下不出乎意料的就报错了，IE浏览器总是让我们头疼的浏览器,我们来想一下这是为什么呢?</p>\n<p>我们<code>console.log</code>一下this,看下标准浏览器和IE浏览器的差异。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'#div1'</span>).hover(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">          alert(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        $(<span class=\"keyword\">this</span>).css(<span class=\"string\">'background'</span>, <span class=\"string\">'green'</span>);</span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        $(<span class=\"keyword\">this</span>).css(<span class=\"string\">'background'</span>, <span class=\"string\">'red'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1236309/o_1.png\" alt=\" \" class=\"article-img\"></p>\n<ul>\n<li><p>谷歌浏览器下this指向这个对象div本身.</p>\n</li>\n<li><p>比较老的IE浏览器下的this指向的是window，this指向window而不是指向对象div本身，肯定就不出乎意料的就报错了。</p>\n</li>\n</ul>\n<p>这时我们就想起来了不能用this的四种情况：</p>\n<p><strong>行间样式、套一层、绑定、定时器。</strong></p>\n<p><code>hover()</code>函数是把<code>mouseenter()</code>和<code>mouseleave()</code>通过绑定封装的，我们再看一下我们的绑定函数</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myAddEvent</span>(<span class=\"params\">obj,sEv,fn</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//IE浏览器</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj.attachEvent)&#123;</span><br><span class=\"line\">        obj.attachEvent(<span class=\"string\">\"on\"</span>+sEv,fn);</span><br><span class=\"line\">   <span class=\"comment\">//标准浏览器</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        obj.addEventListener(sEv,fn,<span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">//false表示冒泡，true表示捕获，大多数情况下用冒泡不用捕获</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>IE下面的绑定<code>attachEvent()</code>有bug,会把被绑的函数中的this指向window,而不是指向对象本身,标准浏览器下面的<code>addEventListener()</code>没有这个问题，this就是指向对象本身，</p>\n<p>那我们怎么去解决IE浏览器下的这个问题呢？为了统一，我们把它们看作是都有bug的，这样处理起来比较方便。我们可以利用<code>call()</code>函数和<code>apply()</code>函数，改变this的指向。所以我们改变一下绑定函数<code>myAddEvent()</code>。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myAddEvent</span>(<span class=\"params\">obj,sEv,fn</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//IE浏览器</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj.attachEvent)&#123;</span><br><span class=\"line\">        obj.attachEvent(<span class=\"string\">\"on\"</span>+sEv,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            fn.call(obj);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">   <span class=\"comment\">//标准浏览器</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        obj.addEventListener(sEv,fn,<span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">//false表示冒泡，true表示捕获，大多数情况下用冒泡不用捕获</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>通过<code>call()</code>函数我们手动将IE浏览器的this指向了对象，这下就和标准浏览器执行一样的效果了。</p>\n<h3 id=\"11-toggle-函数的封装\">11.toggle()函数的封装<a href=\"2018/06/28/Yquery#11-toggle-函数的封装\"></a></h3><p><code>toggle()</code>函数有两个参数，这两个参数可以来回切换：</p>\n<p>参照<code>toggle()</code>函数我们可以发现一个规律：如果我们给一个按钮添加一个click事件，第一次点击按钮的时候，触发fn1函数，第二次点击按钮的时候触发fn2函数，第三次点击按钮的时候触发fn1函数，第四次点击按钮的时候触发fn2函数，以此类推，所以，我们需要设置一计数器。</p>\n<h4 id=\"11-1-计数器的封装\">11.1.计数器的封装<a href=\"2018/06/28/Yquery#11-1-计数器的封装\"></a></h4><figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;input id=<span class=\"string\">\"btn1\"</span> type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"我是按钮\"</span> /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">window.onload=function ()</span></span><br><span class=\"line\"><span class=\"regexp\">&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    var oBtn=document.getElementById('btn1');</span></span><br><span class=\"line\"><span class=\"regexp\">    var count=0;</span></span><br><span class=\"line\"><span class=\"regexp\">    oBtn.onclick=function ()</span></span><br><span class=\"line\"><span class=\"regexp\">    &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        console.log(count++);</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></div></figure>\n<p>运行结果：</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1236309/o_2.png\" alt=\" \" class=\"article-img\"></p>\n<p>上述形式的计数器在只有一个button按钮,没有一点问题，那如果页面上存在多个Button按钮、并且想要这些按钮都可以计数，而且是分别从0开始计数，这个该怎么实现呢？</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"按钮1\"</span> /&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"按钮2\"</span> /&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"按钮3\"</span> /&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"按钮4\"</span> /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">window.onload=function ()</span></span><br><span class=\"line\"><span class=\"regexp\">&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    var aBtn=document.getElementsByTagName('input');</span></span><br><span class=\"line\"><span class=\"regexp\">    var i=0;</span></span><br><span class=\"line\"><span class=\"regexp\">    var count=0;</span></span><br><span class=\"line\"><span class=\"regexp\">    </span></span><br><span class=\"line\"><span class=\"regexp\">    for(i=0;i&lt;aBtn.length;i++)</span></span><br><span class=\"line\"><span class=\"regexp\">    &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        aBtn[i].onclick=function ()</span></span><br><span class=\"line\"><span class=\"regexp\">        &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            console.log(count++);</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></div></figure>\n<p>运行结果：</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1236309/o_3.png\" alt=\" \" class=\"article-img\"></p>\n<p>我们打开控制台测试了一下发现：这些按钮并不是分别从0开始计数的，而是累加起来计数的，那我们怎么样可以分离每个按钮的计数呢？让每个按钮都分别从0开始计数，那我们可能需要多个计数器。这样才可以分离每个按钮的计数情况。</p>\n<p>解决办法：我们封装一个<code>addClick()</code>方法，我们先来简单的封装一下。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"按钮1\"</span> /&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"按钮2\"</span> /&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"按钮3\"</span> /&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"按钮4\"</span> /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">window.onload=function ()</span></span><br><span class=\"line\"><span class=\"regexp\">&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    var aBtn=document.getElementsByTagName('input');</span></span><br><span class=\"line\"><span class=\"regexp\">    var i=0;</span></span><br><span class=\"line\"><span class=\"regexp\">    var count=0;</span></span><br><span class=\"line\"><span class=\"regexp\">    for(i=0;i&lt;aBtn.length;i++)</span></span><br><span class=\"line\"><span class=\"regexp\">    &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        addClick(aBtn[i]);</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    function addClick(obj)</span></span><br><span class=\"line\"><span class=\"regexp\">    &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        obj.onclick=function ()</span></span><br><span class=\"line\"><span class=\"regexp\">        &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">             console.log(count++);</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></div></figure>\n<p>这样封装其实并没有什么作用，运行结果还是如上图所示，这些按钮并不是分别从0开始计数的，而是累加起来计数的。</p>\n<p>我们可以再来稍微改变一下。我们目前最需要的就是增加多个计数器，我们可以这样做。</p>\n<p>这里用的其实是闭包的特性。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"按钮1\"</span> /&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"按钮2\"</span> /&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"按钮3\"</span> /&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"按钮4\"</span> /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    window.onload = function() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        var aBtn = document.getElementsByTagName('input');</span></span><br><span class=\"line\"><span class=\"regexp\">        var i = 0;</span></span><br><span class=\"line\"><span class=\"regexp\">        for(i = 0; i &lt; aBtn.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            addClick(aBtn[i]);</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        function addClick(obj) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            var count = 0;</span></span><br><span class=\"line\"><span class=\"regexp\">            obj.onclick = function() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                 console.log(count++);</span></span><br><span class=\"line\"><span class=\"regexp\">            &#125;;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></div></figure>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1236309/o_4.png\" alt=\" \" class=\"article-img\"></p>\n<p>经过这么一番改变，我们想要的的效果可算是好了，不同的按钮会从0开始计数，有多少个按钮就会添加多少个计数器。</p>\n<p>我们可以改变一下函数的形式，让它变得更加好看一些，更加符合JS的语法规范,熟悉JavaScript语法的人都知道在JavaScript中函数有两种形式，一种是带参数的形式，一种是不带参数的形式，那我们可以这样改写一下。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">div.onclick=a;</span><br><span class=\"line\"></span><br><span class=\"line\">div.onclick=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上面两种形式的函数的写法都是正确的。</span></span><br></pre></td></tr></table></div></figure>\n<p>那参照上面我们可以将我们的计数器函数也改变一下。</p>\n<p><code>(function(){})()</code></p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onload=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> aBtn=<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'input'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;aBtn.length;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\">            obj.onclick=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">            </span>&#123;</span><br><span class=\"line\">                alert(count++);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;)(aBtn[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p>我们对于这样的写法可能还不太满意，那么我们可以再来改变一下,一个更加简便的方法。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> aBtn=<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'input'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;aBtn.length;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        aBtn[i].onclick=(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">count</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                alert(count++);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;)(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></div></figure>\n<h3 id=\"11-2我们接着来封装我们toggle-函数\">11.2我们接着来封装我们toggle()函数<a href=\"2018/06/28/Yquery#11-2我们接着来封装我们toggle-函数\"></a></h3><figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//封装toggle()函数</span></span><br><span class=\"line\"><span class=\"comment\">//toggle()函数可以有无数多个参数</span></span><br><span class=\"line\">Yquery.prototype.toggle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//不同的选择器可能选择多个元素，给每个选中的元素都需要添加toggle方法</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//elements数组里面放的就是被选中的元素</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.elements.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//计数函数的封装</span></span><br><span class=\"line\">        (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addToggle</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">            myAddEvent(obj, <span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//arguments()函数获取一个函数形参的个数</span></span><br><span class=\"line\">                <span class=\"comment\">//这里面的函数指的是就是封装的toggle()函数，</span></span><br><span class=\"line\">                <span class=\"comment\">//也就是说，arguments()函数获取的是toggle()函数的形参的个数。</span></span><br><span class=\"line\">                <span class=\"built_in\">arguments</span>[count % <span class=\"built_in\">arguments</span>.length].call(obj);</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)(<span class=\"keyword\">this</span>.elements[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这样封装对不对呢？我们来测试一下。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'input'</span>).toggle(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'b'</span>);</span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">'c'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;input type=\"button\" value=\"1\" /</span>&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"2\"</span> /&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"3\"</span> /&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"4\"</span> /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/body&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1236309/o_5.png\" alt=\" \"><br>经过测试，我们可以发现报错了，那原因是为什么呢？</p>\n<p>我们给myAddEvent()中<code>console.log(arguments.length);</code>发现值为1，并且还报错了，可是我们明明给<code>toggle()</code>函数传了3个函数，按道理说值应该为3呀，</p>\n<p>通过以往我们学javascript的经验，我们可以知道在javascript中一个this、另一个就是arguments非常容易混乱，这里就是arguments在捣鬼。我们再次测试一下，</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yquery.prototype.toggle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>.length);<span class=\"comment\">//在控制台输出3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.elements.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//计数函数的封装</span></span><br><span class=\"line\">        addToggle(<span class=\"keyword\">this</span>.elements[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addToggle</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        myAddEvent(obj, <span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>.length);<span class=\"comment\">//在控制台输出1，并且报错</span></span><br><span class=\"line\">            <span class=\"built_in\">arguments</span>[count%<span class=\"built_in\">arguments</span>.length].call(obj);</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1236309/o_6.png\" alt=\" \" class=\"article-img\"></p>\n<p>这下我们就明白了，我们需要保存输出结果为3的这个<code>arguments.length</code>的值，用这个值去绑定我们的<code>myAddEvent()</code>函数肯定就是不会错了。如下代码</p>\n<h3 id=\"11-3-第三次修改toggle-函数\">11.3.第三次修改toggle()函数<a href=\"2018/06/28/Yquery#11-3-第三次修改toggle-函数\"></a></h3><figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//封装toggle()函数</span></span><br><span class=\"line\"><span class=\"comment\">//toggle()函数可以有无数多个参数</span></span><br><span class=\"line\">Yquery.prototype.toggle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//不同的选择器可能选择多个元素，给每个选中的元素都需要添加toggle方法</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//我们需要提前将arguments的值保存下来，以免被后面的函数的arguments所覆盖。</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> _arguments=<span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"comment\">//elements数组里面放的就是被选中的元素</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.elements.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//计数函数的封装</span></span><br><span class=\"line\">        addToggle(<span class=\"keyword\">this</span>.elements[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addToggle</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        myAddEvent(obj, <span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//arguments()函数获取一个函数形参的个数</span></span><br><span class=\"line\">            <span class=\"comment\">//这里面的函数指的是就是封装的toggle()函数，</span></span><br><span class=\"line\">            <span class=\"comment\">//也就是说，arguments()函数获取的是toggle()函数的形参的个数。</span></span><br><span class=\"line\">            _arguments[count% _arguments.length].call(obj);</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>我们可以再来测试一下</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'input'</span>).toggle(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'b'</span>);</span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">'c'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;input type=\"button\" value=\"1\" /</span>&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"2\"</span> /&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"3\"</span> /&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"4\"</span> /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/body&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1236309/o_7.png\" alt=\" \" class=\"article-img\"></p>\n<p>这下就完全没有问题了</p>\n<h3 id=\"11-4-封装的toogle-函数的小实例\">11.4.封装的toogle()函数的小实例<a href=\"2018/06/28/Yquery#11-4-封装的toogle-函数的小实例\"></a></h3><figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">#div1 &#123;width:100px; height:100px; background:red;&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/style&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">$(function ()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    $('input').toggle(function ()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        $('#div1').hide();</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;, function ()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        $('#div1').show();</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"我是按钮\"</span> /&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"div1\"</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br></pre></td></tr></table></div></figure>\n<p>点击按钮会隐藏，如果在点击一次按钮会显示，这就是<code>toogle()</code>函数的效果。</p>\n<p>12.封装<code>attr()</code>方法和封装<code>css()</code>方法有些类似</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//封装attr(方法)</span></span><br><span class=\"line\"><span class=\"comment\">//attr()方法主要有两个功能：设置属性(两个参数)和获取属性(一个参数),也就是说参数个数不固定</span></span><br><span class=\"line\">Yquery.prototype.attr = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attr, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length == <span class=\"number\">2</span>) <span class=\"comment\">//设置属性值</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//不同的选择器可能选择多个元素，给每个选中的元素都需要添加attr方法</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//elements数组里面放的就是被选中的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.elements.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.elements[i][attr] = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//获取属性值</span></span><br><span class=\"line\">        <span class=\"comment\">//获取第一个匹配元素的属性值。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.elements[<span class=\"number\">0</span>][attr];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>我们可以简单地测试一下：</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;input id=<span class=\"string\">\"txt1\"</span> type=<span class=\"string\">\"text\"</span> /&gt;</span><br><span class=\"line\">&lt;input id=<span class=\"string\">\"btn1\"</span> type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"读取文字\"</span> /&gt;</span><br><span class=\"line\">&lt;input id=<span class=\"string\">\"btn2\"</span> type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"设置文字\"</span> /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">$(function ()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    $('#btn2').click(function ()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        $('#txt1').attr('value', '我是设置的值')</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">    $('#btn1').click(function ()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        console.log($('#txt1').attr('value'));</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></div></figure>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1236309/o_8.png\" alt=\" \" class=\"article-img\"></p>\n<h3 id=\"13-封装eq-方法，索引值从0开始。\">13.封装eq()方法，索引值从0开始。<a href=\"2018/06/28/Yquery#13-封装eq-方法，索引值从0开始。\"></a></h3><figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//封装eq()函数</span></span><br><span class=\"line\"><span class=\"comment\">//eq()函数有一个参数，获取第几个元素，索引值从0开始。</span></span><br><span class=\"line\">Yquery.prototype.eq=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//所有能选择到的元素都存在elements数组中</span></span><br><span class=\"line\">  <span class=\"comment\">//需要将返回的普通DOM对象封装成我们自己写的Yquery对象。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> $(<span class=\"keyword\">this</span>.elements[n]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>我们可以测试一下</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    div &#123;</span><br><span class=\"line\">          width: <span class=\"number\">100</span>px;</span><br><span class=\"line\">          height: <span class=\"number\">100</span>px;</span><br><span class=\"line\">          background: red;</span><br><span class=\"line\">          float: left;</span><br><span class=\"line\">          margin: <span class=\"number\">10</span>px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/style&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;div&gt;&lt;/</span>div&gt;</span><br><span class=\"line\">        &lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    $(function() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        $('div').eq(0).css('background', 'green');</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></div></figure>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1236309/o_9.png\" alt=\" \" class=\"article-img\"></p>\n<h3 id=\"14-封装find-方法\">14.封装find()方法<a href=\"2018/06/28/Yquery#14-封装find-方法\"></a></h3><p>在jQuery的<code>find()</code>方法中的作用是查找指定元素的子元素。</p>\n<p><code>find()</code>方法的参数只有一个，但是都有什么类型的呢？我们可以先看一下在jQuery库中find()方法都有哪些参数？</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">        &lt;ul id=<span class=\"string\">\"ul1\"</span>&gt;</span><br><span class=\"line\">            &lt;li&gt;&lt;/li&gt;</span><br><span class=\"line\">            &lt;li&gt;&lt;/li&gt;</span><br><span class=\"line\">            &lt;li&gt;&lt;/li&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;li class=\"box\"&gt;&lt;/</span>li&gt;</span><br><span class=\"line\">            &lt;li <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"box\"</span>&gt;&lt;/li&gt;</span><br><span class=\"line\">            &lt;li&gt;&lt;/li&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;ol&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;li&gt;&lt;/</span>li&gt;</span><br><span class=\"line\">            &lt;li&gt;&lt;/li&gt;</span><br><span class=\"line\">            &lt;li&gt;&lt;/li&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/ol&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>body&gt;</span><br><span class=\"line\">    $(<span class=\"string\">\"ul\"</span>).find(<span class=\"string\">\"li\"</span>);</span><br><span class=\"line\">    $(<span class=\"string\">\"ul\"</span>).find(<span class=\"string\">\"ol\"</span>);</span><br><span class=\"line\">    $(<span class=\"string\">\"#ul1\"</span>).find(<span class=\"string\">\"li\"</span>);</span><br><span class=\"line\">    $(<span class=\"string\">\"ul\"</span>).find(<span class=\"string\">\".box\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//注意find()方法没有这种形式：</span></span><br><span class=\"line\">    $(<span class=\"string\">\"#div1\"</span>).find(<span class=\"string\">\"#ul1\"</span>);</span><br></pre></td></tr></table></div></figure>\n<p>由此我们可以得出<code>find()</code>方法的参数有两种形式：一种直接是标签名的形式、一种是类名的形式。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//封装find()函数</span><br><span class=\"line\">//find()函数只有一个参数，但是参数分为两种形式</span><br><span class=\"line\">//一种直接是标签名的形式、一种是类名的形式。</span><br><span class=\"line\">Yquery.prototype.find = function(str) &#123;</span><br><span class=\"line\">    //不同的选择器可能选择多个元素，给每个选中的元素都需要添加find()</span><br><span class=\"line\">    var i = 0;</span><br><span class=\"line\">    var aResult = []; //用来存放临时数据的数组</span><br><span class=\"line\">    //elements数组里面放的就是被选中的元素</span><br><span class=\"line\">    for(i = 0; i &lt; this.elements.length; i++) &#123;</span><br><span class=\"line\">        switch(str.charAt(0)) &#123;</span><br><span class=\"line\">            case &apos;.&apos;: //参数是类名的形式</span><br><span class=\"line\">                var aEle = getByClass(this.elements[i], str.substring(1));</span><br><span class=\"line\">                aResult = aResult.concat(aEle);</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            default: //参数是标签名的形式</span><br><span class=\"line\">                var aEle = this.elements[i].getElementsByTagName(str);</span><br><span class=\"line\">                aResult = aResult.concat(aEle);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return aResult;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>我们现在已经算是初步封装好了，那有没有什么问题呢？？我们看一下源代码，我们直接返回的是一个数组aResult，我们可以直接返回一个普通的数组吗？？</p>\n<p>答案：这是不可以的，我们一般情况下利用<code>find()</code>方法找到一个元素或者多个元素，是直接要给后面添加我们封装好的方法的,比如<code>css()、show()、click()</code>方法等，但是普通的数组没有这些方法，我们不可能强行的加上去，所以我们还是需要再改改的。</p>\n<p>解决办法：我们需要创建一个空的Yquery对象<code>newYquery</code>，这个空的Yquery对象newYquery可以直接给后面添加我们封装好的方法的,比如<code>css()、show()、click()</code>方法等，也就是说，用一个空的Yquery对象newYquery来装载我们的普通的数组，把JavaScript对象转化成Yquery对象。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//封装find()函数</span></span><br><span class=\"line\"><span class=\"comment\">//find()函数只有一个参数，但是参数分为两种形式</span></span><br><span class=\"line\"><span class=\"comment\">//一种直接是标签名的形式、一种是类名的形式。</span></span><br><span class=\"line\">Yquery.prototype.find = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//不同的选择器可能选择多个元素，给每个选中的元素都需要添加find()</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> aResult = []; <span class=\"comment\">//用来存放临时数据的数组</span></span><br><span class=\"line\">    <span class=\"comment\">//elements数组里面放的就是被选中的元素</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.elements.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(str.charAt(<span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'.'</span>: <span class=\"comment\">//参数是类名的形式</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> aEle = getByClass(<span class=\"keyword\">this</span>.elements[i], str.substring(<span class=\"number\">1</span>));</span><br><span class=\"line\">                aResult = aResult.concat(aEle);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span> : <span class=\"comment\">//参数是标签名的形式</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> aEle = <span class=\"keyword\">this</span>.elements[i].getElementsByTagName(str);</span><br><span class=\"line\"></span><br><span class=\"line\">                aResult = aResult.concat(aEle);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newYquery = $(); <span class=\"comment\">//我们需要创建一个空的Yquery对象，</span></span><br><span class=\"line\">    newYquery.elements = aResult;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newYquery;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n<p>那现在赶紧来测试一下吧。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;ul id=<span class=\"string\">\"ul1\"</span>&gt;</span><br><span class=\"line\">        &lt;li&gt;我是无序列表&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;li&gt;我是无序列表&lt;/</span>li&gt;</span><br><span class=\"line\">        &lt;li&gt;我是无序列表&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/u</span>l&gt;</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">        &lt;li <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"box\"</span>&gt;我是box&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;li class=\"box\"&gt;我是box&lt;/</span>li&gt;</span><br><span class=\"line\">        &lt;li&gt;我是无序列表&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/u</span>l&gt;</span><br><span class=\"line\">    &lt;ol&gt;</span><br><span class=\"line\">        &lt;li&gt;我是有序列表&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;li&gt;我是有序列表&lt;/</span>li&gt;</span><br><span class=\"line\">        &lt;li&gt;我是有序列表&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>ol&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">     $(function() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            $('ul').find('.box').css('background-color', 'red');</span></span><br><span class=\"line\"><span class=\"regexp\">            $('ul').find('li').css('background-color', 'red');</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></div></figure>\n<p>经过测试，我们可以发现，可以正确的找到参数是类名的形式并且正确的设置样式，但是不能找到参数是标签名的形式，而且会报错，原因是使用的<code>concat()</code>方法。那我们先来看下<code>concat()</code>方法。</p>\n<p>concat()方法：用于连接两个或多个数组，该方法不会改变现有的数组,而仅仅会返回被连接数组的一个副本。</p>\n<p>参数是类名的形式可以使用concat()方法的原因：<code>getByClass()</code>方法获取的值的返回结果就是一个数组。</p>\n<p>参数是标签名的形式不能使用<code>concat()</code>方法的原因：通过<code>getElementsByTagName(&#39;li&#39;)</code>;获取到的是一个HTML集合，虽然看起来像是一个数组，但不是一个数组，并不具备数组的操作，所以不能用concat()方法来连接。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.onload=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> li=<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'li'</span>);</span><br><span class=\"line\">             <span class=\"built_in\">console</span>.log(li)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1236309/o_10.png\" alt=\" \" class=\"article-img\"></p>\n<p>我们可以再看一下数组的集合。</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1236309/o_11.png\" alt=\" \" class=\"article-img\"></p>\n<p>解决办法：我们封装一个函数<code>appendArray()</code>实现连接两个或两个以上HTML集合的功能。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数appendArray():实现连接两个或两个以上HTML集合的功能</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addendArr</span>(<span class=\"params\">arr1, arr2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//把arr2数组的值都push到arr1中。</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class=\"line\">        arr1.push(arr2[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这下可以看一下我们终极的<code>find()</code>方法。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//封装find()函数</span></span><br><span class=\"line\"><span class=\"comment\">//find()函数只有一个参数，但是参数分为两种形式</span></span><br><span class=\"line\"><span class=\"comment\">//一种直接是标签名的形式、一种是类名的形式。</span></span><br><span class=\"line\">Yquery.prototype.find = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//不同的选择器可能选择多个元素，给每个选中的元素都需要添加find()</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> aResult = []; <span class=\"comment\">//用来存放临时数据的数组</span></span><br><span class=\"line\">    <span class=\"comment\">//elements数组里面放的就是被选中的元素</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.elements.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(str.charAt(<span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'.'</span>: <span class=\"comment\">//参数是类名的形式</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> aEle = getByClass(<span class=\"keyword\">this</span>.elements[i], str.substring(<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">                aResult = aResult.concat(aEle);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"comment\">//参数是标签名的形式</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> aEle = <span class=\"keyword\">this</span>.elements[i].getElementsByTagName(str);</span><br><span class=\"line\"> </span><br><span class=\"line\">                addendArr(aResult, aEle);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newYquery = $(); <span class=\"comment\">//我们需要创建一个空的Yquery对象，</span></span><br><span class=\"line\">    newYquery.elements = aResult;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newYquery;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n<p>我们再来测试一下上面有问题的代码，这下可以发现不论是参数是标签形式的，还是参数是类形式的都可以正确的获取到指定元素，并且正确的设置样式。</p>\n<h3 id=\"15-封装index-方法\">15.封装index()方法<a href=\"2018/06/28/Yquery#15-封装index-方法\"></a></h3><p>描述：</p>\n<ul>\n<li><p>从匹配的元素中搜索给定元素的索引值，从0开始计数。</p>\n</li>\n<li><p>获取元素的索引值(同辈元素)，索引的序号从0开始。</p>\n</li>\n<li><p>这时的this.elements会有好多个元素，因为elements数组里面放的就是被选中的元素，</p>\n</li>\n<li><p>和封装css()方法，如果css()只有一个参数(获取属性值)时类似,如果有多个匹配的元素，只获取第一个匹配元素的属性值。this.elements[0]</p>\n</li>\n<li><p>我们现在最主要的就是获取指定元素在其同辈元素的位置，</p>\n</li>\n</ul>\n<p>我们可以先看一个小案例，点击不同的按钮然后返回对应的索引值</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta charset=<span class=\"string\">\"utf-8\"</span> /&gt;</span><br><span class=\"line\">        &lt;title&gt;无标题文档&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            function getIndex(obj) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                /</span><span class=\"regexp\">/获取obj的父节点(body)的孩子节点(4个&lt;input&gt;标签)</span></span><br><span class=\"line\"><span class=\"regexp\">                var aBrother = obj.parentNode.children;</span></span><br><span class=\"line\"><span class=\"regexp\">                var i = 0;</span></span><br><span class=\"line\"><span class=\"regexp\">                /</span><span class=\"regexp\">/obj的节点肯定和aBrother的某个节点相等，可以循环遍历判断一下</span></span><br><span class=\"line\"><span class=\"regexp\">                for(i = 0; i &lt; aBrother.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                    if(aBrother[i] == obj) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                        return i;</span></span><br><span class=\"line\"><span class=\"regexp\">                    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">                &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">            &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">            window.onload = function() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                var aBtn = document.getElementsByTagName('input');</span></span><br><span class=\"line\"><span class=\"regexp\">                var i = 0;</span></span><br><span class=\"line\"><span class=\"regexp\">                for(i = 0; i &lt; aBtn.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                    aBtn[i].onclick = function() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                        console.log(getIndex(this));</span></span><br><span class=\"line\"><span class=\"regexp\">                    &#125;;</span></span><br><span class=\"line\"><span class=\"regexp\">                &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">            &#125;;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>script&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/head&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;input type=\"button\" value=\"我是按钮1\" /</span>&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"我是按钮2\"</span> /&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"我是按钮3\"</span> /&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"我是按钮4\"</span> /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>html&gt;</span><br></pre></td></tr></table></div></figure>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1236309/o_12.png\" alt=\" \" class=\"article-img\"></p>\n<p>这下我们想要的效果达成了，我们可以将上面的getIndex()方法应用到我们的案例上面。</p>\n<p>封装的index()方法：</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取指定元素在同辈元素处的索引值。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getIndex</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取obj的父节点(body)的孩子节点(4个&lt;input&gt;标签)</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> aBrother = obj.parentNode.children;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//obj的节点肯定和aBrother的某个节点相等，可以循环遍历判断一下</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; aBrother.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(aBrother[i] == obj) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//封装index()方法</span></span><br><span class=\"line\">Yquery.prototype.index = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getIndex(<span class=\"keyword\">this</span>.elements[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>还是来测试一下吧，是不是有点不放心写的对不对？？</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;body&gt;</span><br><span class=\"line\">     &lt;button&gt;我是按钮<span class=\"number\">1</span>&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">     &lt;button&gt;我是按钮2&lt;/</span>button&gt;</span><br><span class=\"line\">     &lt;button&gt;我是按钮<span class=\"number\">3</span>&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">     &lt;button&gt;我是按钮4&lt;/</span>button&gt;</span><br><span class=\"line\">     &lt;button&gt;我是按钮<span class=\"number\">5</span>&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"> &lt;/</span>body&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">         $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">             $(<span class=\"string\">\"button\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                 <span class=\"keyword\">var</span> index=$(<span class=\"keyword\">this</span>).index();</span><br><span class=\"line\">                 <span class=\"built_in\">console</span>.log(index);</span><br><span class=\"line\">             &#125;)</span><br><span class=\"line\">         &#125;)</span><br><span class=\"line\">     &lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1236309/o_13.png\" alt=\" \" class=\"article-img\"></p>\n<p>看到这样的结果就放心了。</p>\n<p>我们现在封装了这么多的方法，那我们现在做一个小案例吧，来满足一个我们的成就感。</p>\n<h3 id=\"16-高级版的css-方法的封装\">16.高级版的css()方法的封装<a href=\"2018/06/28/Yquery#16-高级版的css-方法的封装\"></a></h3><p>在我们以前封装的css()方法中，可以设置或者获取属性，但是我们封装的时候，有两个参数的话是设置属性值，有一个参数的话是获取属性值，所以局限于获取或者设置一个属性值，例如：</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.css(<span class=\"string\">'background-color'</span>,<span class=\"string\">'#ffe'</span>)<span class=\"comment\">//设置背景色</span></span><br><span class=\"line\"></span><br><span class=\"line\">.css(<span class=\"string\">'background-color'</span>)<span class=\"comment\">//获取背景色</span></span><br></pre></td></tr></table></div></figure>\n<p>那如果想要一次添加多个属性值，或者通过链接的结构设置属性值，例如下面的样式，该怎么实现呢？</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.css(&#123;width: &apos;200px&apos;, height: &apos;200px&apos;, background:&apos;red&apos;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">.css(&apos; width&apos;, &apos;200px&apos;&apos;).css(&apos;height&apos;,&apos;200px&apos;).css(&apos;background&apos;,&apos;green&apos;)</span><br><span class=\"line\">//把添加多个属性值的形式看作是JSON字符串</span><br><span class=\"line\">var obj=&#123;width: &apos;200px&apos;, height: &apos;200px&apos;, background:&apos;red&apos;&#125;</span><br><span class=\"line\">.css(obj)</span><br></pre></td></tr></table></div></figure>\n<p>我们可以把一次性添加多个属性值的这种看作是一个json字符串，那么在css()方法中当有一个参数时不仅能表示获取属性值了，而且还可以表示设置多个属性值。</p>\n<p>那么我们怎么循环遍历json字符串呢？利用for..in循环</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> json=&#123;<span class=\"attr\">width</span>: <span class=\"string\">'200px'</span>, <span class=\"attr\">height</span>: <span class=\"string\">'200px'</span>, <span class=\"attr\">background</span>:<span class=\"string\">'red'</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> i=<span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> json)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(i+<span class=\"string\">':'</span>+json[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p>输出结果</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1236309/o_16.png\" alt=\" \" class=\"article-img\"></p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//封装css(方法)</span></span><br><span class=\"line\"><span class=\"comment\">//CSS()方法主要有两个功能：设置样式(两个参数)和获取样式(一个参数),也就是说参数个数不固定</span></span><br><span class=\"line\">Yquery.prototype.css = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attr, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length == <span class=\"number\">2</span>) <span class=\"comment\">//设置样式</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//不同的选择器可能选择多个元素，给每个选中的元素都需要添加css方法</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//elements数组里面放的就是被选中的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.elements.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.elements[i].style[attr] = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//可能是设置多个样式也可能是获取样式</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> attr==<span class=\"string\">'string'</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果是字符串类型的话还是获取样式属性值。</span></span><br><span class=\"line\">        <span class=\"comment\">//获取第一个匹配元素的样式属性值。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> getStyle(<span class=\"keyword\">this</span>.elements[<span class=\"number\">0</span>], attr);</span><br><span class=\"line\">     &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//表示是一个json形式的字符串，设置多个样式属性值</span></span><br><span class=\"line\">        <span class=\"comment\">//elements数组里面放的就是被选中的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.elements.length; i++)</span><br><span class=\"line\">        &#123;<span class=\"comment\">//现在开始循环attr,JSON字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> k=<span class=\"string\">''</span>;  <span class=\"comment\">//空字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(k <span class=\"keyword\">in</span> attr)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.elements[i].style[k]=attr[k];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n<p>高级版的css()方法我们也封装完了，我们可以来测试一下，</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"我是按钮\"</span> /&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"div1\"</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">'input'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            $(<span class=\"string\">'#div1'</span>).css(&#123;</span><br><span class=\"line\">                width: <span class=\"string\">'200px'</span>,</span><br><span class=\"line\">                height: <span class=\"string\">'200px'</span>,</span><br><span class=\"line\">                background: <span class=\"string\">'green'</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1236309/o_14.png\" alt=\" \" class=\"article-img\"></p>\n<p>现在我们实现了一次性添加多个属性值的效果,那链式操作的行为可以不可以实现呢？</p>\n<p><code>.css(&#39;width&#39;, &#39;200px&#39;).css(&#39;height&#39;,&#39;200px&#39;).css(&#39;background&#39;,&#39;green&#39;);</code></p>\n<p>运行结果图17，可以发现只设置成功了第一个css的属性值，其他的并没有设置成功，并没有链式操作的属性，那么我们必须使我们封装的函数有链式操作的特点，那就必须在函数的结束部分加上<code>return this</code>.</p>\n<p>最终极的css()函数的封装：</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//封装css(方法)</span></span><br><span class=\"line\"><span class=\"comment\">//CSS()方法主要有两个功能：设置样式(两个参数)和获取样式(一个参数),也就是说参数个数不固定</span></span><br><span class=\"line\">Yquery.prototype.css = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attr, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length == <span class=\"number\">2</span>) <span class=\"comment\">//设置样式</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//不同的选择器可能选择多个元素，给每个选中的元素都需要添加css方法</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//elements数组里面放的就是被选中的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.elements.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.elements[i].style[attr] = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//可能是设置多个样式也可能是获取样式</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> attr==<span class=\"string\">'string'</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果是字符串类型的话还是获取样式属性值。</span></span><br><span class=\"line\">        <span class=\"comment\">//获取第一个匹配元素的样式属性值。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> getStyle(<span class=\"keyword\">this</span>.elements[<span class=\"number\">0</span>], attr);</span><br><span class=\"line\">     &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//表示是一个json形式的字符串，设置多个样式属性值</span></span><br><span class=\"line\">        <span class=\"comment\">//elements数组里面放的就是被选中的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.elements.length; i++)</span><br><span class=\"line\">        &#123;<span class=\"comment\">//现在开始循环attr,JSON字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> k=<span class=\"string\">''</span>;  <span class=\"comment\">//空字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(k <span class=\"keyword\">in</span> attr)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.elements[i].style[k]=attr[k];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n<p>先不管是什么原因，我们先来测试一下。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      $(<span class=\"string\">'input'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            $(<span class=\"string\">'#div1'</span>)</span><br><span class=\"line\">                .css(<span class=\"string\">'width'</span>, <span class=\"string\">'200px'</span>)</span><br><span class=\"line\">                .css(<span class=\"string\">'height'</span>,<span class=\"string\">'200px'</span>)</span><br><span class=\"line\">                .css(<span class=\"string\">'background'</span>,<span class=\"string\">'green'</span>);</span><br><span class=\"line\">         &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p>运行结果：</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1236309/o_14.png\" alt=\" \" class=\"article-img\"></p>\n<p>这下我们成功的封装了一次设置多个样式属性和链式操作。</p>\n<p>大家是不是有个疑问？？为什么要<code>return this</code>呢？？</p>\n<p>参考：jQuery常用方法之事件对象</p>\n<p>我们先看一个小案例，然后在解释：</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(str);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> show;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    show(<span class=\"string\">'abc'</span>)(<span class=\"string\">'bcd'</span>)(<span class=\"number\">13</span>)(<span class=\"number\">444</span>)(<span class=\"string\">'bdsf'</span>)(<span class=\"number\">3123</span>);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1236309/o_15.png\" alt=\" \" class=\"article-img\"></p>\n<p>为什么函数可以一直一直调用呢？</p>\n<p>这就是函数的链式操作，简单来说就是函数调用之后不断地返回自己，调用之后就返回自己，不断地往后前进。我们给函数的最后加上了return this,就可以实现Yquery库中的类似的链式操作。</p>\n<p>我们可以给我们以前封装的函数都加上<code>return this</code>，它们就都有了链式操作的属性，可以随意的组合，具有强大的效果。</p>\n<p>我们可以测试一下，看下这些方法是不是都可以随意地组合。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html &gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">\"Content-Type\"</span> content=<span class=\"string\">\"text/html; charset=utf-8\"</span> /&gt;</span><br><span class=\"line\">&lt;title&gt;无标题文档&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script src=\"../</span>Yquery.js<span class=\"string\">\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"string\">$(function ()&#123;</span></span><br><span class=\"line\"><span class=\"string\">    $('input').hover(function ()&#123;</span></span><br><span class=\"line\"><span class=\"string\">        document.title='mouseenter';</span></span><br><span class=\"line\"><span class=\"string\">    &#125;, function ()&#123;</span></span><br><span class=\"line\"><span class=\"string\">        document.title='mouseleave';</span></span><br><span class=\"line\"><span class=\"string\">    &#125;).css(&#123;</span></span><br><span class=\"line\"><span class=\"string\">        width: '200px', </span></span><br><span class=\"line\"><span class=\"string\">        height: '100px', </span></span><br><span class=\"line\"><span class=\"string\">        background: 'green'&#125;)</span></span><br><span class=\"line\"><span class=\"string\">     .click(function ()&#123;</span></span><br><span class=\"line\"><span class=\"string\">        console.log('a');</span></span><br><span class=\"line\"><span class=\"string\">    &#125;);</span></span><br><span class=\"line\"><span class=\"string\">&#125;);</span></span><br><span class=\"line\"><span class=\"string\">&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;input type=\"</span>button<span class=\"string\">\" value=\"</span>我是按钮<span class=\"string\">\" /&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p>图18：我们可以发现所有的混搭都可以实现，这下心里是不是很高兴呢？</p>\n<h3 id=\"17-JQuery中阻止默认事件\">17.JQuery中阻止默认事件<a href=\"2018/06/28/Yquery#17-JQuery中阻止默认事件\"></a></h3><p>如果想要在jQuery中阻止默认事件，直接在它的事件处理函数中加上<code>return false</code>即可。</p>\n<p>举例：<code>contextmenu()</code>:右键菜单</p>\n<p>功能：禁止浏览器右键菜单的弹出。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"built_in\">document</span>).on(<span class=\"string\">'contextmenu'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></div></figure>\n<h3 id=\"18-JQuery中阻止冒泡\">18.JQuery中阻止冒泡<a href=\"2018/06/28/Yquery#18-JQuery中阻止冒泡\"></a></h3><figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div style=<span class=\"string\">\"background:red;\"</span>&gt;</span><br><span class=\"line\">    &lt;div style=<span class=\"string\">\"background:green;\"</span>&gt;</span><br><span class=\"line\">        &lt;div style=<span class=\"string\">\"background:#CCC;\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">$(function ()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    $('div').click(function ()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        console.log(this.style.background);</span></span><br><span class=\"line\"><span class=\"regexp\">        return false;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></div></figure>\n<p>描述：</p>\n<ul>\n<li>没有阻止冒泡的输出(没有return false)：</li>\n</ul>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1236309/o_19.png\" alt=\" \" class=\"article-img\"></p>\n<ul>\n<li>阻止了冒泡的输出(有return false)：</li>\n</ul>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1236309/o_20.png\" alt=\" \" class=\"article-img\"></p>\n<p>注意：</p>\n<ul>\n<li><p>在jQuery中，其实return false既代表了阻止默认事件，又代表了阻止冒泡。</p>\n</li>\n<li><p>但是在原生的javascript中，<code>return false</code>只代表阻止默认事件。</p>\n</li>\n<li><p>在我们自己封装的Yquery中，我们同样可以使用<code>return false</code>阻止默认事件和冒泡吗？</p>\n</li>\n</ul>\n<p>上述的同样的阻止默认事件和阻止冒泡的代码中，换成我们自己封装的Yquery库,测试一下，我们可以得出的结论是：</p>\n<p>我们自己封装的Yquery库用<code>return false</code>当然不能阻止冒泡事件和阻止默认事件，原因是因为在JQuery阻止默认事件时，我们用<code>on()</code>方法绑定了<code>contextmenu</code>，但是在我们的Yquery库中却没有这个方法，所以我们也要封装一个<code>on()</code>方法，不能阻止冒泡事件的原因我们在后面再说，让我们先开始封装on()函数吧。</p>\n<h3 id=\"19-on-函数的封装\">19.on()函数的封装<a href=\"2018/06/28/Yquery#19-on-函数的封装\"></a></h3><p>我们先暂时设定on()函数有两个参数，一个是事件名，一个是事件函数。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//封装on()函数</span></span><br><span class=\"line\">Yquery.prototype.on=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sEv,fn</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//不同的选择器可能选择多个元素，给每个选中的元素都需要添加on()方法</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//循环的给每个元素都绑定事件</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"keyword\">this</span>.elements.length;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">         <span class=\"comment\">//给每个元素绑定sEv事件，执行fn函数</span></span><br><span class=\"line\">        myAddEvent(<span class=\"keyword\">this</span>.elements[i],sEv,fn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>我们来测试一下，看看有没有用</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"built_in\">document</span>).on(<span class=\"string\">'contextmenu'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p>给过测试发现并没有什么用，根本就阻止不了默认行为，到底是哪里出了问题呢？再看一下之前封装的on()函数，先来排查错误，肯定不会是for()循环出错了，那么很有可能就是<code>myAddEvent()</code>函数有些问题，那我们再来看一下这个函数：</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myAddEvent</span>(<span class=\"params\">obj, sEv, fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//IE浏览器</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj.attachEvent) &#123;</span><br><span class=\"line\">        obj.attachEvent(<span class=\"string\">\"on\"</span> + sEv, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            fn.call(obj);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//标准浏览器</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        obj.addEventListener(sEv, fn, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">//false表示冒泡，true表示捕获，大多数情况下用冒泡不用捕获</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>myAddEvent()函数中的第三个函数fn其实就是我们传给<code>on()</code>函数的第二个参数，也就是事件处理函数，</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"built_in\">document</span>).on(<span class=\"string\">'contextmenu'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p>事件处理函数中的return false，我们想一想有没有别的函数接收，其实根本就没有人接收，不管我们return什么值都没有其他的函数接收，return 什么都没有什么意思，因为根本就没有人接收，没人管你return什么值。所以我们需要修改myAddEvent()函数，给它里面添加return false。</p>\n<p>我们先把IE浏览器的阻止默认事件封装好</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myAddEvent</span>(<span class=\"params\">obj, sEv, fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//IE浏览器</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj.attachEvent) &#123;</span><br><span class=\"line\">        obj.attachEvent(<span class=\"string\">\"on\"</span> + sEv, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"literal\">false</span>==fn.call(obj))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//标准浏览器</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        obj.addEventListener(sEv, fn, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">//false表示冒泡，true表示捕获，大多数情况下用冒泡不用捕获</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>在IE浏览器下测试，没有问题，阻止了右键的弹出事件。</p>\n<p>那我们的标准浏览器该怎么办呀？</p>\n<p>大家应该都知道如果事件绑定用<code>addEventListener()</code>方法，<br> <code>return false;</code>会失效，我们可以<code>用preventDefault()</code>方法来代替 return false;</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myAddEvent</span>(<span class=\"params\">obj, sEv, fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//IE浏览器</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj.attachEvent) &#123;</span><br><span class=\"line\">        obj.attachEvent(<span class=\"string\">\"on\"</span> + sEv, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"literal\">false</span>==fn.call(obj))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//标准浏览器</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> </span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        obj.addEventListener(sEv, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ev</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//false表示冒泡，true表示捕获，大多数情况下用冒泡不用捕获</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span>(<span class=\"literal\">false</span>==fn.call(obj))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ev.preventDefault();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>在标准浏览器下测试，没有问题，阻止了右键的弹出事件。</p>\n<p>我们不仅要阻止默认事件，我们还要阻止冒泡事件的呀，这里还是得修改myAddEvent()函数，我们需要使用<code>event.cancelBubble</code>来阻止冒泡事件。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myAddEvent</span>(<span class=\"params\">obj, sEv, fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//IE浏览器</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj.attachEvent) &#123;</span><br><span class=\"line\">        obj.attachEvent(<span class=\"string\">\"on\"</span> + sEv, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"literal\">false</span> == fn.call(obj)) &#123;</span><br><span class=\"line\">                event.cancelBubble = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//标准浏览器</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        obj.addEventListener(sEv, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ev</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//false表示冒泡，true表示捕获，大多数情况下用冒泡不用捕获</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"literal\">false</span> == fn.call(obj)) &#123;</span><br><span class=\"line\">                event.cancelBubble = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                ev.preventDefault();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//封装on()函数</span></span><br><span class=\"line\">Yquery.prototype.on = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sEv, fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//不同的选择器可能选择多个元素，给每个选中的元素都需要添加on()方法</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//循环的给每个元素都绑定事件</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.elements.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//给每个元素绑定sEv事件，执行fn函数</span></span><br><span class=\"line\">        myAddEvent(<span class=\"keyword\">this</span>.elements[i], sEv, fn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>我们来测试一个看看是不是能阻止冒泡呢</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div style=<span class=\"string\">\"background:red;\"</span>&gt;</span><br><span class=\"line\">    &lt;div style=<span class=\"string\">\"background:green;\"</span>&gt;</span><br><span class=\"line\">        &lt;div style=<span class=\"string\">\"background:#CCC;\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">$(function ()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    $('div').click(function ()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        console.log(this.style.background);</span></span><br><span class=\"line\"><span class=\"regexp\">        return false;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></div></figure>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1236309/o_20.png\" alt=\" \" class=\"article-img\"></p>\n<p>至此，我们已经封装好了on()函数，并且可以阻止冒泡和阻止默认事件。</p>\n<h3 id=\"20-插件机制\">20.插件机制<a href=\"2018/06/28/Yquery#20-插件机制\"></a></h3><p>插件机制：其实就是给<code>Yquery</code>原型上添加一个方法，</p>\n<p>有两个参数，一个是方法的名称，另一个是方法的执行过程。</p>\n<p>Yquery.js：</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Yquery.prototype.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, fn</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Yquery.prototype[name] = fn;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n<p>利用<code>$().extend(function(){})</code>方法动态添加插件/方法</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$().extend(<span class=\"string\">\"name\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n<p>我们可以来测试下这样的方法到底可不可以动态的给Yquery添加方法。</p>\n<p>举例：</p>\n<ul>\n<li>添加size()方法，获取页面中的元素的个数。</li>\n</ul>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">       &lt;style&gt;</span><br><span class=\"line\">            div &#123;</span><br><span class=\"line\">                width: <span class=\"number\">50</span>px;</span><br><span class=\"line\">                height: <span class=\"number\">50</span>px;</span><br><span class=\"line\">                background-color: red;</span><br><span class=\"line\">                float: left;</span><br><span class=\"line\">                margin: <span class=\"number\">10</span>px;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/style&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;div&gt;&lt;span&gt;&lt;/</span>span&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script type=\"text/</span>javascript<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            $().extend('size', function() &#123;</span></span><br><span class=\"line\"><span class=\"string\">                return this.elements.length;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;)</span></span><br><span class=\"line\"><span class=\"string\">            $(function()&#123;</span></span><br><span class=\"line\"><span class=\"string\">                console.log($('div').size());</span></span><br><span class=\"line\"><span class=\"string\">                console.log($('div').find('span').size());</span></span><br><span class=\"line\"><span class=\"string\">            &#125;)</span></span><br><span class=\"line\"><span class=\"string\">&lt;/script&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p>运行结果：</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1236309/o_21.png\" alt=\" \"><br>我们可以正确的得到页面中元素的个数，至此我们的Yquery.js就封装好了。</p>\n<p>源代码见我的仓库地址：<a href=\"https://github.com/255255255255/Yquery\" target=\"_blank\" rel=\"noopener\">https://github.com/255255255255/Yquery</a></p>\n<p>接下来，我们就可以封装各类的框架，使我们的Yquery.js更加强大。</p>\n<h3 id=\"21-animate-插件的封装：Yquery-animate-js\">21.animate()插件的封装：<code>Yquery_animate.js</code><a href=\"2018/06/28/Yquery#21-animate-插件的封装：Yquery-animate-js\"></a></h3><p><code>animate()</code>方法的参数其实只有一个，就是json字符串。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$().extend(<span class=\"string\">'animate'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">json</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//让被选择器选中的元素，也就是elements数组中的每个元素都添加动画效果</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"keyword\">this</span>.elements.length;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        startMove(<span class=\"keyword\">this</span>.elements[i], json);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getStyle</span>(<span class=\"params\">obj, attr</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(obj.currentStyle)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> obj.currentStyle[attr];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> getComputedStyle(obj, <span class=\"literal\">false</span>)[attr];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startMove</span>(<span class=\"params\">obj, json, fn</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        clearInterval(obj.timer);</span><br><span class=\"line\">        obj.timer=setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> bStop=<span class=\"literal\">true</span>;     <span class=\"comment\">//这一次运动就结束了——所有的值都到达了</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> attr <span class=\"keyword\">in</span> json)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//1.取当前的值</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> iCur=<span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(attr==<span class=\"string\">'opacity'</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">              iCur=<span class=\"built_in\">parseInt</span>(<span class=\"built_in\">parseFloat</span>(getStyle(obj, attr))*<span class=\"number\">100</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    iCur=<span class=\"built_in\">parseInt</span>(getStyle(obj, attr));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//2.算速度</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> iSpeed=(json[attr]-iCur)/<span class=\"number\">8</span>;</span><br><span class=\"line\">                iSpeed=iSpeed&gt;<span class=\"number\">0</span>?<span class=\"built_in\">Math</span>.ceil(iSpeed):<span class=\"built_in\">Math</span>.floor(iSpeed);</span><br><span class=\"line\">                <span class=\"comment\">//3.检测停止</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(iCur!=json[attr])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    bStop=<span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(attr==<span class=\"string\">'opacity'</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    obj.style.filter=<span class=\"string\">'alpha(opacity:'</span>+(iCur+iSpeed)+<span class=\"string\">')'</span>;</span><br><span class=\"line\">                    obj.style.opacity=(iCur+iSpeed)/<span class=\"number\">100</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    obj.style[attr]=iCur+iSpeed+<span class=\"string\">'px'</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(bStop)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                clearInterval(obj.timer);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(fn)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    fn();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">30</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n<p>那我们来测试一下吧</p>\n<p>需要把<code>Yquery.js</code>和<code>Yquery_animate.js</code>文件都引入，才会出现效果。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;style&gt;</span><br><span class=\"line\">            #div1 &#123;</span><br><span class=\"line\">                width: 100px;</span><br><span class=\"line\">                height: 100px;</span><br><span class=\"line\">                background: red;</span><br><span class=\"line\">                filter: alpha(opacity:30);</span><br><span class=\"line\">                opacity: 0.3;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &lt;/style&gt;</span><br><span class=\"line\">        &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class=\"line\">        &lt;title&gt;无标题文档&lt;/title&gt;</span><br><span class=\"line\">        &lt;script src=&quot;../Yquery.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">        &lt;script src=&quot;../Yquery_animate.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">        &lt;script&gt;</span><br><span class=\"line\">            $(function() &#123;</span><br><span class=\"line\">                $(&apos;input&apos;).toggle(function() &#123;</span><br><span class=\"line\">                    $(&apos;#div1&apos;).animate(&#123;</span><br><span class=\"line\">                        width: 200,</span><br><span class=\"line\">                        height: 200,</span><br><span class=\"line\">                        opacity: 100</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                &#125;, function() &#123;</span><br><span class=\"line\">                    $(&apos;#div1&apos;).animate(&#123;</span><br><span class=\"line\">                        width: 100,</span><br><span class=\"line\">                        height: 100,</span><br><span class=\"line\">                        opacity: 30</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &lt;/script&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;input type=&quot;button&quot; value=&quot;运动&quot; /&gt;</span><br><span class=\"line\">        &lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></div></figure>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/cliy-10/1236309/o_22.png\" alt=\" \" class=\"article-img\"></p>\n<p>如图所见，出现了我们想要的动画效果，太开心了。和jQuery库中的animate()方法可是一点都不差呢！！可以用animate()方法制作上下焦点图、左右焦点图等，参考我的另一篇博客：在这里就不废话了。<br><a href=\"https://yingy0.github.io/2018/06/07/jQuery%E5%AE%9E%E4%BE%8B/\" target=\"_blank\" rel=\"noopener\">https://yingy0.github.io/2018/06/07/jQuery%E5%AE%9E%E4%BE%8B/</a></p>\n<h3 id=\"22-drag-插件的封装Yquery-drag-js\">22.drag()插件的封装<code>Yquery_drag.js</code><a href=\"2018/06/28/Yquery#22-drag-插件的封装Yquery-drag-js\"></a></h3><figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$().extend(<span class=\"string\">'drag'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//让被选择器选中的元素，也就是elements数组中的每个元素都添加拖拽效果</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"keyword\">this</span>.elements.length;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        drag(<span class=\"keyword\">this</span>.elements[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drag</span>(<span class=\"params\">oDiv</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        oDiv.onmousedown=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ev</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> oEvent=ev||event;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> disX=oEvent.clientX-oDiv.offsetLeft;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> disY=oEvent.clientY-oDiv.offsetTop;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.onmousemove=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ev</span>)</span></span><br><span class=\"line\"><span class=\"function\">            </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> oEvent=ev||event;</span><br><span class=\"line\">                oDiv.style.left=oEvent.clientX-disX+<span class=\"string\">'px'</span>;</span><br><span class=\"line\">                oDiv.style.top=oEvent.clientY-disY+<span class=\"string\">'px'</span>;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.onmouseup=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">            </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">document</span>.onmousemove=<span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"built_in\">document</span>.onmouseup=<span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n<p>那我们来测试一下：</p>\n<p>需要把<code>Yquery.js</code>和<code>Yquery_drag.js</code>文件都引入，才会出现效果。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">        &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">        &lt;style&gt;</span><br><span class=\"line\">            div&#123;</span><br><span class=\"line\">                width: <span class=\"number\">100</span>px;</span><br><span class=\"line\">                height: <span class=\"number\">50</span>px;</span><br><span class=\"line\">                background-color: #F47500;</span><br><span class=\"line\">                position: absolute;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/style&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;script type=\"text/</span>javascript<span class=\"string\">\" src=\"</span>../Yquery.js<span class=\"string\">\" &gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;script type=\"</span>text/javascript<span class=\"string\">\" src=\"</span>../Yquery_drag.js<span class=\"string\">\" &gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"string\">            $(function()&#123;</span></span><br><span class=\"line\"><span class=\"string\">                $('div').drag();</span></span><br><span class=\"line\"><span class=\"string\">            &#125;)</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div&gt;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p>注意：一定要给被拖动的元素设置定位(相对定位、固定定位)，才会出现拖动的效果。</p>\n","prev":{"title":"jQuery实例","link":"2018/06/29/jQuery实例"},"next":{"title":"jQuery对象和DOM对象","link":"2018/06/27/jQuery对象和DOM对象"},"plink":"http://yoursite.com/2018/06/28/Yquery/"}